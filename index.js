// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
const { Telegraf, Scenes, session, Markup } = require("telegraf");
const { initializeApp, cert } = require("firebase-admin/app");
const { getFirestore } = require("firebase-admin/firestore");
const moment = require("moment");
const fetch = require("node-fetch");
const admin = require("firebase-admin");

const cron = require("node-cron");
require("dotenv").config();
let BOT_START_TIME = Date.now();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);

initializeApp({
  credential: cert(serviceAccount),
});
const db = getFirestore();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

bot.telegram.setMyCommands([
  { command: "start", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
  { command: "info", description: "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç" },
  { command: "help", description: "–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞" },
]);

// Middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
bot.use(session());

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç middleware –ø–µ—Ä–µ–¥ bot.use(stage.middleware())
bot.use(async (ctx, next) => {
  try {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É) - –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    if (ctx.session && ctx.session.__scenes && ctx.session.__scenes.current) {
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ ${ctx.session.__scenes.current}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç`
      );
      return next();
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if (!ctx.callbackQuery && (!ctx.message || ctx.message.text !== "/start")) {
      if (
        !ctx.session ||
        !ctx.session.lastInteraction ||
        ctx.session.lastInteraction < BOT_START_TIME
      ) {
        console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldScenes =
          ctx.session && ctx.session.__scenes ? ctx.session.__scenes : null;
        ctx.session = { lastInteraction: Date.now() };

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ü–µ–Ω—É, –µ—Å–ª–∏ –±—ã–ª–∞
        if (oldScenes) {
          ctx.session.__scenes = oldScenes;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userDoc = await db
          .collection("users")
          .doc(String(ctx.from.id))
          .get();

        if (userDoc.exists) {
          await ctx.reply("–ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω. –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: getMainMenuKeyboard(),
          });
        } else {
          if (!oldScenes || oldScenes.current !== "register") {
            const name = ctx.from.first_name || "–î—Ä—É–≥";
            await ctx.reply(
              `–ü—Ä–∏–≤–µ—Ç, ${name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>DogMeet</b> ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Å–æ–±–∞–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç –¥—Ä—É–∑–µ–π, –∞ —Ö–æ–∑—è–µ–≤–∞ ‚Äî –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!  üê∂.\n` +
                "üîç <b>–ù–∞—Ö–æ–¥–∏—Ç–µ</b> —Å–æ–±–∞—á—å–∏—Ö –¥—Ä—É–∑–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n\n" +
                "üóìÔ∏è <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ</b> —è—Ä–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ–¥–Ω–∏–º –≤–∑–º–∞—Ö–æ–º –ª–∞–ø—ã\n" +
                "üëã <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å</b> –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ª—é–±–∏—Ç–µ–ª–µ–π —Å–æ–±–∞–∫\n" +
                "üèÜ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ</b> —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∑–≤–∞–Ω–∏—è\n\n",
              {
                parse_mode: "HTML",
                reply_markup: Markup.inlineKeyboard([
                  [Markup.button.callback("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "create_profile")],
                ]),
              }
            );

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
            ctx.session.justRestarted = true;
          }
        }

        // –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ü–µ–Ω–µ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É
        if (!oldScenes) {
          return;
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (!ctx.session) ctx.session = {};
    ctx.session.lastInteraction = Date.now();

    return next();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ middleware –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞:", error);
    return next();
  }
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫
const DOG_SIZES = {
  SMALL: { text: "–ú–∞–ª–µ–Ω—å–∫–∞—è üêæ (–¥–æ 10 –∫–≥)", value: "small" },
  MEDIUM: { text: "–°—Ä–µ–¥–Ω—è—è üêï (10‚Äì25 –∫–≥)", value: "medium" },
  LARGE: { text: "–ö—Ä—É–ø–Ω–∞—è üêï‚Äçü¶∫ (25+ –∫–≥)", value: "large" },
};

const DOG_AGES = {
  PUPPY: { text: "üçº –©–µ–Ω–æ–∫ (0‚Äì6 –º–µ—Å)", value: "puppy" },
  YOUNG: { text: "üêæ –ú–æ–ª–æ–¥–∞—è (6 –º–µ—Å ‚Äì 2 –≥–æ–¥–∞)", value: "young" },
  ADULT: { text: "üêï –í–∑—Ä–æ—Å–ª–∞—è (2‚Äì7 –ª–µ—Ç)", value: "adult" },
  SENIOR: { text: "ü¶¥ –°—Ç–∞—Ä—à–∞—è (7+ –ª–µ—Ç)", value: "senior" },
};

const TIME_SELECTION = {
  HOURS: "hours",
  MINUTES: "minutes",
};

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫
const POPULAR_BREEDS = [
  "–õ–∞–±—Ä–∞–¥–æ—Ä",
  "–ù–µ–º–µ—Ü–∫–∞—è –æ–≤—á–∞—Ä–∫–∞",
  "–•–∞—Å–∫–∏",
  "–î–∂–µ–∫ –†–∞—Å—Å–µ–ª",
  "–ô–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä",
  "–ß–∏—Ö—É–∞—Ö—É–∞",
  "–¢–∞–∫—Å–∞",
  "–î–≤–æ—Ä–Ω—è–∂–∫–∞",
  "–ö–æ—Ä–≥–∏",
  "–®–ø–∏—Ü",
  "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)",
];

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
const POPULAR_CITIES = [
  "–ú–æ—Å–∫–≤–∞",
  "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
  "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
  "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
  "–ö–∞–∑–∞–Ω—å",
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–≥—É–ª–æ–∫
function getUserRank(totalWalksCount) {
  if (totalWalksCount >= 200) return "–õ–µ–≥–µ–Ω–¥–∞ DogMeet";
  if (totalWalksCount >= 120) return "–ê–õ–¨–§–ê —Å–∞–º–µ—Ü";
  if (totalWalksCount >= 80) return "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–≥—É–ª–æ–∫";
  if (totalWalksCount >= 50) return "–ë—Ä–æ–¥—è–≥–∞ —Å–æ —Å—Ç–∞–∂–µ–º";
  if (totalWalksCount >= 35) return "–û–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–ø—ã—Ç";
  if (totalWalksCount >= 20) return "–í–µ—Ä–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫";
  if (totalWalksCount >= 10) return "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä–∫–æ–≤";
  if (totalWalksCount >= 5) return "–í–µ—Ä–Ω—ã–π –¥—Ä—É–≥";
  if (totalWalksCount >= 1) return "–ù–æ–≤–∏—á–æ–∫ –≤ —Å—Ç–∞–µ";
  return "–•–≤–æ—Å—Ç–∏–∫";
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
function getOrganizerBadge(organizedCount) {
  if (organizedCount >= 100) return "üëë";
  if (organizedCount >= 50) return "üåüüåüüåü";
  if (organizedCount >= 10) return "üåüüåü";
  if (organizedCount >= 1) return "üåü";
  return "";
}

function getNextRankInfo(currentWalkCount) {
  const ranks = [
    { threshold: 1, rank: "–ù–æ–≤–∏—á–æ–∫ –≤ —Å—Ç–∞–µ" },
    { threshold: 5, rank: "–í–µ—Ä–Ω—ã–π –¥—Ä—É–≥" },
    { threshold: 10, rank: "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä–∫–æ–≤" },
    { threshold: 20, rank: "–í–µ—Ä–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫" },
    { threshold: 35, rank: "–û–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–ø—ã—Ç" },
    { threshold: 50, rank: "–ë—Ä–æ–¥—è–≥–∞ —Å–æ —Å—Ç–∞–∂–µ–º" },
    { threshold: 80, rank: "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–≥—É–ª–æ–∫" },
    { threshold: 120, rank: "–ê–õ–¨–§–ê —Å–∞–º–µ—Ü" },
    { threshold: 200, rank: "–õ–µ–≥–µ–Ω–¥–∞ DogMeet" },
  ];

  for (const rankInfo of ranks) {
    if (currentWalkCount < rankInfo.threshold) {
      return rankInfo;
    }
  }

  return { threshold: "‚àû", rank: "–õ–µ–≥–µ–Ω–¥–∞ DogMeet+" };
}

function isDateToday(dateString) {
  const today = moment().format("DD.MM.YYYY");
  return dateString === today;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èn
async function updateUserRanks(userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = await db.collection("users").doc(String(userId)).get();

    if (!userDoc.exists) return;

    const userData = userDoc.data();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!userData.achievements) {
      userData.achievements = {
        walkCount: 0,
        organizedCount: 0,
        userRank: "–•–≤–æ—Å—Ç–∏–∫",
        organizerBadge: "",
        badges: [],
        specialStatus: {
          title: null,
          expiresAt: null,
        },
        lastUpdated: new Date(),
      };
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–≤–∞–Ω–∏—è
    const currentUserRank = userData.achievements.userRank;
    const currentOrganizerBadge = userData.achievements.organizerBadge || "";

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–≤–∞–Ω–∏—è
    const newUserRank = getUserRank(userData.achievements.walkCount);
    const newOrganizerBadge = getOrganizerBadge(
      userData.achievements.organizedCount
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.collection("users").doc(String(userId)).update({
      "achievements.userRank": newUserRank,
      "achievements.organizerBadge": newOrganizerBadge,
      "achievements.lastUpdated": new Date(),
    });

    // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–æ–≤—ã–π —Ä–∞–Ω–≥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (currentUserRank !== newUserRank) {
      await bot.telegram.sendMessage(
        userId,
        `üéñ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–æ–≤—ã–º –∑–≤–∞–Ω–∏–µ–º!</b>\n\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–∞–Ω–≥–∞ "${newUserRank}"!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–≤–∞–Ω–∏—è!`,
        { parse_mode: "HTML" }
      );
    }

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –º–µ—Ç–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (currentOrganizerBadge !== newOrganizerBadge && newOrganizerBadge) {
      await bot.telegram.sendMessage(
        userId,
        `üèÜ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!</b>\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–º–µ—Ç–∫—É "${newOrganizerBadge}" –∑–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–≥—É–ª–æ–∫!\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–æ–≥—É–ª–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–º–µ—Ç–∫—É!`,
        { parse_mode: "HTML" }
      );
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–≤–∞–Ω–∏–π
    return {
      rankChanged: currentUserRank !== newUserRank,
      badgeChanged: currentOrganizerBadge !== newOrganizerBadge,
      newUserRank,
      newOrganizerBadge,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return null;
  }
}
async function addBadge(userId, badgeId, badgeName, badgeDescription) {
  const userDoc = await db.collection("users").doc(String(userId)).get();
  if (!userDoc.exists) return false;

  const userData = userDoc.data();
  if (!userData.achievements) return false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±–µ–π–¥–∂
  const existingBadge = (userData.achievements.badges || []).find(
    (b) => b.id === badgeId
  );
  if (existingBadge) return false;

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–µ–π–¥–∂–∞
  const badge = {
    id: badgeId,
    name: badgeName,
    description: badgeDescription,
    earnedAt: new Date(),
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂
  await db
    .collection("users")
    .doc(String(userId))
    .update({
      "achievements.badges": admin.firestore.FieldValue.arrayUnion(badge),
    });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  await bot.telegram.sendMessage(
    userId,
    `üèÜ <b>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</b>\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞—á–æ–∫ "${badgeName}"!\n\n${badgeDescription}`,
    { parse_mode: "HTML" }
  );

  return true;
}

async function checkLuckyTail(userId, walkCount) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ 5-–π, 10-–π, 15-–π –∏ —Ç.–¥. –ø—Ä–æ–≥—É–ª–∫–æ–π
  if (walkCount % 5 === 0) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
    const rewards = [
      {
        type: "badge",
        id: "lucky_tail",
        name: "–•–≤–æ—Å—Ç —É–¥–∞—á–∏",
        description: "–°–ª—É—á–∞–π–Ω–∞—è —É–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º!",
      },
      {
        type: "temp_status",
        id: "dog_star",
        name: "–°–æ–±–∞—á—å—è –∑–≤–µ–∑–¥–∞",
        duration: 3, // –¥–Ω–∏
        description: "–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ 3 –¥–Ω—è",
      },
      {
        type: "progress_boost",
        value: 2,
        description: "–î–≤–æ–π–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–≤–∞–Ω–∏—é!",
      },
      {
        type: "hidden_achievement",
        id: "mystery_walker",
        name: "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≥—É–ª—è–∫–∞",
        description: "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–∫—Ä—ã—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
      },
    ];

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
    const randomReward = rewards[Math.floor(Math.random() * rewards.length)];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let message = "";

    switch (randomReward.type) {
      case "badge":
        await addBadge(
          userId,
          randomReward.id,
          randomReward.name,
          randomReward.description
        );
        message = `üçÄ <b>–•–≤–æ—Å—Ç —É–¥–∞—á–∏!</b>\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Å–æ–±—ã–π –∑–Ω–∞—á–æ–∫ "${randomReward.name}"!`;
        break;

      case "temp_status":
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        const expiry = new Date();
        expiry.setDate(expiry.getDate() + randomReward.duration);

        await db
          .collection("users")
          .doc(String(userId))
          .update({
            "achievements.specialStatus": {
              title: randomReward.name,
              expiresAt: expiry,
            },
          });

        message = `üçÄ <b>–•–≤–æ—Å—Ç —É–¥–∞—á–∏!</b>\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å "${randomReward.name}" –Ω–∞ ${randomReward.duration} –¥–Ω—è!`;
        break;

      case "progress_boost":
        // –í –Ω–∞—à–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω—É –ø—Ä–æ–≥—É–ª–∫—É –∫ —Å—á–µ—Ç—á–∏–∫—É
        await db
          .collection("users")
          .doc(String(userId))
          .update({
            "achievements.walkCount": admin.firestore.FieldValue.increment(1),
          });

        message = `üçÄ <b>–•–≤–æ—Å—Ç —É–¥–∞—á–∏!</b>\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å +1 –∫ –≤–∞—à–µ–º—É —Å—á–µ—Ç—á–∏–∫—É –ø—Ä–æ–≥—É–ª–æ–∫!`;
        break;

      case "hidden_achievement":
        await addBadge(
          userId,
          randomReward.id,
          randomReward.name,
          randomReward.description
        );
        message = `üçÄ <b>–•–≤–æ—Å—Ç —É–¥–∞—á–∏!</b>\n\n–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–∫—Ä—ã—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${randomReward.name}"!`;
        break;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ
    await bot.telegram.sendMessage(userId, message, { parse_mode: "HTML" });

    return true;
  }

  return false;
}

async function findNearbyWalksUnified(
  ctx,
  latitude,
  longitude,
  statusMsgId,
  maxDistance = 3
) {
  try {
    console.log(
      `–ü–æ–∏—Å–∫ –ø—Ä–æ–≥—É–ª–æ–∫ —Ä—è–¥–æ–º —Å (${latitude}, ${longitude}) –≤ —Ä–∞–¥–∏—É—Å–µ ${maxDistance} –∫–º`
    );

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserId = ctx.from.id;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
    const walksSnapshot = await db.collection("walks").get();

    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      await ctx.deleteMessage(statusMsgId);
    } catch (error) {
      console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", error);
    }

    if (walksSnapshot.empty) {
      await ctx.reply("–ü—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
          ],
        },
      });
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    const nearbyWalks = [];

    for (const walkDoc of walksSnapshot.docs) {
      const walk = walkDoc.data();

      // –ï—Å–ª–∏ —É –ø—Ä–æ–≥—É–ª–∫–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (walk.location && walk.location.latitude && walk.location.longitude) {
        const distance = calculateDistance(
          latitude,
          longitude,
          walk.location.latitude,
          walk.location.longitude
        );

        // –ï—Å–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ
        if (distance <= maxDistance) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–∏
          const isOwn = walk.organizer.id == currentUserId;

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
          const walkWithDistance = {
            ...walk,
            distance: distance,
            isOwn: isOwn,
            // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º locationText –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            locationText: walk.locationText
              ? `${walk.locationText} (${formatDistance(distance)} –æ—Ç –≤–∞—Å)`
              : `–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (${formatDistance(distance)} –æ—Ç –≤–∞—Å)`,
          };

          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å showWalksWithPagination
          nearbyWalks.push({
            id: walkDoc.id,
            data: () => walkWithDistance,
            // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            walkWithDistance: walkWithDistance,
          });
        }
      }
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if (nearbyWalks.length === 0) {
      await ctx.reply(`–ü—Ä–æ–≥—É–ª–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ ${maxDistance} –∫–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
          ],
        },
      });
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –¥–∞–ª—å–Ω–∏–º)
    nearbyWalks.sort((a, b) => a.data().distance - b.data().distance);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–≥—É–ª–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await showWalksWithPagination(ctx, nearbyWalks, 0, "find_walk");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
function formatDistance(distance) {
  return distance < 1
    ? `${Math.round(distance * 1000)} –º`
    : `${distance.toFixed(1)} –∫–º`;
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è showProfile
async function showProfile(ctx) {
  try {
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

    if (!userDoc.exists) {
      return await ctx.reply(
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "create_profile" }],
            ],
          },
        }
      );
    }

    const userData = userDoc.data();
    const achievements = userData.achievements || {
      walkCount: 0,
      organizedCount: 0,
      userRank: "–•–≤–æ—Å—Ç–∏–∫",
      organizerBadge: "",
      badges: [],
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    let specialStatusText = "";
    if (achievements.specialStatus && achievements.specialStatus.title) {
      const expiryDate = achievements.specialStatus.expiresAt
        ? new Date(achievements.specialStatus.expiresAt)
        : null;
      if (expiryDate && expiryDate > new Date()) {
        specialStatusText = `\nüåü –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å: ${achievements.specialStatus.title}`;
      } else {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        db.collection("users").doc(String(ctx.from.id)).update({
          "achievements.specialStatus.title": null,
          "achievements.specialStatus.expiresAt": null,
        });
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    let badgesText = "";
    if (achievements.badges && achievements.badges.length > 0) {
      const latestBadges = achievements.badges.slice(-3); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–Ω–∞—á–∫–∞
      badgesText = "\nüèÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: \n";
      latestBadges.forEach((badge) => {
        badgesText += `‚Ä¢ ${badge.name} - ${badge.description}\n`;
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    const orgBadge = achievements.organizerBadge
      ? ` ${achievements.organizerBadge}`
      : "";

    const profileText = `
üêï <b>–ö–ê–†–¢–û–ß–ö–ê –°–û–ë–ê–ö–û–í–û–î–ê</b> üêï

üë§ <b>${userData.name}</b>${orgBadge}
üìä <b>–ó–≤–∞–Ω–∏–µ:</b> ${achievements.userRank}
ü¶¥ –ü—Ä–æ–≥—É–ª–æ–∫: ${achievements.walkCount} (–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ: ${achievements.organizedCount})${specialStatusText}

üìç –ì–æ—Ä–æ–¥: ${userData.city}
üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
${badgesText}
    `;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            callback_data: "edit_profile_menu",
          },
          {
            text: "üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
            callback_data: "show_all_badges",
          },
        ],
        [
          {
            text: "‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∑–≤–∞–Ω–∏—è",
            callback_data: "ranks_info",
          },
        ],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
      ],
    };

    // –ï—Å–ª–∏ —É —Å–æ–±–∞–∫–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ
    if (userData.dog && userData.dog.photoId) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
      const photoMsg = await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: profileText,
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: keyboard.inline_keyboard },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
      if (!ctx.session) ctx.session = {};
      ctx.session.lastMessageId = photoMsg.message_id;
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const msg = await ctx.reply(profileText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!ctx.session) ctx.session = {};
      ctx.session.lastMessageId = msg.message_id;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    throw error;
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–æ–∫
async function updateWizardMessage(ctx, text, keyboard = null) {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    let messageId;

    // –ï—Å–ª–∏ —ç—Ç–æ callback (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É), –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (ctx.callbackQuery && ctx.callbackQuery.message) {
      messageId = ctx.callbackQuery.message.message_id;
    }
    // –ò–Ω–∞—á–µ –±–µ—Ä–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    else if (ctx.session && ctx.session.lastMessageId) {
      messageId = ctx.session.lastMessageId;
    }

    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if (messageId) {
      try {
        await ctx.telegram.editMessageText(ctx.chat.id, messageId, null, text, {
          parse_mode: "HTML",
          reply_markup: keyboard,
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if (!ctx.session) ctx.session = {};
        ctx.session.lastMessageId = messageId;
        return;
      } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
      }
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const msg = await ctx.reply(text, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!ctx.session) ctx.session = {};
    ctx.session.lastMessageId = msg.message_id;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ updateWizardMessage:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏
function getDogSizeText(size) {
  const sizeObj = Object.values(DOG_SIZES).find((s) => s.value === size);
  return sizeObj ? sizeObj.text.split(" ")[0] : "–°—Ä–µ–¥–Ω—è—è";
}

// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—É–ª–∫–µ
function formatWalkInfo(walk, isOwn = false) {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ - —Å–æ–∑–¥–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è
  const ownLabel = isOwn ? "üåü <b>–í–ê–®–ê –ü–†–û–ì–£–õ–ö–ê</b>\n" : "";

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
  const distanceText = walk.distance
    ? walk.distance < 1
      ? `${Math.round(walk.distance * 1000)} –º`
      : `${walk.distance.toFixed(1)} –∫–º`
    : "";

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
  const locationInfo = walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
  const locationWithDistance = distanceText
    ? `${locationInfo} (${distanceText} –æ—Ç –≤–∞—Å üìå)`
    : locationInfo;

  // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–π–¥–∂ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å - —Å—Ç–∞—Ç—É—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
  const organizerBadge =
    walk.organizer.achievements && walk.organizer.achievements.organizerBadge
      ? ` ${walk.organizer.achievements.organizerBadge}`
      : "";

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –ø—Ä–µ—Å—Ç–∏–∂–∞
  const userRankDisplay =
    walk.organizer.achievements && walk.organizer.achievements.userRank
      ? `\nüèÜ <i>${walk.organizer.achievements.userRank}</i>`
      : "";

  // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏/–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
  const timeInfo = isDateToday(walk.date) ? "üî• –°–ï–ì–û–î–ù–Ø!" : `üóì ${walk.date}`;

  // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
  const participantsInfo =
    walk.participants && walk.participants.length > 0
      ? `üêï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å: ${walk.participants.length + 1} —Å–æ–±–∞–∫–æ–≤–æ–¥–æ–≤!`
      : `üêï –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!`;

  // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—É–ª–∫–∏
  return `${ownLabel}${timeInfo}, ${walk.time}
üìç ${locationWithDistance}
${participantsInfo}
üë§ ${walk.dog.name} (${walk.organizer.name}${organizerBadge}) ${getDogAgeText(walk.dog.age)}${userRankDisplay}
${walk.organizer.username ? "@" + walk.organizer.username : ""}`.trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
async function migrateParticipantsHistory() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
    const walksSnapshot = await db.collection("walks").get();

    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    const organizerParticipants = {};

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–≥—É–ª–∫—É
    for (const walkDoc of walksSnapshot.docs) {
      const walk = walkDoc.data();

      if (!walk.organizer || !walk.organizer.id) {
        continue;
      }

      const organizerId = String(walk.organizer.id);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      if (!organizerParticipants[organizerId]) {
        organizerParticipants[organizerId] = [];
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
      if (walk.participants && Array.isArray(walk.participants)) {
        for (const participant of walk.participants) {
          if (
            participant.id &&
            !organizerParticipants[organizerId].includes(String(participant.id))
          ) {
            organizerParticipants[organizerId].push(String(participant.id));
          }
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    let updatedCount = 0;
    for (const [organizerId, participants] of Object.entries(
      organizerParticipants
    )) {
      if (participants.length > 0) {
        try {
          await db.collection("users").doc(organizerId).update({
            "walkHistory.participants": participants,
            "walkHistory.lastUpdated": new Date(),
          });
          updatedCount++;
        } catch (error) {
          console.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ ${organizerId}:`,
            error
          );
        }
      }
    }

    return {
      success: true,
      message: `–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.`,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    return {
      success: false,
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + error.message,
    };
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ
async function notifyNearbyUsers(walkId, organizer, walkData) {
  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ ${walkId}`);

    // –ï—Å–ª–∏ —É –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if (
      !walkData.location ||
      !walkData.location.latitude ||
      !walkData.location.longitude
    ) {
      console.log(
        "–£ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
    const walkLatitude = walkData.location.latitude;
    const walkLongitude = walkData.location.longitude;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const usersSnapshot = await db.collection("users").get();

    let notificationCount = 0;

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const userDoc of usersSnapshot.docs) {
      const user = userDoc.data();

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ)
      if (user.id === organizer.id) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
      if (user.location && user.location.latitude && user.location.longitude) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –º–µ—Å—Ç–æ–º –ø—Ä–æ–≥—É–ª–∫–∏
        const distance = calculateDistance(
          user.location.latitude,
          user.location.longitude,
          walkLatitude,
          walkLongitude
        );

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ 3 –∫–º –æ—Ç –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
        if (distance <= 3) {
          console.log(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ${distance.toFixed(2)} –∫–º –æ—Ç –ø—Ä–æ–≥—É–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`
          );

          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const distanceText =
            distance < 1
              ? `${Math.round(distance * 1000)} –º–µ—Ç—Ä–∞—Ö`
              : `${distance.toFixed(1)} –∫–º`;

          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ
          const walkDetailsText = `
  üîî –ù–û–í–ê–Ø –ü–†–û–ì–£–õ–ö–ê –†–Ø–î–û–ú –° –í–ê–ú–ò!
  
  üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
  üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"} (–≤ ${distanceText} –æ—Ç –≤–∞—Å)
  üîÑ –¢–∏–ø: ${walkData.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
            
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizer.name}
  üêï –°–æ–±–∞–∫–∞: ${organizer.dog.name}, ${organizer.dog.breed}, ${getDogSizeText(organizer.dog.size)}, ${getDogAgeText(organizer.dog.age)}
  
  ‚ùóÔ∏è –ü–æ–º–Ω–∏—Ç–µ: –∑–≤–∞–Ω–∏—è –∏ –æ—Ç–º–µ—Ç–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏

  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ!
  `;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await bot.telegram.sendMessage(user.id, walkDetailsText, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                    callback_data: `join_walk_${walkId}`,
                  },
                ],
                [
                  {
                    text: "üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                    callback_data: `walk_details_${walkId}`,
                  },
                ],
                [
                  {
                    text: "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data: "dismiss_notification",
                  },
                ],
              ],
            },
          });

          // –ï—Å–ª–∏ —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –µ–≥–æ
          if (organizer.dog.photoId) {
            await bot.telegram.sendPhoto(user.id, organizer.dog.photoId, {
              caption: "–§–æ—Ç–æ —Å–æ–±–∞–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞",
            });
          }

          notificationCount++;
        }
      }
    }

    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${notificationCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ`);

    // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (notificationCount > 0) {
      await bot.telegram.sendMessage(
        organizer.id,
        `‚úÖ <b>üéâ –ü–†–û–ì–£–õ–ö–ê –°–û–ó–î–ê–ù–ê! üéâ</b>\n\n` +
          `üîî –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ ${notificationCount} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏`,
        { parse_mode: "HTML" }
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ:", error);
  }
}

async function remindAboutWalks() {
  const now = new Date();
  const today = moment(now).format("DD.MM.YYYY");

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
  const walksSnapshot = await db.collection("walks").get();
  console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ ${walksSnapshot.docs.length} –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–∞ ${today}`);

  for (const walkDoc of walksSnapshot.docs) {
    const walk = walkDoc.data();
    const walkId = walkDoc.id;

    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏
    const [hours, minutes] = walk.time.split(":").map(Number);
    const walkTime = new Date();

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—Ä–æ–≥—É–ª–∫–∏
    const [day, month, year] = walk.date.split(".").map(Number);
    walkTime.setFullYear(year, month - 1, day); // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    walkTime.setHours(hours, minutes, 0, 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—É–ª–∫–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —á–∞—Å–∞
    const timeDiffMinutes = Math.round((now - walkTime) / (1000 * 60));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏
    if (walk.type === "single" && timeDiffMinutes > 60) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ –ø—Ä–æ–≥—É–ª–∫–∞
      if (!walk.status || walk.status !== "archived") {
        // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫—É
        await db.collection("walks").doc(walkId).update({
          status: "archived",
          archivedAt: new Date(),
        });
        console.log(
          `–ü—Ä–æ–≥—É–ª–∫–∞ ${walkId} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–ø—Ä–æ—à–ª–∞ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥)`
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—É–ª–∫—É –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await recordCompletedWalk(walkId);
      }
      continue;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏
    if (
      walk.type === "regular" &&
      walk.date === today &&
      timeDiffMinutes > 60
    ) {
      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ—à–µ–¥—à–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏
      const lastOccurrences = walk.lastOccurrences || [];
      const isTodayCompleted = lastOccurrences.some(
        (occurrence) => occurrence.date === today
      );

      if (!isTodayCompleted) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        const updatedOccurrences = [
          ...lastOccurrences,
          {
            date: today,
            status: "completed",
            completedAt: new Date(),
          },
        ];

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        if (updatedOccurrences.length > 30) {
          updatedOccurrences.shift();
        }

        await db.collection("walks").doc(walkId).update({
          lastOccurrences: updatedOccurrences,
        });

        console.log(
          `–†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ ${walkId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –Ω–∞ ${today}`
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—É–ª–∫—É –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await recordCompletedWalk(walkId);
      }
      continue;
    }

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø—Ä–æ–≥—É–ª–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è)
    if (walk.date === today) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç
      const timeToWalkMinutes = Math.round((walkTime - now) / (1000 * 60));

      if (timeToWalkMinutes > 14 && timeToWalkMinutes < 16) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
        const reminderText = `
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –ø—Ä–æ–≥—É–ª–∫–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!
üóì ${walk.date}, ${walk.time}
üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
`;

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        try {
          await bot.telegram.sendMessage(walk.organizer.id, reminderText, {
            reply_markup: getMainMenuKeyboard(),
          });
        } catch (error) {
          console.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É ${walk.organizer.id}:`,
            error
          );
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (walk.participants && Array.isArray(walk.participants)) {
          for (const participant of walk.participants) {
            try {
              await bot.telegram.sendMessage(participant.id, reminderText, {
                reply_markup: getMainMenuKeyboard(),
              });
            } catch (error) {
              console.error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É ${participant.id}:`,
                error
              );
            }
          }
        }
      }
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–º (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö

  const dLat = ((lat2 - lat1) * Math.PI) / 180;
  const dLon = ((lon2 - lon1) * Math.PI) / 180;

  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos((lat1 * Math.PI) / 180) *
      Math.cos((lat2 * Math.PI) / 180) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö

  return distance;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function showWalksWithPagination(
  ctx,
  walks,
  page = 0,
  returnCommand = "back_to_main_menu"
) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const walksPerPage = 3; // –ü—Ä–æ–≥—É–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const totalPages = Math.ceil(walks.length / walksPerPage);
  const currentPageWalks = walks.slice(
    page * walksPerPage,
    (page + 1) * walksPerPage
  );

  if (walks.length === 0) {
    return await updateWizardMessage(ctx, "–ü—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
      inline_keyboard: [
        [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: returnCommand }],
      ],
    });
  }

  // –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫
  let messageText = `–ù–∞–π–¥–µ–Ω–æ ${walks.length} –ø—Ä–æ–≥—É–ª–æ–∫:\n\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–≥—É–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
  currentPageWalks.forEach((walkDoc, index) => {
    const walk = walkDoc.data ? walkDoc.data() : walkDoc;
    const isOwn = walk.organizer && walk.organizer.id == ctx.from.id;
    messageText += formatWalkInfo(walk, isOwn);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–æ–≥—É–ª–∫–∞–º–∏
    if (index < currentPageWalks.length - 1) {
      messageText += "\n\n" + "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n";
    }
  });

  // –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  messageText += `\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}`;

  // –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫
  const keyboard = [];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–≥—É–ª–∫–∏
  currentPageWalks.forEach((walkDoc, index) => {
    const walkId = walkDoc.id;
    keyboard.push([
      {
        text: `–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—É–ª–∫–µ ${index + 1}`,
        callback_data: `walk_details_${walkId}`,
      },
    ]);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const paginationRow = [];
  if (page > 0) {
    paginationRow.push({
      text: "‚óÄÔ∏è –ù–∞–∑–∞–¥",
      callback_data: `pagination_${page - 1}_${returnCommand}`,
    });
  }
  if (page < totalPages - 1) {
    paginationRow.push({
      text: "–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è",
      callback_data: `pagination_${page + 1}_${returnCommand}`,
    });
  }

  if (paginationRow.length > 0) {
    keyboard.push(paginationRow);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
  keyboard.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: returnCommand }]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await updateWizardMessage(ctx, messageText, { inline_keyboard: keyboard });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  if (!ctx.session) ctx.session = {};
  ctx.session.lastWalks = walks;
  ctx.session.lastReturnCommand = returnCommand;
}

async function recordCompletedWalk(walkId) {
  try {
    const walkDoc = await db.collection("walks").doc(walkId).get();
    if (!walkDoc.exists) return false;

    const walk = walkDoc.data();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    await db
      .collection("users")
      .doc(String(walk.organizer.id))
      .update({
        "achievements.organizedCount": admin.firestore.FieldValue.increment(1),
      });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    await updateUserRanks(walk.organizer.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≥—É–ª–æ–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    const organizerDoc = await db
      .collection("users")
      .doc(String(walk.organizer.id))
      .get();
    const newOrganizerWalkCount =
      (organizerDoc.data().achievements.walkCount || 0) + 1;

    await db.collection("users").doc(String(walk.organizer.id)).update({
      "achievements.walkCount": newOrganizerWalkCount,
    });

    // –î–û–ë–ê–í–ò–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    await checkLuckyTail(walk.organizer.id, newOrganizerWalkCount);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≥—É–ª–æ–∫ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (walk.participants && walk.participants.length > 0) {
      for (const participant of walk.participants) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—É–ª–æ–∫
        const userDoc = await db
          .collection("users")
          .doc(String(participant.id))
          .get();
        const newWalkCount = (userDoc.data().achievements.walkCount || 0) + 1;

        await db.collection("users").doc(String(participant.id)).update({
          "achievements.walkCount": newWalkCount,
        });

        // –î–û–ë–ê–í–ò–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await checkLuckyTail(participant.id, newWalkCount);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await updateUserRanks(participant.id);
      }
    }

    console.log(`–ü—Ä–æ–≥—É–ª–∫–∞ ${walkId} —É—á—Ç–µ–Ω–∞ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    return false;
  }
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function finishRegistration(ctx) {
  try {
    const userData = ctx.wizard.state.userData || {};

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
    userData.name = userData.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    userData.city = userData.city || "–ù–µ —É–∫–∞–∑–∞–Ω";
    userData.dogName = userData.dogName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    userData.dogBreed = userData.dogBreed || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
    userData.dogSize = userData.dogSize || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
    userData.dogAge = userData.dogAge || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const achievements = {
      walkCount: 0,
      organizedCount: 0,
      userRank: "–•–≤–æ—Å—Ç–∏–∫",
      organizerBadge: "",
      badges: [],
      specialStatus: {
        title: null,
        expiresAt: null,
      },
      lastUpdated: new Date(),
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const user = {
      id: ctx.from.id,
      username: ctx.from.username || null,
      name: userData.name,
      city: userData.city,
      location: userData.location || null,
      dog: {
        name: userData.dogName,
        breed: userData.dogBreed,
        size: userData.dogSize,
        age: userData.dogAge,
        photoId: userData.dogPhotoId || null,
      },
      achievements: achievements,
      createdAt: new Date(),
    };

    await db.collection("users").doc(String(ctx.from.id)).set(user);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await updateWizardMessage(
      ctx,
      "<b>üéâ –£–†–ê! –ü–†–û–§–ò–õ–¨ –°–û–ó–î–ê–ù! üéâ</b> \n\n" +
        'üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–≤–∞–Ω–∏–µ "<b>–•–≤–æ—Å—Ç–∏–∫</b>"!\n\n' +
        "üêæ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n" +
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–µ—Å–µ–ª—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏\n" +
        "- –ò—Å–∫–∞—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ \n" +
        "- –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å\n\n" +
        "<i>–ì–æ—Ç–æ–≤—ã –∫ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ? –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>",
      getMainMenuKeyboard()
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      Markup.removeKeyboard()
    );
  }
}
// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ü–µ–Ω —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
async function initWalkEditScene(ctx, sceneName) {
  try {
    console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${sceneName}`);

    // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
    if (!ctx.session) ctx.session = {};
    const walkId = ctx.session.editWalkId;

    if (!walkId) {
      console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏!");
      ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏", {
        reply_markup: getMainMenuKeyboard(),
      });
      return { success: false };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ state
    ctx.wizard.state.walkId = walkId;
    ctx.wizard.state.walkData = {};

    return { success: true, walkId };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã ${sceneName}:`, error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", { reply_markup: getMainMenuKeyboard() });
    return { success: false };
  }
}

async function requestLocation(ctx, message, buttonText, flagName) {
  try {
    await ctx.answerCbQuery();
    await ctx.reply(
      message,
      Markup.keyboard([[Markup.button.locationRequest(buttonText)]]).resize()
    );

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ wizard.state
    if (ctx.wizard && ctx.wizard.state) {
      ctx.wizard.state[flagName] = true;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
async function findWalksInCity(ctx, city) {
  try {
    console.log(`–ü–æ–∏—Å–∫ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ: ${city}`);

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserId = ctx.from.id;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
    const walksSnapshot = await db.collection("walks").get();

    if (walksSnapshot.empty) {
      await ctx.reply("–ü—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
          ],
        },
      });
      return;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    const normalizedCity = city.toLowerCase();

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É
    const cityWalks = [];

    for (const walkDoc of walksSnapshot.docs) {
      const walk = walkDoc.data();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞
      const organizerDoc = await db
        .collection("users")
        .doc(String(walk.organizer.id))
        .get();

      if (organizerDoc.exists) {
        const organizerData = organizerDoc.data();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        if (
          organizerData.city &&
          organizerData.city.toLowerCase() === normalizedCity
        ) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–∏
          const isOwn = walk.organizer.id == currentUserId;

          cityWalks.push({
            id: walkDoc.id,
            ...walk,
            isOwn: isOwn, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
          });
        }
      }
    }

    // –ï—Å–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø—Ä–æ–≥—É–ª–æ–∫
    if (cityWalks.length === 0) {
      await ctx.reply(
        `–í –≥–æ—Ä–æ–¥–µ ${city} –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫. üòî\n\n` +
          `üí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ —Å–æ—Å–µ–¥–µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ DogMeet, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ –≥—É–ª—è—Ç—å —Å —Å–æ–±–∞–∫–∞–º–∏!\n\n` +
          `üêï –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø—Ä–æ–≥—É–ª–∫—É, –∏ –¥—Ä—É–≥–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã —Å–æ–±–∞–∫ —Å–º–æ–≥—É—Ç –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
              [
                {
                  text: "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π",
                  callback_data: "invite_friends",
                },
              ],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
            ],
          },
        }
      );
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    cityWalks.sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
      const dateA = a.date.split(".").reverse().join("-");
      const dateB = b.date.split(".").reverse().join("-");

      if (dateA !== dateB) {
        return dateA.localeCompare(dateB);
      }

      // –ï—Å–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è
      return a.time.localeCompare(b.time);
    });

    // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏
    await ctx.reply(`–ù–∞–π–¥–µ–Ω–æ ${cityWalks.length} –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ ${city}:`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–∫
    for (const walk of cityWalks) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫
      const ownLabel = walk.isOwn ? "üåü –ú–û–Ø –ü–†–û–ì–£–õ–ö–ê\n" : "";

      const organizerBadge =
        walk.organizer.achievements &&
        walk.organizer.achievements.organizerBadge
          ? ` ${walk.organizer.achievements.organizerBadge}`
          : "";

      const walkPreview = `${ownLabel}üïí ${walk.date}, ${walk.time}
üìç ${locationWithDistance}
üêï –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants ? walk.participants.length + 1 : 1}
üë§ ${walk.dog.name} (${walk.organizer.name}${organizerBadge}) ${getDogAgeText(walk.dog.age)}${userRankDisplay}
${walk.organizer.username ? "@" + walk.organizer.username : ""}`.trim();

      await ctx.reply(walkPreview, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data: `walk_details_${walk.id}` }],
          ],
        },
      });
    }

    await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è:", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏
async function publishWalk(ctx, walkData, userData) {
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—É–ª–∫—É –≤ –ë–î
  const walkRef = await db.collection("walks").add({
    date: walkData.date,
    time: walkData.time,
    locationText: walkData.locationText || null,
    location: walkData.location || null,
    type: walkData.type,
    organizer: {
      id: ctx.from.id,
      name: userData.name,
      username: ctx.from.username || null,
    },
    dog: {
      name: userData.dog.name,
      breed: userData.dog.breed,
      size: userData.dog.size,
      age: userData.dog.age,
      photoId: userData.dog.photoId,
    },
    participants: [],
    createdAt: new Date(),
  });

  // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
  await ctx.reply("<b>üéâ –ü–†–û–ì–£–õ–ö–ê –°–û–ó–î–ê–ù–ê! üéâ</b>", {
    reply_markup: getMainMenuKeyboard(),
  });

  console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
  try {
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    await notifyNearbyUsers(walkRef.id, userData, walkData);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º");
    await notifyPreviousParticipantsFromProfiles(
      ctx.from.id,
      walkRef.id,
      walkData
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
  }

  return walkRef.id;
}
async function getLocationCity(latitude, longitude) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenStreetMap Nominatim API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=10&addressdetails=1`,
      {
        headers: {
          "User-Agent": "DogMeetBot/1.0", // –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å User-Agent –¥–ª—è Nominatim API
        },
      }
    );

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
    }

    const data = await response.json();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    // Nominatim –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: city, town, village –∏ —Ç.–¥.
    const city =
      data.address.city ||
      data.address.town ||
      data.address.village ||
      data.address.suburb ||
      data.address.county ||
      data.address.state;

    return city || null;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
    return null; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }
}
async function notifyPreviousParticipantsFromProfiles(
  organizerId,
  walkId,
  walkData
) {
  try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤ —Å—Ç—Ä–æ–∫—É (–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firestore)
    const organizerIdStr = String(organizerId);

    const organizerDoc = await db.collection("users").doc(organizerIdStr).get();

    if (!organizerDoc.exists) {
      console.error(`–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —Å ID: ${organizerIdStr}`);
      return 0;
    }

    const organizer = organizerDoc.data();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ walkHistory
    if (!organizer.walkHistory) {
      console.log("–£ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ walkHistory");
      return 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Å–∏–≤–∞ participants
    if (!organizer.walkHistory.participants) {
      console.log("–£ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ—Ç walkHistory.participants");
      return 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ participants - —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(organizer.walkHistory.participants)) {
      console.log(
        "walkHistory.participants –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –µ–≥–æ —Ç–∏–ø:",
        typeof organizer.walkHistory.participants
      );
      return 0;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π
    if (organizer.walkHistory.participants.length === 0) {
      console.log("–ú–∞—Å—Å–∏–≤ participants –ø—É—Å—Ç");
      return 0;
    }

    const participants = organizer.walkHistory.participants;

    let sentCount = 0;

    for (const participantId of participants) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (!participantId) {
          console.log("–ü—É—Å—Ç–æ–π ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
          continue;
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —á–∏—Å–ª–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram API
        const participantIdNum = Number(participantId);

        if (isNaN(participantIdNum)) {
          console.log(`ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${participantId}`);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userDoc = await db
          .collection("users")
          .doc(String(participantId))
          .get();

        if (!userDoc.exists) {
          console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${participantId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        const notificationText = `
üîî –ù–û–í–ê–Ø –ü–†–û–ì–£–õ–ö–ê –û–¢ –ó–ù–ê–ö–û–ú–û–ì–û –•–û–ó–Ø–ò–ù–ê!
  
üëã –†–∞–Ω–µ–µ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ —Å ${organizer.name} –∏ ${organizer.dog.name}! 
–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞?
  
üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
üîÑ –¢–∏–ø: ${walkData.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
`;

        await bot.telegram.sendMessage(participantIdNum, notificationText, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                  callback_data: `join_walk_${walkId}`,
                },
              ],
              [
                {
                  text: "üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                  callback_data: `walk_details_${walkId}`,
                },
              ],
              [
                {
                  text: "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                  callback_data: "dismiss_notification",
                },
              ],
            ],
          },
        });

        sentCount++;
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É ${participantId}:`,
          error
        );
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    return sentCount;
  } catch (error) {
    console.error("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", error);
    return 0;
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏
function getDogAgeText(age) {
  const ageObj = Object.values(DOG_AGES).find((a) => a.value === age);
  return ageObj ? ageObj.text.split(" ")[0] : "–í–∑—Ä–æ—Å–ª–∞—è";
}

function getWalkFiltersKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üîπ –ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º", callback_data: "walks_nearby" }],
      [
        { text: "üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data: "walks_today" },
        { text: "üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data: "walks_tomorrow" },
        { text: "üìÖ –í—Å–µ –¥–∞—Ç—ã", callback_data: "walks_all_dates" },
      ],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
    ],
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function isValidString(str) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –Ω–µ "null", "undefined", –∏ —Ç.–¥.
  return (
    str &&
    typeof str === "string" &&
    str.trim() !== "" &&
    str.toLowerCase() !== "null" &&
    str.toLowerCase() !== "undefined"
  );
}

function isValidDate(dateStr) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
  const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;
  if (!dateRegex.test(dateStr)) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
  const [day, month, year] = dateStr.split(".").map(Number);
  const date = new Date(year, month - 1, day);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  if (
    date.getFullYear() !== year ||
    date.getMonth() !== month - 1 ||
    date.getDate() !== day
  ) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
  const today = new Date();
  today.setHours(0, 0, 0, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã

  return date >= today;
}

async function notifyWalkParticipants(participants, message) {
  if (!participants || participants.length === 0) return;

  for (const participant of participants) {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫ –∫–∞–∂–¥–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
      await bot.telegram.sendMessage(participant.id, message, {
        reply_markup: getMainMenuKeyboard(),
      });
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É ${participant.id}:`,
        error
      );
    }
  }
}

// –°—Ü–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerScene = new Scenes.WizardScene(
  "register",
  async (ctx) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.wizard.state.userData = {};

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram
    const firstName = ctx.from.first_name || "";
    const lastName = ctx.from.last_name || "";

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    ctx.wizard.state.userData.name =
      firstName + (lastName ? " " + lastName : "");

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    const welcomeText =
      `${ctx.wizard.state.userData.name}, –ß—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.\n\n` +
      `üí° <b>–°–æ–≤–µ—Ç</b>: –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª–∏—Ç:\n` +
      `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—É–ª–∫–∞—Ö –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n` +
      `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä "–ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º"\n` +
      `‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±–∞—á—å–∏—Ö –¥—Ä—É–∑–µ–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ`;

    const keyboard = {
      inline_keyboard: [
        // –ö–Ω–æ–ø–∫–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏
        ...POPULAR_CITIES.map((city) => [
          { text: city, callback_data: `city_${city}` },
        ]),
        // –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        [
          {
            text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            callback_data: "send_location_reg",
          },
        ],
      ],
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    const msg = await ctx.reply(welcomeText, {
      parse_mode: "HTML",
      reply_markup: keyboard,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    ctx.wizard.state.messageId = msg.message_id;

    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞/–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data.startsWith("city_")) {
          ctx.wizard.state.userData.city = data.replace("city_", "");

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
          await updateWizardMessage(
            ctx,
            "<b>–ê –∫–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æ –¥—Ä—É–≥–∞?</b> üê∂",
            null
          );

          return ctx.wizard.next();
        } else if (data === "send_location_reg") {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          await updateWizardMessage(
            ctx,
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            null
          );

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          const keyboardMsg = await ctx.reply(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–Ω–æ–ø–∫—É:",
            Markup.keyboard([
              [Markup.button.locationRequest("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")],
            ]).resize()
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ
          ctx.wizard.state.keyboardMsgId = keyboardMsg.message_id;
          ctx.wizard.state.waitingForLocationReg = true;
          return;
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      else if (ctx.message && ctx.message.location) {
        console.log("–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", ctx.message.location);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        ctx.wizard.state.userData.location = {
          latitude: ctx.message.location.latitude,
          longitude: ctx.message.location.longitude,
        };

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π");
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if (ctx.wizard.state.keyboardMsgId) {
          try {
            await ctx.deleteMessage(ctx.wizard.state.keyboardMsgId);
            delete ctx.wizard.state.keyboardMsgId;
          } catch (error) {
            console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π");
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        const cityName = await getLocationCity(
          ctx.message.location.latitude,
          ctx.message.location.longitude
        ).catch((err) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", err);
          return "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
        });

        ctx.wizard.state.userData.city = cityName || "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
        await updateWizardMessage(
          ctx,
          "üéâ –û—Ç–ª–∏—á–Ω–æ! –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n<b>–ê –∫–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æ –¥—Ä—É–≥–∞?</b> üê∂",
          null
        );

        return ctx.wizard.next();
      }

      // –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏/callback, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Å–æ–±–∞–∫–∏
      await updateWizardMessage(
        ctx,
        "<b>–ê –∫–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ —Ö–≤–æ—Å—Ç–∞—Ç–æ–≥–æ –¥—Ä—É–≥–∞?</b> üê∂",
        null
      );
      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–∞/–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
      await updateWizardMessage(
        ctx,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        {
          inline_keyboard: POPULAR_CITIES.map((city) => [
            { text: city, callback_data: `city_${city}` },
          ]),
        }
      );
      // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
      return;
    }
  },

  // –®–∞–≥ 3: –ò–º—è —Å–æ–±–∞–∫–∏
  async (ctx) => {
    if (ctx.message && ctx.message.text) {
      if (!isValidString(ctx.message.text)) {
        await updateWizardMessage(
          ctx,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Å–æ–±–∞–∫–∏:"
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      ctx.wizard.state.userData.dogName = ctx.message.text;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ—Ä–æ–¥—ã
    const keyboard = {
      inline_keyboard: POPULAR_BREEDS.map((breed) => [
        { text: breed, callback_data: `breed_${breed}` },
      ]),
    };

    await updateWizardMessage(
      ctx,
      "<b>–ö–∞–∫–æ–π –ø–æ—Ä–æ–¥—ã –≤–∞—à —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏–π –∫–æ–º–ø–∞–Ω—å–æ–Ω?</b> üß¨\n" +
        "<i>(–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)</i>",
      keyboard
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 4: –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith("breed_")) {
      const breed = ctx.callbackQuery.data.replace("breed_", "");
      await ctx.answerCbQuery();

      if (breed === "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)") {
        await updateWizardMessage(
          ctx,
          "<b>–ö–∞–∫–æ–π –ø–æ—Ä–æ–¥—ã –≤–∞—à —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏–π –∫–æ–º–ø–∞–Ω—å–æ–Ω?</b> üß¨\n" +
            "<i>(–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)</i>"
        );
        ctx.wizard.state.waitingForCustomBreed = true;
        return;
      } else {
        ctx.wizard.state.userData.dogBreed = breed;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Ä–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏
        const sizeKeyboard = {
          inline_keyboard: [
            [
              {
                text: "üêæ –ú–∞–ª–µ–Ω—å–∫–∞—è (–¥–æ 10 –∫–≥)",
                callback_data: "size_small",
              },
            ],
            [
              {
                text: "üêï –°—Ä–µ–¥–Ω—è—è (10‚Äì25 –∫–≥)",
                callback_data: "size_medium",
              },
            ],
            [{ text: "üêï‚Äçü¶∫ –ö—Ä—É–ø–Ω–∞—è (25+ –∫–≥)", callback_data: "size_large" }],
          ],
        };

        await updateWizardMessage(
          ctx,
          "<b>–†–∞–∑–º–µ—Ä –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!</b> üìè \n\n" +
            "–ü–æ–¥–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:",
          sizeKeyboard
        );
        return ctx.wizard.next();
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–æ—Ä–æ–¥—ã
    else if (
      ctx.wizard.state.waitingForCustomBreed &&
      ctx.message &&
      ctx.message.text
    ) {
      if (!isValidString(ctx.message.text)) {
        await updateWizardMessage(
          ctx,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—Ä–æ–¥—É:"
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      ctx.wizard.state.userData.dogBreed = ctx.message.text;
      ctx.wizard.state.waitingForCustomBreed = false;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Ä–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏
      const sizeKeyboard = {
        inline_keyboard: [
          [
            [
              {
                text: "üêæ –ú–∞–ª–µ–Ω—å–∫–∞—è (–¥–æ 10 –∫–≥)",
                callback_data: "size_small",
              },
            ],
            [
              {
                text: "üêï –°—Ä–µ–¥–Ω—è—è (10‚Äì25 –∫–≥)",
                callback_data: "size_medium",
              },
            ],
            [{ text: "üêï‚Äçü¶∫ –ö—Ä—É–ø–Ω–∞—è (25+ –∫–≥)", callback_data: "size_large" }],
          ],
        ],
      };

      await updateWizardMessage(
        ctx,
        "–ö–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—à–∞ —Å–æ–±–∞–∫–∞?",
        sizeKeyboard
      );
      return ctx.wizard.next();
    }
    // –ï—Å–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    else if (ctx.message && ctx.message.text) {
      ctx.wizard.state.userData.dogBreed = ctx.message.text;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      const sizeKeyboard = {
        inline_keyboard: [
          [
            {
              text: "üêæ –ú–∞–ª–µ–Ω—å–∫–∞—è (–¥–æ 10 –∫–≥)",
              callback_data: "size_small",
            },
          ],
          [
            {
              text: "üêï –°—Ä–µ–¥–Ω—è—è (10‚Äì25 –∫–≥)",
              callback_data: "size_medium",
            },
          ],
          [{ text: "üêï‚Äçü¶∫ –ö—Ä—É–ø–Ω–∞—è (25+ –∫–≥)", callback_data: "size_large" }],
        ],
      };

      await updateWizardMessage(
        ctx,
        "–ö–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—à–∞ —Å–æ–±–∞–∫–∞?",
        sizeKeyboard
      );
      return ctx.wizard.next();
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ä–æ–¥—É, –µ—Å–ª–∏ –∫–∞–∫-—Ç–æ –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
    const breedKeyboard = {
      inline_keyboard: POPULAR_BREEDS.map((breed) => [
        { text: breed, callback_data: `breed_${breed}` },
      ]),
    };

    await updateWizardMessage(
      ctx,
      "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n" +
        "<i>(–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–µ—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)</i>",
      breedKeyboard
    );
    return;
  },

  // –®–∞–≥ 5: –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
    if (ctx.callbackQuery) {
      const data = ctx.callbackQuery.data;
      await ctx.answerCbQuery();

      if (data === "size_small") {
        ctx.wizard.state.userData.dogSize = "small";
      } else if (data === "size_medium") {
        ctx.wizard.state.userData.dogSize = "medium";
      } else if (data === "size_large") {
        ctx.wizard.state.userData.dogSize = "large";
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏
      const ageKeyboard = {
        inline_keyboard: [
          [{ text: DOG_AGES.PUPPY.text, callback_data: "age_puppy" }],
          [{ text: DOG_AGES.YOUNG.text, callback_data: "age_young" }],
          [{ text: DOG_AGES.ADULT.text, callback_data: "age_adult" }],
          [{ text: DOG_AGES.SENIOR.text, callback_data: "age_senior" }],
        ],
      };

      await updateWizardMessage(
        ctx,
        "<b>–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ö–≤–æ—Å—Ç–∞—Ç–æ–º—É –¥—Ä—É–≥—É?</b> üóìÔ∏è",
        ageKeyboard
      );
      return ctx.wizard.next();
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    else if (ctx.message && ctx.message.text) {
      const size = Object.values(DOG_SIZES).find((size) =>
        size.text.includes(ctx.message.text)
      );

      ctx.wizard.state.userData.dogSize = size
        ? size.value
        : DOG_SIZES.MEDIUM.value;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      const ageKeyboard = {
        inline_keyboard: [
          [{ text: DOG_AGES.PUPPY.text, callback_data: "age_puppy" }],
          [{ text: DOG_AGES.YOUNG.text, callback_data: "age_young" }],
          [{ text: DOG_AGES.ADULT.text, callback_data: "age_adult" }],
          [{ text: DOG_AGES.SENIOR.text, callback_data: "age_senior" }],
        ],
      };

      await updateWizardMessage(
        ctx,
        "<b>–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ö–≤–æ—Å—Ç–∞—Ç–æ–º—É –¥—Ä—É–≥—É?</b> üóìÔ∏è",
        ageKeyboard
      );
      return ctx.wizard.next();
    }

    // –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!ctx.wizard.state.userData.dogSize) {
      ctx.wizard.state.userData.dogSize = DOG_SIZES.MEDIUM.value;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    const ageKeyboard = {
      inline_keyboard: [
        [{ text: DOG_AGES.PUPPY.text, callback_data: "age_puppy" }],
        [{ text: DOG_AGES.YOUNG.text, callback_data: "age_young" }],
        [{ text: DOG_AGES.ADULT.text, callback_data: "age_adult" }],
        [{ text: DOG_AGES.SENIOR.text, callback_data: "age_senior" }],
      ],
    };

    await updateWizardMessage(
      ctx,
      "<b>–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ö–≤–æ—Å—Ç–∞—Ç–æ–º—É –¥—Ä—É–≥—É?</b> üóìÔ∏è",
      ageKeyboard
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 6: –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (ctx.callbackQuery) {
      const data = ctx.callbackQuery.data;
      await ctx.answerCbQuery();

      if (data === "age_puppy") {
        ctx.wizard.state.userData.dogAge = "puppy";
      } else if (data === "age_young") {
        ctx.wizard.state.userData.dogAge = "young";
      } else if (data === "age_adult") {
        ctx.wizard.state.userData.dogAge = "adult";
      } else if (data === "age_senior") {
        ctx.wizard.state.userData.dogAge = "senior";
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
      const photoKeyboard = {
        inline_keyboard: [
          [{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data: "skip_photo" }],
        ],
      };

      await updateWizardMessage(
        ctx,
        "<b>–ü–æ–∫–∞–∂–∏—Ç–µ –º–∏—Ä—É –≤–∞—à–µ–≥–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞/–∫—Ä–∞—Å–∞–≤–∏—Ü—É!</b> üì∏\n\n" +
          "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏ \n" +
          "<i>(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ 70%)</i>",
        photoKeyboard
      );
      return ctx.wizard.next();
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    else if (ctx.message && ctx.message.text) {
      const age = Object.values(DOG_AGES).find((age) =>
        age.text.includes(ctx.message.text)
      );

      ctx.wizard.state.userData.dogAge = age ? age.value : DOG_AGES.ADULT.value;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
      const photoKeyboard = {
        inline_keyboard: [
          [{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data: "skip_photo" }],
        ],
      };

      await updateWizardMessage(
        ctx,
        "<b>–ü–æ–∫–∞–∂–∏—Ç–µ –º–∏—Ä—É –≤–∞—à–µ–≥–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞/–∫—Ä–∞—Å–∞–≤–∏—Ü—É!</b> üì∏\n\n" +
          "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n" +
          "<i>(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ 70%)</i>",
        photoKeyboard
      );
      return ctx.wizard.next();
    }

    // –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∑—Ä–æ—Å–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!ctx.wizard.state.userData.dogAge) {
      ctx.wizard.state.userData.dogAge = DOG_AGES.ADULT.value;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    const photoKeyboard = {
      inline_keyboard: [
        [{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data: "skip_photo" }],
      ],
    };

    await updateWizardMessage(
      ctx,
      "<b>–ü–æ–∫–∞–∂–∏—Ç–µ –º–∏—Ä—É –≤–∞—à–µ–≥–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞/–∫—Ä–∞—Å–∞–≤–∏—Ü—É!</b> üì∏\n\n" +
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n" +
        "<i>(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ 70%)</i>",
      photoKeyboard
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 7: –§–æ—Ç–æ —Å–æ–±–∞–∫–∏
  async (ctx) => {
    try {
      const userData = ctx.wizard.state.userData || {};

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
      if (ctx.callbackQuery && ctx.callbackQuery.data === "skip_photo") {
        await ctx.answerCbQuery();

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await finishRegistration(ctx);
        return ctx.scene.leave();
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
      else if (ctx.message && ctx.message.photo) {
        const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        userData.dogPhotoId = photoId;

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await finishRegistration(ctx);
        return ctx.scene.leave();
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ, –Ω–æ –Ω–µ —Ñ–æ—Ç–æ
      else if (ctx.message) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }

        // –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        await updateWizardMessage(
          ctx,
          "<b>–ü–æ–∫–∞–∂–∏—Ç–µ –º–∏—Ä—É –≤–∞—à–µ–≥–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞/–∫—Ä–∞—Å–∞–≤–∏—Ü—É!</b> üì∏\n\n" +
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n" +
            "<i>(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ 70%)</i>",
          {
            inline_keyboard: [
              [{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data: "skip_photo" }],
            ],
          }
        );
        return;
      }

      return;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        Markup.removeKeyboard()
      );
      return ctx.scene.leave();
    }
  }
);
// –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
const createWalkScene = new Scenes.WizardScene(
  "createWalk",
  // –®–∞–≥ 1: –î–∞—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
  async (ctx) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (!ctx.session) ctx.session = {};
    ctx.wizard.state.walkData = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ (–µ—Å–ª–∏ –º—ã —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã)
    if (ctx.scene.state && ctx.scene.state.skipFirstStep) {
      return ctx.wizard.next();
    }

    // –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥
    await updateWizardMessage(
      ctx,
      "<b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π?</b> üóìÔ∏è\n\n" +
        "<i>–°–æ–∑–¥–∞–≤–∞—è –ø—Ä–æ–≥—É–ª–∫–∏, –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ø–æ–≤—ã—à–∞–µ—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!</i>",
      {
        inline_keyboard: [
          [
            { text: "–°–µ–≥–æ–¥–Ω—è", callback_data: "date_today" },
            { text: "–ó–∞–≤—Ç—Ä–∞", callback_data: "date_tomorrow" },
          ],
          [{ text: "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data: "date_custom" }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ],
      }
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ —Å—Ü–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      await ctx.answerCbQuery();
      await updateWizardMessage(
        ctx,
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        getMainMenuKeyboard()
      );
      return ctx.scene.leave();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    if (ctx.callbackQuery) {
      const data = ctx.callbackQuery.data;
      await ctx.answerCbQuery();

      if (data === "date_today") {
        ctx.wizard.state.walkData.date = moment().format("DD.MM.YYYY");
      } else if (data === "date_tomorrow") {
        ctx.wizard.state.walkData.date = moment()
          .add(1, "days")
          .format("DD.MM.YYYY");
      } else if (data === "date_custom") {
        await updateWizardMessage(
          ctx,
          "<b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π?</b> üóìÔ∏è\n\n" +
            "<i>–°–æ–∑–¥–∞–≤–∞—è –ø—Ä–æ–≥—É–ª–∫–∏, –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ø–æ–≤—ã—à–∞–µ—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!</i>\n\n" +
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
          {
            inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]],
          }
        );
        ctx.wizard.state.customDate = true;
        return;
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–∞—Ç—ã
    else if (ctx.message && ctx.message.text) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –∏ —á—Ç–æ –æ–Ω–∞ –Ω–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
      if (!isValidDate(ctx.message.text)) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        await updateWizardMessage(
          ctx,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –±—É–¥—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
          {
            inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]],
          }
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
      }

      ctx.wizard.state.walkData.date = ctx.message.text;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }
    }

    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
    if (ctx.wizard.state.walkData.date) {
      await updateWizardMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", {
        inline_keyboard: [
          ...["6", "7", "8", "9", "10", "11", "12"].map((h) => [
            { text: h, callback_data: `hour_${h}` },
          ]),
          ...["13", "14", "15", "16", "17", "18"].map((h) => [
            { text: h, callback_data: `hour_${h}` },
          ]),
          ...["19", "20", "21", "22", "23"].map((h) => [
            { text: h, callback_data: `hour_${h}` },
          ]),
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ],
      });
    }

    return ctx.wizard.next();
  },

  // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      await ctx.answerCbQuery();
      await updateWizardMessage(
        ctx,
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        getMainMenuKeyboard()
      );
      return ctx.scene.leave();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
    if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith("hour_")) {
      const hour = ctx.callbackQuery.data.replace("hour_", "");
      await ctx.answerCbQuery();

      ctx.wizard.state.walkData.hours = hour;

      await updateWizardMessage(ctx, `–í—ã–±—Ä–∞–Ω–æ: ${hour} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`, {
        inline_keyboard: [
          ...["00", "05", "10", "15"].map((m) => [
            { text: m, callback_data: `minute_${m}` },
          ]),
          ...["20", "25", "30", "35"].map((m) => [
            { text: m, callback_data: `minute_${m}` },
          ]),
          ...["40", "45", "50", "55"].map((m) => [
            { text: m, callback_data: `minute_${m}` },
          ]),
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ],
      });
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å–∞
    else if (ctx.message && ctx.message.text) {
      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        await updateWizardMessage(
          ctx,
          "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23
      const hours = parseInt(ctx.message.text, 10);
      if (isNaN(hours) || hours < 0 || hours > 23) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        await updateWizardMessage(
          ctx,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ (0-23):",
          {
            inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]],
          }
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      ctx.wizard.state.walkData.hours = String(hours);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }

      await updateWizardMessage(ctx, `–í—ã–±—Ä–∞–Ω–æ: ${hours} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`, {
        inline_keyboard: [
          ...["00", "05", "10", "15"].map((m) => [
            { text: m, callback_data: `minute_${m}` },
          ]),
          ...["20", "25", "30", "35"].map((m) => [
            { text: m, callback_data: `minute_${m}` },
          ]),
          ...["40", "45", "50", "55"].map((m) => [
            { text: m, callback_data: `minute_${m}` },
          ]),
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ],
      });
    }

    return ctx.wizard.next();
  },

  // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç –∏ –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞
  // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç –∏ –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      await ctx.answerCbQuery();
      await updateWizardMessage(
        ctx,
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        getMainMenuKeyboard()
      );
      return ctx.scene.leave();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç
    if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith("minute_")) {
      const minute = ctx.callbackQuery.data.replace("minute_", "");
      await ctx.answerCbQuery();

      ctx.wizard.state.walkData.minutes = minute;
      ctx.wizard.state.walkData.time = `${ctx.wizard.state.walkData.hours}:${minute}`;

      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞
      await updateWizardMessage(
        ctx,
        `–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: ${ctx.wizard.state.walkData.time}\n–ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è? üìç\n\n` +
          "<i>–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>",
        {
          inline_keyboard: [
            [
              {
                text: "üü¢ –ì—É–ª—è—é –∑–¥–µ—Å—å (—Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ)",
                callback_data: "walk_here",
              },
            ],
            [{ text: "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å", callback_data: "enter_location_text" }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
          ],
        }
      );
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç
    else if (
      ctx.message &&
      ctx.message.text &&
      !ctx.wizard.state.waitingForLocationText &&
      !ctx.message.location
    ) {
      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        await updateWizardMessage(
          ctx,
          "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 59
      const minutes = parseInt(ctx.message.text, 10);
      if (isNaN(minutes) || minutes < 0 || minutes > 59) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        await updateWizardMessage(
          ctx,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç (0-59):",
          {
            inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]],
          }
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º
      const formattedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;
      ctx.wizard.state.walkData.minutes = formattedMinutes;
      ctx.wizard.state.walkData.time = `${ctx.wizard.state.walkData.hours}:${formattedMinutes}`;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }

      await updateWizardMessage(
        ctx,
        `–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: ${ctx.wizard.state.walkData.time}\n–ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è? üìç\n\n` +
          "<i>–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>",
        {
          inline_keyboard: [
            [
              {
                text: "üü¢ –ì—É–ª—è—é –∑–¥–µ—Å—å (—Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ)",
                callback_data: "walk_here",
              },
            ],
            [{ text: "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å", callback_data: "enter_location_text" }],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
          ],
        }
      );
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞
    else if (ctx.callbackQuery) {
      await ctx.answerCbQuery();

      if (
        ctx.callbackQuery.data === "walk_here" ||
        ctx.callbackQuery.data === "choose_map_walk"
      ) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã
        const isWalkHere = ctx.callbackQuery.data === "walk_here";
        const actionText = isWalkHere
          ? "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –í–Ω–∏–∑—É –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ üìç"
          : "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ. –í–Ω–∏–∑—É –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ üìç";

        const buttonText = isWalkHere
          ? "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
          : "üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ";

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        await updateWizardMessage(
          ctx,
          `${actionText}\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞`
        );

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const locMsg = await ctx.telegram.sendMessage(
          ctx.chat.id,
          "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ üëá",
          {
            reply_markup: {
              keyboard: [[{ text: buttonText, request_location: true }]],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );

        ctx.wizard.state.locationKeyboardMsgId = locMsg.message_id;

        if (isWalkHere) {
          ctx.wizard.state.waitingForWalkHere = true;
        } else {
          ctx.wizard.state.waitingForMapLocation = true;
        }
        return;
      } else if (ctx.callbackQuery.data === "enter_location_text") {
        await updateWizardMessage(ctx, "–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:", {
          inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]],
        });
        ctx.wizard.state.waitingForLocationText = true;
        return;
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    else if (ctx.message && ctx.message.location) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      ctx.wizard.state.walkData.location = {
        latitude: ctx.message.location.latitude,
        longitude: ctx.message.location.longitude,
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
      if (ctx.wizard.state.waitingForWalkHere) {
        ctx.wizard.state.walkData.locationDescription =
          "–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";
        ctx.wizard.state.waitingForWalkHere = false;
      } else if (ctx.wizard.state.waitingForMapLocation) {
        ctx.wizard.state.walkData.locationDescription = "–í—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ";
        ctx.wizard.state.waitingForMapLocation = false;
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:", error);
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      if (ctx.wizard.state.locationKeyboardMsgId) {
        try {
          await ctx.deleteMessage(ctx.wizard.state.locationKeyboardMsgId);
          delete ctx.wizard.state.locationKeyboardMsgId;
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:", error);
        }
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await updateWizardMessage(
        ctx,
        `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üìç\n` +
          "<b>–≠—Ç–æ –±—É–¥–µ—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Ç—Ä–∞–¥–∏—Ü–∏—è?</b> üîÑ\n\n" +
          "<i>–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Ç–∞–∫–∂–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –≤–∞—à —Å—á–µ—Ç—á–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ø–æ–º–æ–≥–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ!</i>\n" +
          "<i>–í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–≤–æ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</i>",
        {
          inline_keyboard: [
            [
              { text: "–†–∞–∑–æ–≤–∞—è üîπ", callback_data: "type_single" },
              { text: "–†–µ–≥—É–ª—è—Ä–Ω–∞—è üîÑ", callback_data: "type_regular" },
            ],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
          ],
        }
      );

      return ctx.wizard.next();
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞
    else if (
      ctx.message &&
      ctx.message.text &&
      ctx.wizard.state.waitingForLocationText
    ) {
      if (!isValidString(ctx.message.text)) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        await updateWizardMessage(
          ctx,
          "–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ 'null'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
          {
            inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]],
          }
        );
        return;
      }

      ctx.wizard.state.walkData.locationText = ctx.message.text;
      ctx.wizard.state.waitingForLocationText = false;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏
      await updateWizardMessage(
        ctx,
        "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n" +
          "<b>–≠—Ç–æ –±—É–¥–µ—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Ç—Ä–∞–¥–∏—Ü–∏—è?</b> üîÑ\n\n" +
          "<i>–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Ç–∞–∫–∂–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –≤–∞—à —Å—á–µ—Ç—á–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ø–æ–º–æ–≥–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ!</i>\n" +
          "<i>–í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–≤–æ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</i>",
        {
          inline_keyboard: [
            [
              { text: "–†–∞–∑–æ–≤–∞—è üîπ", callback_data: "type_single" },
              { text: "–†–µ–≥—É–ª—è—Ä–Ω–∞—è üîÑ", callback_data: "type_regular" },
            ],
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
          ],
        }
      );

      return ctx.wizard.next();
    }
  },

  // –®–∞–≥ 5: –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      await ctx.answerCbQuery();
      await updateWizardMessage(
        ctx,
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        getMainMenuKeyboard()
      );
      return ctx.scene.leave();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();

      if (ctx.callbackQuery.data === "type_single") {
        ctx.wizard.state.walkData.type = "single";
      } else if (ctx.callbackQuery.data === "type_regular") {
        ctx.wizard.state.walkData.type = "regular";
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ scene.state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    ctx.scene.state.walkData = { ...ctx.wizard.state.walkData };
    ctx.scene.state.userData = userData;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
    try {
      if (ctx.session && ctx.session.lastMessageId) {
        await ctx.deleteMessage(ctx.session.lastMessageId);
        delete ctx.session.lastMessageId;
      }
    } catch (error) {
      console.log(
        "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ:",
        error.message
      );
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ state
    ctx.wizard.state.messageIds = [];

    // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    try {
      const titleMsg = await ctx.reply("‚ú® <b>–î–ï–¢–ê–õ–ò –ü–†–û–ì–£–õ–ö–ò</b> ‚ú®", {
        parse_mode: "HTML",
      });
      ctx.wizard.state.messageIds.push(titleMsg.message_id);
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞:", error.message);
    }

    // –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    try {
      let previewText = `
üóìÔ∏è <b>–í—Å—Ç—Ä–µ—á–∞:</b>  ${ctx.wizard.state.walkData.date}, ${ctx.wizard.state.walkData.time}
üìç <b>–ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞:</b> ${ctx.wizard.state.walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
üîÑ <b>–§–æ—Ä–º–∞—Ç:</b> ${ctx.wizard.state.walkData.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
üëë <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</b> ${userData.name}
üêï <b>–ö–æ–º–ø–∞–Ω—å–æ–Ω:</b> ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
`;

      let previewMsg;
      if (userData.dog.photoId) {
        previewMsg = await ctx.replyWithPhoto(userData.dog.photoId, {
          caption: previewText,
          parse_mode: "HTML",
        });
      } else {
        previewMsg = await ctx.reply(previewText, {
          parse_mode: "HTML",
        });
      }
      ctx.wizard.state.messageIds.push(previewMsg.message_id);
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é:", error.message);
    }

    // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try {
      const buttonMsg = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
      ctx.wizard.state.messageIds.push(buttonMsg.message_id);

      // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ø–æ—á–∫–µ - –¥–ª—è updateWizardMessage
      if (!ctx.session) ctx.session = {};
      ctx.session.lastMessageId = buttonMsg.message_id;
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫:", error.message);
    }

    return ctx.wizard.next();
  },

  // –®–∞–≥ 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
  async (ctx) => {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ callback
    if (!ctx.callbackQuery) return;

    const action = ctx.callbackQuery.data;
    await ctx.answerCbQuery();

    if (action === "publish_walk") {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ scene.state
        const walkData = ctx.scene.state.walkData;
        const userData = ctx.scene.state.userData;

        // –ß–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try {
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (
            ctx.wizard.state.messageIds &&
            ctx.wizard.state.messageIds.length > 0
          ) {
            for (const msgId of ctx.wizard.state.messageIds) {
              try {
                await ctx.deleteMessage(msgId);
              } catch (error) {
                console.log(
                  `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId}:`,
                  error.message
                );
              }
            }
          }
        } catch (error) {
          console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error.message);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const statusMsg = await ctx.reply("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≥—É–ª–∫–∏...");

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—É–ª–∫—É –≤ –ë–î
        const walkRef = await db.collection("walks").add({
          date: walkData.date,
          time: walkData.time,
          locationText: walkData.locationText || null,
          location: walkData.location || null,
          type: walkData.type,
          organizer: {
            id: ctx.from.id,
            name: userData.name,
            username: ctx.from.username || null,
          },
          dog: {
            name: userData.dog.name,
            breed: userData.dog.breed,
            size: userData.dog.size,
            age: userData.dog.age,
            photoId: userData.dog.photoId,
          },
          participants: [],
          createdAt: new Date(),
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try {
          console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
          await notifyNearbyUsers(walkRef.id, userData, walkData);

          console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º");
          const sentCount = await notifyPreviousParticipantsFromProfiles(
            ctx.from.id,
            walkRef.id,
            walkData
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
          try {
            await ctx.deleteMessage(statusMsg.message_id);
          } catch (error) {
            console.log(
              "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
              error.message
            );
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if (sentCount > 0) {
            await ctx.reply(
              "‚úÖ <b>üéâ –ü–†–û–ì–£–õ–ö–ê –°–û–ó–î–ê–ù–ê! üéâ</b>\n\n" +
                `üîî –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ ${sentCount} –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏`,
              {
                parse_mode: "HTML",
                reply_markup: getMainMenuKeyboard(),
              }
            );
          } else {
            await ctx.reply("‚úÖ –ü—Ä–æ–≥—É–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", {
              reply_markup: getMainMenuKeyboard(),
            });
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
          // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏
          await ctx.reply(
            "‚úÖ –ü—Ä–æ–≥—É–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            getMainMenuKeyboard()
          );
        }

        return ctx.scene.leave();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }
    } else if (action === "cancel_walk") {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      try {
        if (
          ctx.wizard.state.messageIds &&
          ctx.wizard.state.messageIds.length > 0
        ) {
          for (const msgId of ctx.wizard.state.messageIds) {
            try {
              await ctx.deleteMessage(msgId);
            } catch (error) {
              console.log(
                `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId}:`,
                error.message
              );
            }
          }
        }
      } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error.message);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  }
);

// –°—Ü–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const editProfileMenuScene = new Scenes.BaseScene("editProfileMenu");

editProfileMenuScene.enter(async (ctx) => {
  const menuText = "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?";
  const keyboard = {
    inline_keyboard: [
      [
        { text: "üìù –ò–º—è", callback_data: "edit_name" },
        { text: "üèô –ì–æ—Ä–æ–¥", callback_data: "edit_city" },
      ],
      [
        { text: "üêï –ò–º—è —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_name" },
        { text: "üê∂ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_breed" },
      ],
      [
        { text: "üìè –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_size" },
        { text: "üóì –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_age" },
      ],
      [{ text: "üì∏ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_photo" }],
      [{ text: "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
    ],
  };

  await updateWizardMessage(ctx, menuText, keyboard);
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
const editNameScene = new Scenes.WizardScene(
  "editName",
  // –®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
  async (ctx) => {
    try {
      const promptText = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:";

      // –ï—Å–ª–∏ –µ—Å—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
      if (ctx.session && ctx.session.lastMessageId) {
        try {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            ctx.session.lastMessageId,
            null,
            promptText,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
                ],
              },
            }
          );
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
          const msg = await ctx.reply(promptText, {
            reply_markup: {
              inline_keyboard: [
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
              ],
            },
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          ctx.session.lastMessageId = msg.message_id;
        }
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const msg = await ctx.reply(promptText, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
            ],
          },
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
        if (!ctx.session) ctx.session = {};
        ctx.session.lastMessageId = msg.message_id;
      }

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return ctx.scene.enter("editProfileMenu");
    }
  },

  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
  async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
      if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel_edit") {
        await ctx.answerCbQuery();
        return ctx.scene.enter("editProfileMenu");
      }

      if (!ctx.message || !ctx.message.text) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è –µ—â–µ —Ä–∞–∑
        if (ctx.session && ctx.session.lastMessageId) {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            ctx.session.lastMessageId,
            null,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º:",
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
                ],
              },
            }
          );
        } else {
          await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º:");
        }
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      const newName = ctx.message.text;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
      if (!isValidString(newName)) {
        if (ctx.session && ctx.session.lastMessageId) {
          await ctx.telegram.editMessageText(
            ctx.chat.id,
            ctx.session.lastMessageId,
            null,
            "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ 'null'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
                ],
              },
            }
          );
        } else {
          await ctx.reply(
            "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ 'null'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:"
          );
        }
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db.collection("users").doc(String(ctx.from.id)).update({
        name: newName,
      });

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–µ–º
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
      if (ctx.session && ctx.session.lastMessageId) {
        await ctx.telegram.editMessageText(
          ctx.chat.id,
          ctx.session.lastMessageId,
          null,
          "‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!",
          { reply_markup: { inline_keyboard: [] } }
        );
      } else {
        await ctx.reply("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!");
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setTimeout(() => {
        ctx.scene.enter("editProfileMenu");
      }, 1500);

      return;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return ctx.scene.enter("editProfileMenu");
    }
  }
);

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞

const editCityScene = new Scenes.WizardScene(
  "editCity",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
  (ctx) => {
    ctx.reply(
      `${ctx.from.first_name}, –ß—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.\n\n` +
        `üí° <b>–°–æ–≤–µ—Ç</b>: –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª–∏—Ç:\n` +
        `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—É–ª–∫–∞—Ö –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n` +
        `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä "–ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º"\n` +
        `‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±–∞—á—å–∏—Ö –¥—Ä—É–∑–µ–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ`,
      { parse_mode: "HTML" },
      Markup.inlineKeyboard([
        ...POPULAR_CITIES.map((city) => [
          { text: city, callback_data: `city_${city}` },
        ]),
        [
          {
            text: "üìç –ú–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            callback_data: "current_location",
          },
        ],
        [{ text: "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
      ])
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "current_location") {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
          await ctx.reply(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
            Markup.keyboard([
              [
                Markup.button.locationRequest(
                  "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                ),
              ],
            ]).resize()
          );
          ctx.wizard.state.waitingForCurrentLocation = true;
          return;
        } else if (data.startsWith("city_")) {
          const city = data.replace("city_", "");
          await db.collection("users").doc(String(ctx.from.id)).update({
            city: city,
            // –û—á–∏—â–∞–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥
            location: null,
          });

          await ctx.reply("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", {
            reply_markup: { remove_keyboard: true },
          });

          // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          await ctx.reply(
            "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DogMeet</b> üéÆ\n\n" + "–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?",
            {
              parse_mode: "HTML",
              reply_markup: getMainMenuKeyboard(),
            }
          );

          return ctx.scene.leave(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      else if (ctx.message && ctx.message.location) {
        let locationDescription = "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è";

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        if (ctx.wizard.state.waitingForCurrentLocation) {
          locationDescription = "–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";
          ctx.wizard.state.waitingForCurrentLocation = false;
        } else if (ctx.wizard.state.waitingForMapLocation) {
          locationDescription = "–í—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ";
          ctx.wizard.state.waitingForMapLocation = false;
        }

        await db
          .collection("users")
          .doc(String(ctx.from.id))
          .update({
            location: {
              latitude: ctx.message.location.latitude,
              longitude: ctx.message.location.longitude,
              description: locationDescription,
            },
            city: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
          });

        await ctx.reply("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", {
          reply_markup: { remove_keyboard: true },
        });

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
          reply_markup: getMainMenuKeyboard(),
        });

        return ctx.scene.leave(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: { remove_keyboard: true },
          });
          return ctx.scene.enter("editProfileMenu");
        }

        await db.collection("users").doc(String(ctx.from.id)).update({
          city: ctx.message.text,
          // –û—á–∏—â–∞–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥
          location: null,
        });

        await ctx.reply("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", {
          reply_markup: { remove_keyboard: true },
        });

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
          reply_markup: getMainMenuKeyboard(),
        });

        return ctx.scene.leave(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
        reply_markup: { remove_keyboard: true },
      });

      // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
        reply_markup: getMainMenuKeyboard(),
      });

      return ctx.scene.leave();
    }
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
const editDogNameScene = new Scenes.WizardScene(
  "editDogName",
  // –®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
  async (ctx) => {
    await updateWizardMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å–æ–±–∞–∫–∏:", {
      inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }]],
    });
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
  async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
      if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel_edit") {
        await ctx.answerCbQuery();
        return ctx.scene.enter("editProfileMenu");
      }

      if (!ctx.message || !ctx.message.text) {
        await updateWizardMessage(
          ctx,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±–∞–∫–∏ —Ç–µ–∫—Å—Ç–æ–º:",
          {
            inline_keyboard: [
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
            ],
          }
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      const newDogName = ctx.message.text;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
      if (!isValidString(newDogName)) {
        await updateWizardMessage(
          ctx,
          "–ò–º—è —Å–æ–±–∞–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ 'null'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:",
          {
            inline_keyboard: [
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
            ],
          }
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è "–º–∞—Ç—Ä–µ—à–∫–∏"
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Å–æ–±–∞–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await db.collection("users").doc(String(ctx.from.id)).update({
        "dog.name": newDogName,
      });

      // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
      await updateWizardMessage(ctx, "‚úÖ –ò–º—è —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!");

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
      setTimeout(() => {
        ctx.scene.enter("editProfileMenu");
      }, 1500);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      setTimeout(() => {
        ctx.scene.enter("editProfileMenu");
      }, 1500);
    }
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏
const editDogBreedScene = new Scenes.WizardScene(
  "editDogBreed",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –ø–æ—Ä–æ–¥—ã
  async (ctx) => {
    const keyboard = {
      inline_keyboard: POPULAR_BREEDS.map((breed) => [
        { text: breed, callback_data: `breed_${breed}` },
      ]).concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }]]),
    };

    await updateWizardMessage(
      ctx,
      "<b>–ö–∞–∫–æ–π –ø–æ—Ä–æ–¥—ã –≤–∞—à —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏–π –∫–æ–º–ø–∞–Ω—å–æ–Ω?</b> üß¨\n" +
        "<i>(–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)</i>",
      keyboard
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          return ctx.scene.enter("editProfileMenu");
        } else if (data.startsWith("breed_")) {
          const breed = data.replace("breed_", "");

          if (breed === "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)") {
            await updateWizardMessage(ctx, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏:", {
              inline_keyboard: [
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
              ],
            });
            ctx.wizard.state.waitingForCustomBreed = true;
            return;
          } else {
            await db.collection("users").doc(String(ctx.from.id)).update({
              "dog.breed": breed,
            });

            await updateWizardMessage(
              ctx,
              "‚úÖ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!"
            );
            setTimeout(() => {
              ctx.scene.enter("editProfileMenu");
            }, 1500);
            return;
          }
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–¥—ã
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          return ctx.scene.enter("editProfileMenu");
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        if (ctx.wizard.state.waitingForCustomBreed) {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.breed": ctx.message.text,
          });

          await updateWizardMessage(ctx, "‚úÖ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!");
        } else {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.breed": ctx.message.text,
          });

          await updateWizardMessage(ctx, "‚úÖ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!");
        }

        setTimeout(() => {
          ctx.scene.enter("editProfileMenu");
        }, 1500);
        return;
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      setTimeout(() => {
        ctx.scene.enter("editProfileMenu");
      }, 1500);
    }
  }
);
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏
const editDogSizeScene = new Scenes.WizardScene(
  "editDogSize",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
  async (ctx) => {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "üêæ –ú–∞–ª–µ–Ω—å–∫–∞—è (–¥–æ 10 –∫–≥)",
            callback_data: "size_small",
          },
        ],
        [
          {
            text: "üêï –°—Ä–µ–¥–Ω—è—è (10‚Äì25 –∫–≥)",
            callback_data: "size_medium",
          },
        ],
        [{ text: "üêï‚Äçü¶∫ –ö—Ä—É–ø–Ω–∞—è (25+ –∫–≥)", callback_data: "size_large" }],
      ],
    };

    await updateWizardMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏:", keyboard);
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          return ctx.scene.enter("editProfileMenu");
        } else if (
          data === "size_small" ||
          data === "size_medium" ||
          data === "size_large"
        ) {
          const size = data.replace("size_", "");

          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.size": size,
          });

          await updateWizardMessage(ctx, "‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          setTimeout(() => {
            ctx.scene.enter("editProfileMenu");
          }, 1500);
          return;
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      setTimeout(() => {
        ctx.scene.enter("editProfileMenu");
      }, 1500);
    }
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏
const editDogAgeScene = new Scenes.WizardScene(
  "editDogAge",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞
  async (ctx) => {
    const keyboard = {
      inline_keyboard: [
        [{ text: DOG_AGES.PUPPY.text, callback_data: "age_puppy" }],
        [{ text: DOG_AGES.YOUNG.text, callback_data: "age_young" }],
        [{ text: DOG_AGES.ADULT.text, callback_data: "age_adult" }],
        [{ text: DOG_AGES.SENIOR.text, callback_data: "age_senior" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
      ],
    };

    await updateWizardMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏:", keyboard);
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          return ctx.scene.enter("editProfileMenu");
        } else if (data.startsWith("age_")) {
          const age = data.replace("age_", "");

          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.age": age,
          });

          await updateWizardMessage(ctx, "‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          setTimeout(() => {
            ctx.scene.enter("editProfileMenu");
          }, 1500);
          return;
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      setTimeout(() => {
        ctx.scene.enter("editProfileMenu");
      }, 1500);
    }
  }
);
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏
const editDogPhotoScene = new Scenes.WizardScene(
  "editDogPhoto",
  // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ
  async (ctx) => {
    await updateWizardMessage(ctx, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏", {
      inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }]],
    });
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          return ctx.scene.enter("editProfileMenu");
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
      else if (ctx.message && ctx.message.photo) {
        const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ:", error);
        }

        await db.collection("users").doc(String(ctx.from.id)).update({
          "dog.photoId": photoId,
        });

        await updateWizardMessage(ctx, "‚úÖ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
        setTimeout(() => {
          ctx.scene.enter("editProfileMenu");
        }, 1500);
        return;
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          return ctx.scene.enter("editProfileMenu");
        } else {
          await updateWizardMessage(
            ctx,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
            {
              inline_keyboard: [
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
              ],
            }
          );
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      setTimeout(() => {
        ctx.scene.enter("editProfileMenu");
      }, 1500);
    }
  }
);

const editWalkMenuScene = new Scenes.BaseScene("editWalkMenu");

editWalkMenuScene.enter(async (ctx) => {
  try {
    console.log("–í—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏");

    // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
    if (!ctx.session) ctx.session = {};
    const walkId = ctx.session.editWalkId;

    console.log(`–ü–æ–ª—É—á–∏–ª–∏ ID –∏–∑ —Å–µ—Å—Å–∏–∏: ${walkId}`);

    if (!walkId) {
      console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏!");
      await updateWizardMessage(
        ctx,
        "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏",
        getMainMenuKeyboard()
      );
      return ctx.scene.leave();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å—Ü–µ–Ω–µ
    ctx.scene.state.walkId = walkId;

    await updateWizardMessage(ctx, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
      inline_keyboard: [
        [
          { text: "üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data: "edit_date_time" },
          { text: "üìç –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏", callback_data: "edit_location" },
        ],
        [{ text: "üîÑ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏", callback_data: "edit_type" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data: "cancel_edit" }],
      ],
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
    await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
    return ctx.scene.leave();
  }
});

const editWalkDateTimeScene = new Scenes.WizardScene(
  "editWalkDateTime",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –¥–∞—Ç—ã
  async (ctx) => {
    const initResult = await initWalkEditScene(ctx, "editWalkDateTime");
    if (!initResult.success) return ctx.scene.leave();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ctx.wizard.state.walkData = {};

    await updateWizardMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø—Ä–æ–≥—É–ª–∫–∏:", {
      inline_keyboard: [
        [
          { text: "–°–µ–≥–æ–¥–Ω—è", callback_data: "date_today" },
          { text: "–ó–∞–≤—Ç—Ä–∞", callback_data: "date_tomorrow" },
        ],
        [{ text: "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data: "date_custom" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
      ],
    });

    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
      if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
        await ctx.answerCbQuery();
        await updateWizardMessage(
          ctx,
          "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "date_today") {
          ctx.wizard.state.walkData.date = moment().format("DD.MM.YYYY");
        } else if (data === "date_tomorrow") {
          ctx.wizard.state.walkData.date = moment()
            .add(1, "days")
            .format("DD.MM.YYYY");
        } else if (data === "date_custom") {
          await updateWizardMessage(
            ctx,
            "<b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π?</b> üóìÔ∏è\n\n" +
              "<i>–°–æ–∑–¥–∞–≤–∞—è –ø—Ä–æ–≥—É–ª–∫–∏, –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ø–æ–≤—ã—à–∞–µ—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!</i>\n\n" +
              "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
            {
              inline_keyboard: [
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
              ],
            }
          );
          ctx.wizard.state.customDate = true;
          retur;
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
      else if (ctx.message && ctx.message.text) {
        if (ctx.wizard.state.customDate) {
          if (!isValidDate(ctx.message.text)) {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
              await ctx.deleteMessage(ctx.message.message_id);
            } catch (error) {
              console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            }

            await updateWizardMessage(
              ctx,
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
              {
                inline_keyboard: [
                  [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
                ],
              }
            );
            return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
          }

          ctx.wizard.state.walkData.date = ctx.message.text;
          ctx.wizard.state.customDate = false;

          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            await ctx.deleteMessage(ctx.message.message_id);
          } catch (error) {
            console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
          }
        }
      }

      // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
      if (ctx.wizard.state.walkData.date) {
        await updateWizardMessage(ctx, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π —á–∞—Å –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏:", {
          inline_keyboard: [
            ...["6", "7", "8", "9", "10", "11", "12"].map((h) => [
              { text: h, callback_data: `hour_${h}` },
            ]),
            ...["13", "14", "15", "16", "17", "18"].map((h) => [
              { text: h, callback_data: `hour_${h}` },
            ]),
            ...["19", "20", "21", "22", "23"].map((h) => [
              { text: h, callback_data: `hour_${h}` },
            ]),
            [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
          ],
        });
      }

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
      if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
        await ctx.answerCbQuery();
        await updateWizardMessage(
          ctx,
          "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
      if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith("hour_")) {
        const hour = ctx.callbackQuery.data.replace("hour_", "");
        await ctx.answerCbQuery();

        ctx.wizard.state.walkData.hour = hour;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∏–Ω—É—Ç
        await updateWizardMessage(
          ctx,
          `–í—ã–±—Ä–∞–Ω–æ: ${hour} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
          {
            inline_keyboard: [
              ...["00", "05", "10", "15"].map((m) => [
                { text: m, callback_data: `minute_${m}` },
              ]),
              ...["20", "25", "30", "35"].map((m) => [
                { text: m, callback_data: `minute_${m}` },
              ]),
              ...["40", "45", "50", "55"].map((m) => [
                { text: m, callback_data: `minute_${m}` },
              ]),
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
            ],
          }
        );
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å–∞
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          await updateWizardMessage(
            ctx,
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23
        const hours = parseInt(ctx.message.text, 10);
        if (isNaN(hours) || hours < 0 || hours > 23) {
          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            await ctx.deleteMessage(ctx.message.message_id);
          } catch (error) {
            console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
          }

          await updateWizardMessage(
            ctx,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ (0-23):",
            {
              inline_keyboard: [
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
              ],
            }
          );
          return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
        }

        ctx.wizard.state.walkData.hour = String(hours);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∏–Ω—É—Ç
        await updateWizardMessage(
          ctx,
          `–í—ã–±—Ä–∞–Ω–æ: ${hours} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
          {
            inline_keyboard: [
              ...["00", "05", "10", "15"].map((m) => [
                { text: m, callback_data: `minute_${m}` },
              ]),
              ...["20", "25", "30", "35"].map((m) => [
                { text: m, callback_data: `minute_${m}` },
              ]),
              ...["40", "45", "50", "55"].map((m) => [
                { text: m, callback_data: `minute_${m}` },
              ]),
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
            ],
          }
        );
      }

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 3 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 4: –í—ã–±–æ—Ä –º–∏–Ω—É—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
      if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
        await ctx.answerCbQuery();
        await updateWizardMessage(
          ctx,
          "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç
      if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith("minute_")) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω—É—Ç—ã
        const minute = ctx.callbackQuery.data.replace("minute_", "");
        await ctx.answerCbQuery();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
        const walkId = ctx.wizard.state.walkId;
        const newDate = ctx.wizard.state.walkData.date;
        const newTime = `${ctx.wizard.state.walkData.hour}:${minute}`;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const walkDoc = await db.collection("walks").doc(walkId).get();
        if (!walkDoc.exists) {
          await updateWizardMessage(
            ctx,
            "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        }

        const walkData = walkDoc.data();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.collection("walks").doc(walkId).update({
          date: newDate,
          time: newTime,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        if (walkData.participants && walkData.participants.length > 0) {
          const message = `
üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏:
üóì –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${newDate}, ${newTime}
üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
`;
          await notifyWalkParticipants(walkData.participants, message);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await updateWizardMessage(
          ctx,
          `‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: ${newDate}, ${newTime}`,
          getMainMenuKeyboard()
        );

        return ctx.scene.leave();
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          await updateWizardMessage(
            ctx,
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 59
        const minutes = parseInt(ctx.message.text, 10);
        if (isNaN(minutes) || minutes < 0 || minutes > 59) {
          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            await ctx.deleteMessage(ctx.message.message_id);
          } catch (error) {
            console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
          }

          await updateWizardMessage(
            ctx,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç (0-59):",
            {
              inline_keyboard: [
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
              ],
            }
          );
          return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º
        const formattedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
        const walkId = ctx.wizard.state.walkId;
        const newDate = ctx.wizard.state.walkData.date;
        const newTime = `${ctx.wizard.state.walkData.hour}:${formattedMinutes}`;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const walkDoc = await db.collection("walks").doc(walkId).get();
        if (!walkDoc.exists) {
          await updateWizardMessage(
            ctx,
            "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        }

        const walkData = walkDoc.data();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.collection("walks").doc(walkId).update({
          date: newDate,
          time: newTime,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        if (walkData.participants && walkData.participants.length > 0) {
          const message = `
üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏:
üóì –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${newDate}, ${newTime}
üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
`;
          await notifyWalkParticipants(walkData.participants, message);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await updateWizardMessage(
          ctx,
          `‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: ${newDate}, ${newTime}`,
          getMainMenuKeyboard()
        );

        return ctx.scene.leave();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 4 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:", error);
      await updateWizardMessage(
        ctx,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏",
        getMainMenuKeyboard()
      );
      return ctx.scene.leave();
    }
  }
);
const editWalkLocationScene = new Scenes.WizardScene(
  "editWalkLocation",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
  async (ctx) => {
    const initResult = await initWalkEditScene(ctx, "editWalkLocation");
    if (!initResult.success) return ctx.scene.leave();

    await updateWizardMessage(ctx, "üìç –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:", {
      inline_keyboard: [
        [
          {
            text: "üü¢ –ú–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            callback_data: "current_location_walk",
          },
        ],
        [{ text: "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data: "enter_location_text" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
      ],
    });

    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –í–≤–æ–¥ –º–µ—Å—Ç–∞
  async (ctx) => {
    try {
      const walkId = ctx.wizard.state.walkId;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel") {
          await updateWizardMessage(
            ctx,
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        } else if (data === "current_location_walk") {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
          await updateWizardMessage(
            ctx,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
          );

          // –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          const locMsg = await ctx.reply(
            "üìç –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:",
            {
              reply_markup: {
                keyboard: [
                  [
                    {
                      text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                      request_location: true,
                    },
                  ],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
              },
            }
          );

          ctx.wizard.state.locationKeyboardMsgId = locMsg.message_id;
          ctx.wizard.state.waitingForCurrentLocation = true;
          return;
        } else if (data === "choose_map_walk") {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∞–∫–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
          await updateWizardMessage(
            ctx,
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
          );

          // –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
          const mapMsg = await ctx.reply(
            "üìç –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ:",
            {
              reply_markup: {
                keyboard: [
                  [
                    {
                      text: "üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ",
                      request_location: true,
                    },
                  ],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
              },
            }
          );

          ctx.wizard.state.locationKeyboardMsgId = mapMsg.message_id;
          ctx.wizard.state.waitingForMapLocation = true;
          return;
        } else if (data === "enter_location_text") {
          await updateWizardMessage(ctx, "–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:", {
            inline_keyboard: [[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]],
          });
          ctx.wizard.state.waitingForLocationText = true;
          return;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      else if (ctx.message && ctx.message.location) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const walkDoc = await db.collection("walks").doc(walkId).get();
        if (!walkDoc.exists) {
          await updateWizardMessage(
            ctx,
            "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        }

        const walkData = walkDoc.data();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
        let locationDescription = "–û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";

        if (ctx.wizard.state.waitingForCurrentLocation) {
          locationDescription = "–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞";
          ctx.wizard.state.waitingForCurrentLocation = false;
        } else if (ctx.wizard.state.waitingForMapLocation) {
          locationDescription = "–ú–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ";
          ctx.wizard.state.waitingForMapLocation = false;
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:", error);
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if (ctx.wizard.state.locationKeyboardMsgId) {
          try {
            await ctx.deleteMessage(ctx.wizard.state.locationKeyboardMsgId);
            delete ctx.wizard.state.locationKeyboardMsgId;
          } catch (error) {
            console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π:", error);
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db
          .collection("walks")
          .doc(walkId)
          .update({
            location: {
              latitude: ctx.message.location.latitude,
              longitude: ctx.message.location.longitude,
              description: locationDescription,
            },
            locationText: null,
          });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        if (walkData.participants && walkData.participants.length > 0) {
          const message = `
üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:
üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
üìç –ú–µ—Å—Ç–æ: ${locationDescription} (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∏)
`;
          await notifyWalkParticipants(walkData.participants, message);
        }

        await updateWizardMessage(
          ctx,
          "‚úÖ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞
      else if (
        ctx.message &&
        ctx.message.text &&
        ctx.wizard.state.waitingForLocationText
      ) {
        if (!isValidString(ctx.message.text)) {
          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          try {
            await ctx.deleteMessage(ctx.message.message_id);
          } catch (error) {
            console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
          }

          await updateWizardMessage(
            ctx,
            "–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ 'null'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            {
              inline_keyboard: [
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
              ],
            }
          );
          return;
        }

        const newLocation = ctx.message.text;

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const walkDoc = await db.collection("walks").doc(walkId).get();
        if (!walkDoc.exists) {
          await updateWizardMessage(
            ctx,
            "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        }

        const walkData = walkDoc.data();

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.collection("walks").doc(walkId).update({
          locationText: newLocation,
          location: null,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        if (walkData.participants && walkData.participants.length > 0) {
          const message = `
üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:
üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
üìç –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ: ${newLocation}
`;
          await notifyWalkParticipants(walkData.participants, message);
        }

        await updateWizardMessage(
          ctx,
          "‚úÖ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      else if (ctx.message && ctx.message.text) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          await updateWizardMessage(
            ctx,
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–ª–∏ –µ–≥–æ, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é
          await updateWizardMessage(
            ctx,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            {
              inline_keyboard: [
                [
                  {
                    text: "üü¢ –ú–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                    callback_data: "current_location_walk",
                  },
                ],
                [
                  {
                    text: "üìç –í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
                    callback_data: "choose_map_walk",
                  },
                ],
                [
                  {
                    text: "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º",
                    callback_data: "enter_location_text",
                  },
                ],
                [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
              ],
            }
          );
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  }
);

const editWalkTypeScene = new Scenes.WizardScene(
  "editWalkType",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞
  async (ctx) => {
    const initResult = await initWalkEditScene(ctx, "editWalkType");
    if (!initResult.success) return ctx.scene.leave();

    await updateWizardMessage(
      ctx,
      "<b>–≠—Ç–æ –±—É–¥–µ—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Ç—Ä–∞–¥–∏—Ü–∏—è?</b> üîÑ\n" +
        "<i>–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–∞–Ω–∏–µ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –æ—Å–æ–±—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!</i>\n\n" +
        "<i>–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Ç–∞–∫–∂–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –≤–∞—à —Å—á–µ—Ç—á–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ø–æ–º–æ–≥–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ!</i>\n" +
        "<i>–í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–π—Ç–∏ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø—Ä–æ–≥—É–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–≤–æ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</i>",
      {
        inline_keyboard: [
          [
            { text: "–†–∞–∑–æ–≤–∞—è üîπ", callback_data: "type_single" },
            { text: "–†–µ–≥—É–ª—è—Ä–Ω–∞—è üîÑ", callback_data: "type_regular" },
          ],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ],
      }
    );

    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel") {
          await updateWizardMessage(
            ctx,
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        } else if (data === "type_single" || data === "type_regular") {
          const walkId = ctx.wizard.state.walkId;
          const newType = data === "type_single" ? "single" : "regular";
          const typeText = data === "type_single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è";

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ
          const walkDoc = await db.collection("walks").doc(walkId).get();
          if (!walkDoc.exists) {
            await updateWizardMessage(
              ctx,
              "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
              getMainMenuKeyboard()
            );
            return ctx.scene.leave();
          }

          const walkData = walkDoc.data();

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏
          await db.collection("walks").doc(walkId).update({
            type: newType,
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
          if (walkData.participants && walkData.participants.length > 0) {
            const message = `
üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏:
üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
üîÑ –ù–æ–≤—ã–π —Ç–∏–ø: ${typeText}
`;
            await notifyWalkParticipants(walkData.participants, message);
          }

          await updateWizardMessage(
            ctx,
            `‚úÖ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${typeText}"`,
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      else if (ctx.message && ctx.message.text) {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await ctx.deleteMessage(ctx.message.message_id);
        } catch (error) {
          console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        }

        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          await updateWizardMessage(
            ctx,
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        } else {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
          const walkId = ctx.wizard.state.walkId;
          const newType = ctx.message.text.toLowerCase().includes("—Ä–∞–∑–æ–≤")
            ? "single"
            : "regular";
          const typeText = newType === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è";

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ
          const walkDoc = await db.collection("walks").doc(walkId).get();
          if (!walkDoc.exists) {
            await updateWizardMessage(
              ctx,
              "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
              getMainMenuKeyboard()
            );
            return ctx.scene.leave();
          }

          const walkData = walkDoc.data();

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏
          await db.collection("walks").doc(walkId).update({
            type: newType,
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
          if (walkData.participants && walkData.participants.length > 0) {
            const message = `
üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏:
üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
üîÑ –ù–æ–≤—ã–π —Ç–∏–ø: ${typeText}
`;
            await notifyWalkParticipants(walkData.participants, message);
          }

          await updateWizardMessage(
            ctx,
            `‚úÖ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${typeText}"`,
            getMainMenuKeyboard()
          );
          return ctx.scene.leave();
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞:", error);
      await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  }
);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω
const stage = new Scenes.Stage([
  registerScene,
  createWalkScene,
  editProfileMenuScene,
  editNameScene,
  editCityScene,
  editDogNameScene,
  editDogBreedScene,
  editDogSizeScene,
  editDogAgeScene,
  editDogPhotoScene,
  editWalkMenuScene,
  editWalkDateTimeScene,
  editWalkLocationScene,
  editWalkTypeScene,
]);

bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
  if (ctx.session && ctx.session.justRestarted) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    delete ctx.session.justRestarted;
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

  if (userDoc.exists) {
    ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userDoc.data().name || ctx.from.first_name}! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ DogMeet üê∂`,
      { reply_markup: getMainMenuKeyboard() }
    );
  } else {
    const name = ctx.from.first_name || "–≥–æ—Å—Ç—å";
    ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>DogMeet</b> ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Å–æ–±–∞–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç –¥—Ä—É–∑–µ–π, –∞ —Ö–æ–∑—è–µ–≤–∞ ‚Äî –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!  üê∂.\n` +
        "üîç <b>–ù–∞—Ö–æ–¥–∏—Ç–µ</b> —Å–æ–±–∞—á—å–∏—Ö –¥—Ä—É–∑–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n\n" +
        "üóìÔ∏è <b>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ</b> —è—Ä–∫–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ–¥–Ω–∏–º –≤–∑–º–∞—Ö–æ–º –ª–∞–ø—ã\n" +
        "üëã <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å</b> –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ª—é–±–∏—Ç–µ–ª–µ–π —Å–æ–±–∞–∫\n" +
        "üèÜ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ</b> —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∑–≤–∞–Ω–∏—è\n\n",
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [Markup.button.callback("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "create_profile")],
          ],
        },
      }
    );
  }
});

bot.command("info", async (ctx) => {
  await ctx.reply(
    "üê∂ <b>DogMeet - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å —Å–æ–±–∞–∫–æ–π!</b>\n\n" +
      "–° DogMeet –≤—ã –º–æ–∂–µ—Ç–µ:\n" +
      "‚Ä¢ üìç <b>–ù–∞—Ö–æ–¥–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ —Ä—è–¥–æ–º</b> - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ\n" +
      "‚Ä¢ üóì <b>–°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</b> - –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏\n" +
      "‚Ä¢ üë• <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</b> - –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n" +
      "‚Ä¢ üîî <b>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –±—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –Ω–æ–≤—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n" +
      "‚Ä¢ üë§ <b>–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–µ–º</b> - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–π —Å–æ–±–∞–∫–µ\n\n" +
      "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏!",
    { parse_mode: "HTML", reply_markup: getMainMenuKeyboard() }
  );
});

bot.command("help", async (ctx) => {
  await ctx.reply(
    "üÜò <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å DogMeet?</b>\n\n" +
      "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ:\n\n" +
      "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: <a href='https://t.me/anmalay'>@anmalay</a>\n" +
      "‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ: /info\n" +
      "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: /start\n\n" +
      "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å DogMeet —É–¥–æ–±–Ω–µ–µ –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏! üêï",
    {
      parse_mode: "HTML",
      reply_markup: getMainMenuKeyboard(),
      disable_web_page_preview: true,
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bot.hears("üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É", (ctx) => {
  ctx.reply("<b>–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π —Å–µ–≥–æ–¥–Ω—è?</b> üîç", {
    reply_markup: getWalkFiltersKeyboard(),
  });
});

bot.hears("üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", (ctx) => {
  ctx.scene.enter("createWalk");
});

bot.hears("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
  try {
    await showProfile(ctx);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      { reply_markup: getPersistentKeyboard() }
    );
  }
});

bot.hears("‚ùì –ü–æ–º–æ—â—å", async (ctx) => {
  await ctx.reply(
    "üÜò <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å DogMeet?</b>\n\n" +
      "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ:\n\n" +
      "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: <a href='https://t.me/anmalay'>@anmalay</a>\n" +
      "‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ: /info\n" +
      "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: /start\n\n" +
      "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å DogMeet —É–¥–æ–±–Ω–µ–µ –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏! üêï",
    { parse_mode: "HTML", disable_web_page_preview: true }
  );
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action("create_profile", (ctx) => {
  ctx.scene.enter("register");
});

bot.action("ranks_info", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    const ranksInfoText = `
    üèÜ <b>–°–∏—Å—Ç–µ–º–∞ –∑–≤–∞–Ω–∏–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</b> üèÜ
    
    –ß—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–∞–Ω–∏—è –∏ –æ—Ç–º–µ—Ç–∫–∏ –≤ DogMeet, –≤–∞–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ <b>—Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–∫–∞—Ö</b>!
    
    <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
    - –ó–≤–∞–Ω–∏—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—Ç—Å—è –∑–∞ <b>–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏</b> ‚Äî —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Å—Ç–æ—è–ª–∏—Å—å
    - –ü—Ä–æ–≥—É–ª–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –Ω–µ–π –Ω–µ –ø–æ–≤—ã—à–∞—é—Ç —Ä–∞–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    - –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞
    
    <b>–®–∫–∞–ª–∞ –∑–≤–∞–Ω–∏–π:</b>
    - üêæ –•–≤–æ—Å—Ç–∏–∫ ‚Äî –Ω–æ–≤–∏—á–æ–∫
    - üêï –ù–æ–≤–∏—á–æ–∫ –≤ —Å—Ç–∞–µ ‚Äî 1 –ø—Ä–æ–≥—É–ª–∫–∞
    - üêï –í–µ—Ä–Ω—ã–π –¥—Ä—É–≥ ‚Äî 5 –ø—Ä–æ–≥—É–ª–æ–∫
    - üêï –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä–∫–æ–≤ ‚Äî 10 –ø—Ä–æ–≥—É–ª–æ–∫
    - üêï –í–µ—Ä–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ ‚Äî 20 –ø—Ä–æ–≥—É–ª–æ–∫
    - üêï –û–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–ø—ã—Ç ‚Äî 35 –ø—Ä–æ–≥—É–ª–æ–∫
    - üêï –ë—Ä–æ–¥—è–≥–∞ —Å–æ —Å—Ç–∞–∂–µ–º ‚Äî 50 –ø—Ä–æ–≥—É–ª–æ–∫
    - üêï –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–≥—É–ª–æ–∫ ‚Äî 80 –ø—Ä–æ–≥—É–ª–æ–∫
    - üêï –ê–õ–¨–§–ê —Å–∞–º–µ—Ü ‚Äî 120 –ø—Ä–æ–≥—É–ª–æ–∫
    - üêï –õ–µ–≥–µ–Ω–¥–∞ DogMeet ‚Äî 200+ –ø—Ä–æ–≥—É–ª–æ–∫
    
    <b>–û—Ç–º–µ—Ç–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:</b>
    - üåü ‚Äî 1‚Äì9 –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫
    - üåüüåü ‚Äî 10‚Äì49 –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫
    - üåüüåüüåü ‚Äî 50‚Äì99 –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫
    - üëë ‚Äî 100+ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ (–í—ã—Å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞!)
    
    <b>–ó–∞—á–µ–º —ç—Ç–æ –≤—Å—ë?</b> üéÅ
    
    DogMeet ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é. –ú—ã –≥–æ—Ç–æ–≤–∏–º –¥–ª—è —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã</b>:
    
    üí• <b>–°–∫–∏–¥–∫–∏</b> –≤ –∑–æ–æ–º–∞–≥–∞–∑–∏–Ω–∞—Ö –∏ –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∞—Ö  
    üéì <b>–ü–æ–¥–∞—Ä–∫–∏</b> –æ—Ç —à–∫–æ–ª –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∏  
    üõçÔ∏è <b>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ DogMeet  
    
    –ß–µ–º –≤—ã—à–µ –≤–∞—à —Ä–∞–Ω–≥ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ.  
    –£—á–∞—Å—Ç–≤—É–π—Ç–µ, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–π—Ç–µ, –ø—Ä–æ–∫–∞—á–∏–≤–∞–π—Ç–µ –∑–≤–∞–Ω–∏—è –∏ –±—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º–∏, –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ–Ω—É—Å–∞–º!
    
    –ë—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ ‚Äî —Ç–∞–∫ –≤—ã –±—ã—Å—Ç—Ä–µ–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–æ–≤—ã–µ –∑–≤–∞–Ω–∏—è –∏ —É–≤–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!
    `;

    // –í–º–µ—Å—Ç–æ updateWizardMessage –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try {
      await ctx.editMessageText(ranksInfoText, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
            [{ text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
          ],
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(ranksInfoText, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
            [{ text: "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
          ],
        },
      });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–∞–Ω–∏—è—Ö:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ],
      },
    });
  }
});

bot.action(/show_more_nearby_(.+)_(.+)_(\d+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();

    const latitude = parseFloat(ctx.match[1]);
    const longitude = parseFloat(ctx.match[2]);
    const offset = parseInt(ctx.match[3]);

    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ –≤ —Å–µ—Å—Å–∏–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    if (!ctx.session || !ctx.session.nearbyWalks) {
      const statusMsg = await ctx.reply(
        "–ò—â–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞—à–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–µ–π..."
      );
      await findNearbyWalksUnified(
        ctx,
        latitude,
        longitude,
        statusMsg.message_id
      );
      return;
    }

    const nearbyWalks = ctx.session.nearbyWalks;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 5 –ø—Ä–æ–≥—É–ª–æ–∫
    const walksToShow = nearbyWalks.slice(offset, offset + 5);

    if (walksToShow.length === 0) {
      await ctx.reply("–ë–æ–ª—å—à–µ –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }

    for (const walk of walksToShow) {
      const distanceText =
        walk.distance < 1
          ? `${Math.round(walk.distance * 1000)} –º`
          : `${walk.distance.toFixed(1)} –∫–º`;

      const ownLabel = walk.isOwn ? "üåü –ú–û–Ø –ü–†–û–ì–£–õ–ö–ê\n" : "";

      const organizerBadge =
        walk.organizer.achievements &&
        walk.organizer.achievements.organizerBadge
          ? ` ${walk.organizer.achievements.organizerBadge}`
          : "";

      const walkPreview = `${ownLabel}üïí ${walk.date}, ${walk.time}
üìç ${locationWithDistance}
üêï –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants ? walk.participants.length + 1 : 1}
üë§ ${walk.dog.name} (${walk.organizer.name}${organizerBadge}) ${getDogAgeText(walk.dog.age)}${userRankDisplay}
${walk.organizer.username ? "@" + walk.organizer.username : ""}`.trim();

      await ctx.reply(walkPreview, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data: `walk_details_${walk.id}` }],
          ],
        },
      });
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø—Ä–æ–≥—É–ª–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    const newOffset = offset + 5;
    if (newOffset < nearbyWalks.length) {
      await ctx.reply(
        `–ü–æ–∫–∞–∑–∞–Ω–æ ${newOffset} –∏–∑ ${nearbyWalks.length} –ø—Ä–æ–≥—É–ª–æ–∫`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ",
                  callback_data: `show_more_nearby_${latitude}_${longitude}_${newOffset}`,
                },
              ],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
            ],
          },
        }
      );
    } else {
      await ctx.reply("–ë–æ–ª—å—à–µ –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–µ—Ç:", {
        reply_markup: {
          inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
        },
      });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
});

bot.action("show_all_badges", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    if (!userDoc.exists) return;

    const userData = userDoc.data();
    if (
      !userData.achievements ||
      !userData.achievements.badges ||
      userData.achievements.badges.length === 0
    ) {
      await updateWizardMessage(
        ctx,
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–∞–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö!",
        {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
          ],
        }
      );
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–µ–π–¥–∂–∏ –ø–æ –¥–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
    const sortedBadges = [...userData.achievements.badges].sort((a, b) => {
      return new Date(b.earnedAt) - new Date(a.earnedAt);
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
    let message = "üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b> üèÜ\n\n";

    sortedBadges.forEach((badge, index) => {
      const date = new Date(badge.earnedAt).toLocaleDateString();
      message += `${index + 1}. <b>${badge.name}</b> (${date})\n   ${badge.description}\n\n`;
    });

    await updateWizardMessage(ctx, message, {
      parse_mode: "HTML",
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
      ],
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.");
  }
});

bot.action("show_rating", async (ctx) => {
  await ctx.answerCbQuery();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersSnapshot = await db.collection("users").get();

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
    const participants = [];
    const organizers = [];

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    usersSnapshot.forEach((doc) => {
      const userData = doc.data();

      if (userData.achievements) {
        if (userData.achievements.walkCount > 0) {
          participants.push({
            name: userData.name,
            username: userData.username,
            rank: userData.achievements.userRank,
            count: userData.achievements.walkCount,
          });
        }

        if (userData.achievements.organizedCount > 0) {
          organizers.push({
            name: userData.name,
            username: userData.username,
            rank: userData.achievements.organizerBadge || "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
            count: userData.achievements.organizedCount,
          });
        }
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–≥—É–ª–æ–∫
    participants.sort((a, b) => b.count - a.count);
    organizers.sort((a, b) => b.count - a.count);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø-10
    const topParticipants = participants.slice(0, 10);
    const topOrganizers = organizers.slice(0, 10);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –º–µ—Å—Ç–∞
    const getPlaceEmoji = (index) => {
      switch (index) {
        case 0:
          return "ü•á "; // –ó–æ–ª–æ—Ç–∞—è –º–µ–¥–∞–ª—å –¥–ª—è 1 –º–µ—Å—Ç–∞
        case 1:
          return "ü•à "; // –°–µ—Ä–µ–±—Ä—è–Ω–∞—è –º–µ–¥–∞–ª—å –¥–ª—è 2 –º–µ—Å—Ç–∞
        case 2:
          return "ü•â "; // –ë—Ä–æ–Ω–∑–æ–≤–∞—è –º–µ–¥–∞–ª—å –¥–ª—è 3 –º–µ—Å—Ç–∞
        default:
          return `${index + 1}. `;
      }
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π DogMeet</b>\n\n";

    message += "<b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫:</b>\n";
    if (topParticipants.length > 0) {
      topParticipants.forEach((p, index) => {
        const usernameDisplay = p.username ? ` (@${p.username})` : "";
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
        const placePrefix = getPlaceEmoji(index);
        message += `${placePrefix}${p.name}${usernameDisplay} - ${p.rank} (${p.count} –ø—Ä–æ–≥—É–ª–æ–∫)\n`;
      });
    } else {
      message += "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø—Ä–æ–≥—É–ª–∫–∞–º–∏.\n";
    }

    message += "\n<b>–¢–æ–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫:</b>\n";
    if (topOrganizers.length > 0) {
      topOrganizers.forEach((o, index) => {
        const usernameDisplay = o.username ? ` (@${o.username})` : "";
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
        const placePrefix = getPlaceEmoji(index);
        message += `${placePrefix}${o.name}${usernameDisplay} - ${o.rank} (${o.count} –ø—Ä–æ–≥—É–ª–æ–∫)\n`;
      });
    } else {
      message += "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫.\n";
    }

    await updateWizardMessage(ctx, message, {
      parse_mode: "HTML",
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
      ],
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:", error);
    await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞", {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
      ],
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
bot.action("back_to_city_selection", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:",
    Markup.inlineKeyboard([
      ...POPULAR_CITIES.map((city) => [
        { text: city, callback_data: `city_${city}` },
      ]),
      [
        {
          text:
            "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n" +
            "<i>(–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–µ—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)</i>",
          callback_data: "send_location_reg",
        },
      ],
    ])
  );
});

// –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ –∫–æ–Ω—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("cancel_walk", async (ctx) => {
  try {
    await ctx.answerCbQuery("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ");

    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    try {
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
    }

    await ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {
      reply_markup: getMainMenuKeyboard(),
    });

    return ctx.scene.leave();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
    return ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "find_walk" },
        { text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" },
      ],
      [
        { text: "üìã –ú–æ–∏ –ø—Ä–æ–≥—É–ª–∫–∏", callback_data: "my_walks" },
        { text: "üë• –ì–¥–µ —è —É—á–∞—Å—Ç–≤—É—é", callback_data: "my_participations" },
      ],
      [
        { text: "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" },
        { text: "üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data: "show_rating" },
      ],
    ],
  };
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getPersistentKeyboard() {
  return {
    resize_keyboard: true,
    persistent: true,
    keyboard: [
      [{ text: "üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É" }, { text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É" }],
      [{ text: "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" }, { text: "‚ùì –ü–æ–º–æ—â—å" }],
    ],
  };
}

// –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫
function getWalkFiltersKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üîπ –ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º", callback_data: "walks_nearby" }],
      [
        { text: "üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data: "walks_today" },
        { text: "üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data: "walks_tomorrow" },
        { text: "üìÖ –í—Å–µ –¥–∞—Ç—ã", callback_data: "walks_all_dates" },
      ],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
    ],
  };
}

bot.action("my_profile", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
    const messageId =
      ctx.callbackQuery && ctx.callbackQuery.message
        ? ctx.callbackQuery.message.message_id
        : ctx.session
          ? ctx.session.lastMessageId
          : null;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (messageId) {
      try {
        await ctx.deleteMessage(messageId);
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", error);
      }
    }

    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

    if (!userDoc.exists) {
      return await ctx.reply(
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üêæ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "create_profile" }],
            ],
          },
        }
      );
    }

    const userData = userDoc.data();
    const achievements = userData.achievements || {
      walkCount: 0,
      organizedCount: 0,
      userRank: "–•–≤–æ—Å—Ç–∏–∫",
      organizerBadge: "",
      badges: [],
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    let specialStatusText = "";
    if (achievements.specialStatus && achievements.specialStatus.title) {
      const expiryDate = achievements.specialStatus.expiresAt
        ? new Date(achievements.specialStatus.expiresAt)
        : null;
      if (expiryDate && expiryDate > new Date()) {
        specialStatusText = `\n‚ú® <b>–û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å:</b> ${achievements.specialStatus.title} (–¥–æ ${moment(expiryDate).format("DD.MM")})`;
      } else {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        db.collection("users").doc(String(ctx.from.id)).update({
          "achievements.specialStatus.title": null,
          "achievements.specialStatus.expiresAt": null,
        });
      }
    }

    let badgesText = "";
    if (achievements.badges && achievements.badges.length > 0) {
      const latestBadges = achievements.badges.slice(-3); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–Ω–∞—á–∫–∞
      badgesText = "\nüèÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n";
      latestBadges.forEach((badge) => {
        badgesText += `‚Ä¢ <i>${badge.name}</i> - ${badge.description}\n`;
      });
    }

    const orgBadge = achievements.organizerBadge
      ? ` ${achievements.organizerBadge}`
      : "";

    const nextRankInfo = getNextRankInfo(achievements.walkCount);
    const progressText = `üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> ${achievements.walkCount}/${nextRankInfo.threshold} –ø—Ä–æ–≥—É–ª–æ–∫ –¥–æ –∑–≤–∞–Ω–∏—è "${nextRankInfo.rank}"`;

    const profileText = `
      üêï <b>–ö–ê–†–¢–û–ß–ö–ê –°–û–ë–ê–ö–û–í–û–î–ê</b> üêï
      
      üë§ <b>${userData.name}</b>${orgBadge} ${userData.username ? "@" + userData.username : ""}
      üìä <b>–ó–≤–∞–Ω–∏–µ:</b> ${achievements.userRank}
      ü¶¥ <b>–ü—Ä–æ–≥—É–ª–æ–∫:</b> ${achievements.walkCount} (–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ: ${achievements.organizedCount})${specialStatusText}
      ${progressText}
      üìç <b>–ì–æ—Ä–æ–¥:</b> ${userData.city}
      üêï <b>–°–æ–±–∞–∫–∞:</b> ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
      ${badgesText}
          `;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            callback_data: "edit_profile_menu",
          },
          {
            text: "üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
            callback_data: "show_all_badges",
          },
        ],
        [
          {
            text: "‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∑–≤–∞–Ω–∏—è",
            callback_data: "ranks_info",
          },
        ],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
      ],
    };

    // –ï—Å–ª–∏ —É —Å–æ–±–∞–∫–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
    if (userData.dog && userData.dog.photoId) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
      const photoMsg = await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: profileText,
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: keyboard.inline_keyboard },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!ctx.session) ctx.session = {};
      ctx.session.lastMessageId = photoMsg.message_id;
    } else {
      // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const msg = await ctx.reply(profileText, {
        parse_mode: "HTML",
        reply_markup: keyboard,
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      ctx.session.lastMessageId = msg.message_id;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
});

bot.action("back_to_main_menu", async (ctx) => {
  await ctx.answerCbQuery();
  const menuText =
    "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DogMeet</b> üéÆ\n\n" + "–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?";
  await updateWizardMessage(ctx, menuText, getMainMenuKeyboard());
});
// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
bot.action("edit_profile_menu", async (ctx) => {
  await ctx.answerCbQuery();

  // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏ —Ü–∏—Ñ—Ä
  const menuText = "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?";

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üìù –ò–º—è", callback_data: "edit_name" },
        { text: "üèô –ì–æ—Ä–æ–¥", callback_data: "edit_city" },
      ],
      [
        { text: "üêï –ò–º—è —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_name" },
        { text: "üê∂ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_breed" },
      ],
      [
        { text: "üìè –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_size" },
        { text: "üóì –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_age" },
      ],
      [{ text: "üì∏ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_photo" }],
      [{ text: "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
    ],
  };

  // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  try {
    await ctx.editMessageText(menuText, {
      reply_markup: keyboard,
    });
  } catch (error) {
    // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error.message);
    await ctx.reply(menuText, {
      reply_markup: keyboard,
    });
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ
bot.action("search_in_my_city", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

    if (!userDoc.exists || !userDoc.data().city) {
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        {
          reply_markup: {
            inline_keyboard: [
              ...POPULAR_CITIES.map((city) => [
                { text: city, callback_data: `search_city_${city}` },
              ]),
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
            ],
          },
        }
      );
      return;
    }

    const city = userDoc.data().city;
    await findWalksInCity(ctx, city);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
bot.action("update_user_location", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    await ctx.reply(
      "–ß—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:\n\n" +
        "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.",
      {
        reply_markup: {
          keyboard: [
            [
              {
                text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                request_location: true,
              },
            ],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    if (!ctx.session) ctx.session = {};
    ctx.session.waitingLocationForNearbyWalks = true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
bot.action("select_city_for_search", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫:", {
      reply_markup: {
        inline_keyboard: [
          ...POPULAR_CITIES.map((city) => [
            { text: city, callback_data: `search_city_${city}` },
          ]),
          [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data: "other_city_for_search" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
        ],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
bot.action("other_city_for_search", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫:");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    if (!ctx.session) ctx.session = {};
    ctx.session.waitingForCityInput = true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–æ—Ä–æ–¥–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
bot.action(/search_city_(.+)/, async (ctx) => {
  try {
    const city = ctx.match[1];
    await ctx.answerCbQuery();

    // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    await findWalksInCity(ctx, city);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
});

bot.action(/pagination_(\d+)_(.+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    const page = parseInt(ctx.match[1]);
    const returnCommand = ctx.match[2];

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    if (!ctx.session || !ctx.session.lastWalks) {
      return await ctx.reply("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.", {
        reply_markup: getMainMenuKeyboard(),
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await showWalksWithPagination(
      ctx,
      ctx.session.lastWalks,
      page,
      returnCommand
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
bot.action("invite_friends", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const inviteText =
      `üê∂ –ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é DogMeet –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–∏ —Å —Å–æ–±–∞–∫–æ–π.\n\n` +
      `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è, —á—Ç–æ–±—ã:\n` +
      `‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ —Ä—è–¥–æ–º\n` +
      `‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n` +
      `‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º —Å–æ–±–∞—á–Ω–∏–∫–∞–º\n\n` +
      `–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ @DogMeetBot –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!`;

    await ctx.reply(
      "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏—Ö –≤ DogMeet:",
      {
        reply_markup: getMainMenuKeyboard(),
      }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    await ctx.reply(inviteText);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞)
bot.on("text", async (ctx) => {
  try {
    // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if (ctx.session && ctx.session.waitingForCityInput) {
      const city = ctx.message.text.trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
      if (!isValidString(city)) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:");
        return;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
      ctx.session.waitingForCityInput = false;

      // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
      await findWalksInCity(ctx, city);
    }
    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–≥—É—Ç –±—ã—Ç—å –∑–¥–µ—Å—å
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫
bot.action("walks_nearby", async (ctx) => {
  await ctx.answerCbQuery();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

    if (!userDoc.exists) {
      await ctx.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "create_profile" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
          ],
        },
      });
      return;
    }

    const userData = userDoc.data();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    if (
      userData.location &&
      userData.location.latitude &&
      userData.location.longitude
    ) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      const statusMsg = await ctx.reply(
        "–ò—â–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞—à–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–µ–π..."
      );
      await findNearbyWalksUnified(
        ctx,
        userData.location.latitude,
        userData.location.longitude,
        statusMsg.message_id
      );
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥
    else if (userData.city) {
      await ctx.reply(
        `–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –Ω–æ –µ—Å—Ç—å –≥–æ—Ä–æ–¥ (${userData.city}).\n\n` +
          `üí° <b>–°–æ–≤–µ—Ç</b>: –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –∏–º–µ–Ω–Ω–æ —Ä—è–¥–æ–º —Å –≤–∞–º–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç:\n` +
          `‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–µ—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n` +
          `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—É–ª–∫–∞—Ö –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n` +
          `‚Ä¢ –í–∏–¥–µ—Ç—å —Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏\n\n` +
          `–ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                  callback_data: "update_user_location",
                },
              ],
              [
                {
                  text: "üèô –ò—Å–∫–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ",
                  callback_data: "search_in_my_city",
                },
              ],
            ],
          },
        }
      );
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –Ω–∏ –≥–æ—Ä–æ–¥–∞
    else {
      await ctx.reply(
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n–ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                  callback_data: "send_location_for_search",
                },
              ],
              [
                {
                  text: "üèô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥",
                  callback_data: "select_city_for_search",
                },
              ],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
            ],
          },
        }
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—É–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è
bot.action("walks_today", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    const today = moment().format("DD.MM.YYYY");
    const walksSnapshot = await db
      .collection("walks")
      .where("date", "==", today)
      .get();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await showWalksWithPagination(ctx, walksSnapshot.docs, 0, "find_walk");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—É–ª–æ–∫:", error);
    await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫.", {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—É–ª–æ–∫ –∑–∞–≤—Ç—Ä–∞
bot.action("walks_tomorrow", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    const tomorrow = moment().add(1, "days").format("DD.MM.YYYY");
    const walksSnapshot = await db
      .collection("walks")
      .where("date", "==", tomorrow)
      .get();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await showWalksWithPagination(ctx, walksSnapshot.docs, 0, "find_walk");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—É–ª–æ–∫:", error);
    await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫.", {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø—Ä–æ–≥—É–ª–æ–∫
bot.action("walks_all_dates", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    const walksSnapshot = await db.collection("walks").get();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await showWalksWithPagination(ctx, walksSnapshot.docs, 0, "find_walk");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—É–ª–æ–∫:", error);
    await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫.", {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—É–ª–∫–∏
bot.action(/walk_details_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    await ctx.answerCbQuery();

    const walkDoc = await db.collection("walks").doc(walkId).get();

    if (!walkDoc.exists) {
      return await updateWizardMessage(
        ctx,
        "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        {
          inline_keyboard: [
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "return_to_walks" }],
          ],
        }
      );
    }

    const walk = walkDoc.data();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    let locationInfo = "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    if (walk.locationText) {
      locationInfo = walk.locationText;
    } else if (walk.location) {
      locationInfo = walk.location.description || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ
    let walkDetails =
      "‚ú® <b>–î–ï–¢–ê–õ–ò –ü–†–û–ì–£–õ–ö–ò</b> ‚ú®\n\n" +
      `
üóì –ü—Ä–æ–≥—É–ª–∫–∞: ${walk.date}, ${walk.time}  
üìç –ú–µ—Å—Ç–æ: ${locationInfo}  
üîÑ –¢–∏–ø: ${walk.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}  
üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${walk.organizer.name} ${walk.organizer.username ? "@" + walk.organizer.username : ""}  
üêï –°–æ–±–∞–∫–∞: ${walk.dog.name}, ${walk.dog.breed}, ${getDogSizeText(walk.dog.size)}, ${getDogAgeText(walk.dog.age)}  
`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (walk.participants && walk.participants.length > 0) {
      walkDetails += "\nüë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å:\n";
      for (const participant of walk.participants) {
        walkDetails += `- ${participant.name} —Å ${participant.dogName}\n`;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
    const isOrganizer = walk.organizer.id == ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const isParticipant =
      walk.participants && walk.participants.some((p) => p.id == ctx.from.id);

    // –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const keyboard = [];

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
    if (walk.location && walk.location.latitude && walk.location.longitude) {
      keyboard.push([
        {
          text: "üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
          url: `https://maps.google.com/maps?q=${walk.location.latitude},${walk.location.longitude}`,
        },
      ]);
    }

    if (isOrganizer) {
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      keyboard.push([
        {
          text: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚úèÔ∏è",
          callback_data: `edit_walk_${walkId}`,
        },
        {
          text: "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚ùå",
          callback_data: `cancel_walk_${walkId}`,
        },
      ]);
    } else {
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (!isParticipant) {
        keyboard.push([
          { text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚úÖ", callback_data: `join_walk_${walkId}` },
        ]);
      } else {
        keyboard.push([
          {
            text: "–ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚ùå",
            callback_data: `leave_walk_${walkId}`,
          },
        ]);
      }
      keyboard.push([
        {
          text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º üì©",
          callback_data: `contact_organizer_${walkId}`,
        },
      ]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
    keyboard.push([
      { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data: "return_to_walks" },
    ]);

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    if (ctx.session && ctx.session.photoMessageId) {
      try {
        await ctx.deleteMessage(ctx.session.photoMessageId);
        delete ctx.session.photoMessageId;
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ:", error);
      }
    }

    // –ï—Å–ª–∏ —É —Å–æ–±–∞–∫–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ
    if (walk.dog.photoId) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
      const photoMsg = await ctx.replyWithPhoto(walk.dog.photoId, {
        caption: walkDetails,
        parse_mode: "HTML",
        reply_markup: { inline_keyboard: keyboard },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
      if (!ctx.session) ctx.session = {};
      ctx.session.lastMessageId = photoMsg.message_id;
      ctx.session.photoMessageId = photoMsg.message_id;
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await updateWizardMessage(ctx, walkDetails, {
        inline_keyboard: keyboard,
      });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await updateWizardMessage(
      ctx,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
      {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ],
      }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—É–ª–æ–∫
bot.action("return_to_walks", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    if (ctx.session && ctx.session.photoMessageId) {
      try {
        await ctx.deleteMessage(ctx.session.photoMessageId);
        delete ctx.session.photoMessageId;
      } catch (error) {
        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ:", error);
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—É–ª–æ–∫
    if (ctx.session && ctx.session.lastWalks) {
      const returnCommand =
        ctx.session.lastReturnCommand || "back_to_main_menu";
      await showWalksWithPagination(
        ctx,
        ctx.session.lastWalks,
        0,
        returnCommand
      );
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await updateWizardMessage(ctx, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", getMainMenuKeyboard());
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—É–ª–æ–∫:", error);
    await updateWizardMessage(
      ctx,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
      {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ],
      }
    );
  }
});
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—Ä–æ–≥—É–ª–∫–µ
bot.action(/join_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    const walkRef = db.collection("walks").doc(walkId);
    const walkDoc = await walkRef.get();

    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      await updateWizardMessage(ctx, "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "return_to_walks" }],
        ],
      });
      return;
    }

    const walk = walkDoc.data();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if (
      walk.participants &&
      walk.participants.some((p) => p.id === ctx.from.id)
    ) {
      await ctx.answerCbQuery("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–µ!");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const newParticipant = {
      id: ctx.from.id,
      name: userData.name,
      username: ctx.from.username || null,
      dogName: userData.dog.name,
      dogBreed: userData.dog.breed,
      dogSize: userData.dog.size,
      dogAge: userData.dog.age,
      dogPhotoId: userData.dog.photoId,
    };

    const participants = walk.participants || [];
    await walkRef.update({
      participants: [...participants, newParticipant],
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    await db
      .collection("users")
      .doc(String(walk.organizer.id))
      .update({
        "walkHistory.participants": admin.firestore.FieldValue.arrayUnion(
          String(ctx.from.id)
        ),
        "walkHistory.lastUpdated": new Date(),
      });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    await ctx.answerCbQuery("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ!");

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    await updateWizardMessage(
      ctx,
      "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
      {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data: "return_to_walks" }],
          [{ text: "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ],
      }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    try {
      const notificationText = `
üì¢ <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≤–∞—à–µ–π –ø—Ä–æ–≥—É–ª–∫–µ!</b>
üë§ ${userData.name}
üêï ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
üì© –ö–æ–Ω—Ç–∞–∫—Ç: ${ctx.from.username ? "@" + ctx.from.username : "–ù–µ—Ç username"}
`;

      // –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–≥—É–ª–æ–∫
      if (userData.dog && userData.dog.photoId) {
        await bot.telegram.sendPhoto(walk.organizer.id, userData.dog.photoId, {
          caption: notificationText,
          parse_mode: "HTML",
          reply_markup: getMainMenuKeyboard(),
        });
      } else {
        await bot.telegram.sendMessage(walk.organizer.id, notificationText, {
          parse_mode: "HTML",
          reply_markup: getMainMenuKeyboard(),
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É:", error);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ø—Ä–æ–≥—É–ª–∫–µ:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    await updateWizardMessage(
      ctx,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
      {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ],
      }
    );
  }
});
// –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—É–ª–∫—É
bot.action(/leave_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    const walkRef = db.collection("walks").doc(walkId);
    const walkDoc = await walkRef.get();

    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      await updateWizardMessage(ctx, "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "return_to_walks" }],
        ],
      });
      return;
    }

    const walk = walkDoc.data();

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const updatedParticipants = walk.participants.filter(
      (p) => p.id !== ctx.from.id
    );

    await walkRef.update({
      participants: updatedParticipants,
    });

    await ctx.answerCbQuery("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É.");

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    await updateWizardMessage(ctx, "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É.", {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data: "return_to_walks" }],
        [{ text: "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
      ],
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    try {
      await bot.telegram.sendMessage(
        walk.organizer.id,
        `–£—á–∞—Å—Ç–Ω–∏–∫ ${ctx.from.username ? "@" + ctx.from.username : ctx.from.id} –ø–æ–∫–∏–Ω—É–ª –≤–∞—à—É –ø—Ä–æ–≥—É–ª–∫—É.`
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É:", error);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    await updateWizardMessage(
      ctx,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
      {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ],
      }
    );
  }
});

// –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
bot.action(/cancel_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    const walkRef = db.collection("walks").doc(walkId);
    const walkDoc = await walkRef.get();

    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        reply_markup: getMainMenuKeyboard(),
      });
      return;
    }

    const walk = walkDoc.data();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
    if (walk.organizer.id !== ctx.from.id) {
      await ctx.answerCbQuery("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫—É.");
      return;
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
    if (walk.participants && walk.participants.length > 0) {
      const message = `
  ‚ùå –ü–†–û–ì–£–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê!
  –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ–≥—É–ª–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏:
  üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walk.date}, ${walk.time}
  üìç –ú–µ—Å—Ç–æ: ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${walk.organizer.name}
  üêï –°–æ–±–∞–∫–∞: ${walk.dog.name}, ${walk.dog.breed}
  `;
      await notifyWalkParticipants(walk.participants, message);
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—É–ª–∫—É
    await walkRef.delete();

    await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply(
      "–ü—Ä–æ–≥—É–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
      { reply_markup: getMainMenuKeyboard() }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–≥—É–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –ö–æ–Ω—Ç–∞–∫—Ç —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
bot.action(/contact_organizer_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    const walkDoc = await db.collection("walks").doc(walkId).get();

    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        reply_markup: getMainMenuKeyboard(),
      });
      return;
    }

    const walk = walkDoc.data();
    await ctx.answerCbQuery();

    if (walk.organizer.username) {
      await ctx.reply(
        `–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: @${walk.organizer.username}`,
        { reply_markup: getMainMenuKeyboard() }
      );
    } else {
      await ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ—Ç username –≤ Telegram", {
        reply_markup: getMainMenuKeyboard(),
      });

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      try {
        await bot.telegram.sendMessage(
          walk.organizer.id,
          `–£—á–∞—Å—Ç–Ω–∏–∫ ${ctx.from.username ? "@" + ctx.from.username : ctx.from.id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–≥—É–ª–∫–∏ ${walk.date}, ${walk.time}.`,
          { reply_markup: getMainMenuKeyboard() }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É:", error);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

bot.action(/edit_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    console.log(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Å ID: ${walkId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
    const walkDoc = await db.collection("walks").doc(walkId).get();
    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!ctx.session) ctx.session = {};
    ctx.session.editWalkId = walkId;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (ctx.callbackQuery && ctx.callbackQuery.message) {
      ctx.session.lastMessageId = ctx.callbackQuery.message.message_id;
    }

    console.log(`–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID ${walkId} –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await ctx.answerCbQuery();

    // –í—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
    return ctx.scene.enter("editWalkMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
bot.action("edit_profile", (ctx) => {
  ctx.answerCbQuery();
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–ò–º—è", "edit_name")],
      [Markup.button.callback("–ì–æ—Ä–æ–¥", "edit_city")],
      [Markup.button.callback("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–∞–∫–µ", "edit_dog")],
      [Markup.button.callback("–ù–∞–∑–∞–¥", "back_to_profile")],
    ])
  );
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å
bot.action("back_to_profile", (ctx) => {
  ctx.answerCbQuery();
  ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", { reply_markup: getMainMenuKeyboard() });
});

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
cron.schedule("* * * * *", remindAboutWalks);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action("find_walk", async (ctx) => {
  await ctx.answerCbQuery();
  await updateWizardMessage(
    ctx,
    "<b>–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π —Å–µ–≥–æ–¥–Ω—è?</b> üîç",
    getWalkFiltersKeyboard()
  );
});

bot.action("create_walk", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã
    if (!ctx.session) ctx.session = {};

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if (ctx.callbackQuery && ctx.callbackQuery.message) {
      ctx.session.lastMessageId = ctx.callbackQuery.message.message_id;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
      await ctx.editMessageText(
        "<b>–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π?</b> üóìÔ∏è\n\n" +
          "<i>–°–æ–∑–¥–∞–≤–∞—è –ø—Ä–æ–≥—É–ª–∫–∏, –≤—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –ø–æ–≤—ã—à–∞–µ—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å!</i>",
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                { text: "–°–µ–≥–æ–¥–Ω—è", callback_data: "date_today" },
                { text: "–ó–∞–≤—Ç—Ä–∞", callback_data: "date_tomorrow" },
              ],
              [{ text: "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data: "date_custom" }],
              [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
            ],
          },
        }
      );

      // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏, –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
      return ctx.scene.enter("createWalk", { skipFirstStep: true });
    } else {
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É
      return ctx.scene.enter("createWalk");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –≤—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    return ctx.scene.enter("createWalk");
  }
});

bot.action("edit_name", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("editName");
});

bot.action("edit_city", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("editCity");
});

bot.action("edit_dog_name", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("editDogName");
});

bot.action("edit_dog_breed", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("editDogBreed");
});

bot.action("edit_dog_size", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("editDogSize");
});

bot.action("edit_dog_age", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("editDogAge");
});

bot.action("edit_dog_photo", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("editDogPhoto");
});

bot.action("my_walks", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const walksSnapshot = await db
      .collection("walks")
      .where("organizer.id", "==", ctx.from.id)
      .get();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await showWalksWithPagination(
      ctx,
      walksSnapshot.docs,
      0,
      "back_to_main_menu"
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—É–ª–æ–∫:", error);
    await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫.", {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main_menu" }],
      ],
    });
  }
});

bot.action("my_participations", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
    const walksSnapshot = await db.collection("walks").get();
    const participatingWalks = [];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    for (const walkDoc of walksSnapshot.docs) {
      const walk = walkDoc.data();

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
      if (
        walk.organizer.id == ctx.from.id ||
        (walk.participants &&
          walk.participants.some((p) => p.id == ctx.from.id))
      ) {
        participatingWalks.push(walkDoc);
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await showWalksWithPagination(
      ctx,
      participatingWalks,
      0,
      "back_to_main_menu"
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–≥—É–ª–æ–∫:", error);
    await updateWizardMessage(ctx, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫.", {
      inline_keyboard: [
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main_menu" }],
      ],
    });
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
bot.action("dismiss_notification", async (ctx) => {
  try {
    await ctx.answerCbQuery("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ");

    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø—Ü–∏—è–º–∏
    await ctx.reply("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –º–µ–Ω—é:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "find_walk" }],
          [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
        ],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("type_single", async (ctx) => {
  await ctx.answerCbQuery();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏
    if (!ctx.wizard.state.walkData) {
      ctx.wizard.state.walkData = {};
    }
    ctx.wizard.state.walkData.type = "single";

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    let previewText = `
  üóìÔ∏è <b>–í—Å—Ç—Ä–µ—á–∞:</b> ${ctx.wizard.state.walkData.date}, ${ctx.wizard.state.walkData.time}
 üìç <b>–ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞:</b> ${ctx.wizard.state.walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üîÑ <b>–§–æ—Ä–º–∞—Ç:</b>  –†–∞–∑–æ–≤–∞—è
 üëë <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</b> ${userData.name}
üêï <b>–ö–æ–º–ø–∞–Ω—å–æ–Ω:</b> ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
  `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    if (userData.dog.photoId) {
      await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: previewText,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });

      // –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await ctx.reply("‚ú® <b>–ê–ù–û–ù–° –ü–†–û–ì–£–õ–ö–ò</b> ‚ú®", Markup.removeKeyboard());
    } else {
      await ctx.reply(previewText, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    }

    return ctx.wizard.next();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
    return ctx.scene.leave();
  }
});

bot.action("type_regular", async (ctx) => {
  await ctx.answerCbQuery();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏
    if (!ctx.wizard.state.walkData) {
      ctx.wizard.state.walkData = {};
    }
    ctx.wizard.state.walkData.type = "regular";

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    let previewText = `
  üóìÔ∏è <b>–í—Å—Ç—Ä–µ—á–∞:</b>  ${ctx.wizard.state.walkData.date}, ${ctx.wizard.state.walkData.time}
  üìç <b>–ú–µ—Å—Ç–æ —Å–±–æ—Ä–∞:</b> ${ctx.wizard.state.walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üîÑ <b>–§–æ—Ä–º–∞—Ç:</b> –†–µ–≥—É–ª—è—Ä–Ω–∞—è
  üëë <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</b> ${userData.name}
  üêï <b>–ö–æ–º–ø–∞–Ω—å–æ–Ω:</b> ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
  `;

    // –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await ctx.reply("‚ú® <b>–ê–ù–û–ù–° –ü–†–û–ì–£–õ–ö–ò</b> ‚ú®", Markup.removeKeyboard());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    if (userData.dog.photoId) {
      await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: previewText,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    } else {
      await ctx.reply(previewText, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    }

    return ctx.wizard.next();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
    return ctx.scene.leave();
  }
});

bot.action("edit_date_time", (ctx) => ctx.scene.enter("editWalkDateTime"));
bot.action("edit_location", (ctx) => ctx.scene.enter("editWalkLocation"));
bot.action("edit_type", (ctx) => ctx.scene.enter("editWalkType"));
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ skip_photo
bot.action("skip_photo", async (ctx) => {
  await ctx.answerCbQuery();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ctx.wizard –∏ ctx.wizard.state
  if (!ctx.wizard || !ctx.wizard.state || !ctx.wizard.state.userData) {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "create_profile" }],
        ],
      },
    });
    return;
  }

  const userData = ctx.wizard.state.userData;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const achievements = {
    walkCount: 0,
    organizedCount: 0,
    participantRank: "–•–≤–æ—Å—Ç–∏–∫",
    organizerRank: "–ú–æ–∫—Ä—ã–π –Ω–æ—Å",
    badges: [],
    specialStatus: {
      title: null,
      expiresAt: null,
    },
    lastUpdated: new Date(),
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ñ–æ—Ç–æ
  const user = {
    id: ctx.from.id,
    username: ctx.from.username || null, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null, –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    name: userData.name,
    city: userData.city,
    location: userData.location || null,
    dog: {
      name: userData.dogName,
      breed: userData.dogBreed,
      size: userData.dogSize,
      age: userData.dogAge,
      photoId: null,
    },
    // –ó–∞–º–µ–Ω—è–µ–º walkHistory –Ω–∞ achievements
    achievements: achievements,
    createdAt: new Date(),
  };

  try {
    await db.collection("users").doc(String(ctx.from.id)).set(user);
    ctx.reply(
      "<b>üéâ –£–†–ê! –ü–†–û–§–ò–õ–¨ –°–û–ó–î–ê–ù! üéâ</b> \n\n" +
        'üèÜ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–≤–∞–Ω–∏–µ "<b>–•–≤–æ—Å—Ç–∏–∫</b>"!\n\n' +
        "üêæ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n" +
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–µ—Å–µ–ª—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏\n" +
        "- –ò—Å–∫–∞—Ç—å –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ \n" +
        "- –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å\n\n" +
        "<i>–ì–æ—Ç–æ–≤—ã –∫ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ? –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</i>",
      { reply_markup: getMainMenuKeyboard() }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }

  return ctx.scene.leave();
});
bot.action(/breed_(.+)/, (ctx) => {
  const breed = ctx.match[1];
  if (breed === "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)") {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏:", Markup.removeKeyboard());
    ctx.wizard.state.waitingForCustomBreed = true;
  } else {
    ctx.wizard.state.userData.dogBreed = breed;
    ctx.reply(
      "<b>–†–∞–∑–º–µ—Ä –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!</b> üìè \n\n" +
        "–ü–æ–¥–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:",
      Markup.inlineKeyboard([
        [
          {
            text: "üêæ –ú–∞–ª–µ–Ω—å–∫–∞—è (–¥–æ 10 –∫–≥)",
            callback_data: "size_small",
          },
        ],
        [
          {
            text: "üêï –°—Ä–µ–¥–Ω—è—è (10‚Äì25 –∫–≥)",
            callback_data: "size_medium",
          },
        ],
        [{ text: "üêï‚Äçü¶∫ –ö—Ä—É–ø–Ω–∞—è (25+ –∫–≥)", callback_data: "size_large" }],
      ])
    );
    return ctx.wizard.next();
  }
});

bot.action(/city_(.+)/, async (ctx) => {
  await db
    .collection("users")
    .doc(String(ctx.from.id))
    .update({ city: ctx.match[1] });
  await ctx.reply("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", {
    reply_markup: getMainMenuKeyboard(),
  });
  return ctx.scene.enter("editProfileMenu");
});
bot.action("send_location_reg", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await ctx.reply(
      `üê∂ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±–∞—á—å–∏ –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.
  
  <i>–ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º:</i>
  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É Telegram –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  - –í–∫–ª—é—á–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  - –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ Telegram
  
  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã:`,
      {
        parse_mode: "HTML",
        reply_markup: Markup.keyboard([
          [Markup.button.locationRequest("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")],
        ]).resize(),
      }
    );

    // –í —Å—Ü–µ–Ω–µ —ç—Ç–æ—Ç —Ñ–ª–∞–≥ —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –∏ –∑–¥–µ—Å—å
    if (ctx.wizard && ctx.wizard.state) {
      ctx.wizard.state.waitingForLocationReg = true;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–∑–∂–µ.",
      Markup.inlineKeyboard([
        ...POPULAR_CITIES.map((city) => [
          { text: city, callback_data: `city_${city}` },
        ]),
        [{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_to_city_selection" }],
      ])
    );
  }
});

bot.action("publish_walk", async (ctx) => {
  try {
    console.log("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–∏ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)");

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ scene.state
    const walkData = ctx.scene.state.walkData;
    const userData = ctx.scene.state.userData;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!walkData || !userData) {
      throw new Error("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—É–ª–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
    }

    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try {
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await publishWalk(ctx, walkData, userData);

    return ctx.scene.leave();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      { reply_markup: getMainMenuKeyboard() }
    );
    return ctx.scene.leave();
  }
});

bot.action("walk_here", async (ctx) => {
  await requestLocation(
    ctx,
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
    "üìç –ú–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
    "waitingForWalkHere"
  );
});

// –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
bot.action("current_location", async (ctx) => {
  await requestLocation(
    ctx,
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
    "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
    "waitingForCurrentLocation"
  );
});

bot.action("choose_map_location", async (ctx) => {
  await requestLocation(
    ctx,
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
    "üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ",
    "waitingForMapLocation"
  );
});

// –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("current_location_walk", async (ctx) => {
  await requestLocation(
    ctx,
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
    "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
    "waitingForCurrentLocation"
  );
});

bot.action("choose_map_walk", async (ctx) => {
  await requestLocation(
    ctx,
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
    "üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ",
    "waitingForMapLocation"
  );
});

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
bot.action(/view_location_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    await ctx.answerCbQuery("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É...");

    const walkDoc = await db.collection("walks").doc(walkId).get();
    if (!walkDoc.exists) {
      return;
    }

    const walk = walkDoc.data();
    if (!walk.location || !walk.location.latitude || !walk.location.longitude) {
      await ctx.reply(
        "–î–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."
      );
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
    await ctx.replyWithLocation(
      walk.location.latitude,
      walk.location.longitude
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
  }
});

bot.on("location", async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const location = ctx.message.location;
    console.log("–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:", location);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫
    if (ctx.session && ctx.session.waitingLocationForNearbyWalks) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
      ctx.session.waitingLocationForNearbyWalks = false;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const cityName = await getLocationCity(
          location.latitude,
          location.longitude
        ).catch((err) => {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", err);
          return "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
        });

        await db
          .collection("users")
          .doc(String(ctx.from.id))
          .update({
            location: {
              latitude: location.latitude,
              longitude: location.longitude,
              description: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫",
              updatedAt: admin.firestore.FieldValue.serverTimestamp(),
            },
            city: cityName || "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
          });

        console.log(
          `–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å:", error);
      }

      // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–∏—Å–∫–µ –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const statusMsg = await ctx.reply("–ò—â–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...", {
        reply_markup: { remove_keyboard: true },
      });

      // –ò—â–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      await findNearbyWalksUnified(
        ctx,
        location.latitude,
        location.longitude,
        statusMsg.message_id
      );
    }

    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–¥–µ—Å—å
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      {
        reply_markup: { remove_keyboard: true },
      }
    );
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–∑–∞–º–µ–Ω—è–µ—Ç 4 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞)
bot.action(/age_(.+)/, async (ctx) => {
  try {
    const age = ctx.match[1];
    await ctx.answerCbQuery();

    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.age": age,
    });

    await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});

// –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–∑–∞–º–µ–Ω—è–µ—Ç 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞)
bot.action(/size_(.+)/, async (ctx) => {
  try {
    const size = ctx.match[1];
    await ctx.answerCbQuery();

    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.size": size,
    });

    await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});

bot.action("cancel_edit", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editProfileMenu");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–µ–Ω—é
editProfileMenuScene.action("edit_name", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editName");
});

editProfileMenuScene.action("edit_city", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editCity");
});

editProfileMenuScene.action("edit_dog_name", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editDogName");
});

editProfileMenuScene.action("edit_dog_breed", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editDogBreed");
});

editProfileMenuScene.action("edit_dog_size", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editDogSize");
});

editProfileMenuScene.action("edit_dog_age", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editDogAge");
});

editProfileMenuScene.action("edit_dog_photo", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editDogPhoto");
});

editProfileMenuScene.action("my_profile", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();
    const achievements = userData.achievements || {
      walkCount: 0,
      organizedCount: 0,
      participantRank: "–•–≤–æ—Å—Ç–∏–∫",
      organizerRank: "–ú–æ–∫—Ä—ã–π –Ω–æ—Å",
      badges: [],
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    let specialStatusText = "";
    if (achievements.specialStatus && achievements.specialStatus.title) {
      const expiryDate = achievements.specialStatus.expiresAt
        ? new Date(achievements.specialStatus.expiresAt)
        : null;
      if (expiryDate && expiryDate > new Date()) {
        specialStatusText = `\nüåü –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å: ${achievements.specialStatus.title}`;
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    let badgesText = "";
    if (achievements.badges && achievements.badges.length > 0) {
      const latestBadges = achievements.badges.slice(-2); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∑–Ω–∞—á–∫–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
      badgesText = "\nüèÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ";
      latestBadges.forEach((badge, index) => {
        badgesText +=
          `${badge.name}` + (index < latestBadges.length - 1 ? ", " : "");
      });
    }

    const profileText = `
üêï <b>–ö–ê–†–¢–û–ß–ö–ê –°–û–ë–ê–ö–û–í–û–î–ê</b> üêï

üë§ <b>${userData.name}</b> ${userData.username ? "@" + userData.username : ""}
üìä <b>–ó–≤–∞–Ω–∏—è:</b>
   –£—á–∞—Å—Ç–Ω–∏–∫: ${achievements.userRank}
   –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${achievements.organizerBadge}
ü¶¥ –ü—Ä–æ–≥—É–ª–æ–∫: ${achievements.walkCount} (–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ: ${achievements.organizedCount})${specialStatusText}

üìç –ì–æ—Ä–æ–¥: ${userData.city}
üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
${badgesText}
    `;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            callback_data: "edit_profile_menu",
          },
          {
            text: "üèÜ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
            callback_data: "show_all_badges",
          },
        ],
        [
          {
            text: "‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∑–≤–∞–Ω–∏—è",
            callback_data: "ranks_info",
          },
        ],
        [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
      ],
    };

    await updateWizardMessage(ctx, profileText, keyboard);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    await updateWizardMessage(
      ctx,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
});

bot.action("send_location", (ctx) => {
  ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", Markup.removeKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
editWalkMenuScene.action("edit_date_time", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editWalkDateTime");
});

editWalkMenuScene.action("edit_location", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editWalkLocation");
});

editWalkMenuScene.action("edit_type", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editWalkType");
});

editWalkMenuScene.action("cancel_edit", async (ctx) => {
  await ctx.answerCbQuery();
  await updateWizardMessage(
    ctx,
    "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
    getMainMenuKeyboard()
  );
  return ctx.scene.leave();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞—Ç—ã —Å –ø—Ä—è–º—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
bot.action("date_today", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.wizard.state.walkData = { date: moment().format("DD.MM.YYYY") };

  // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
    Markup.inlineKeyboard(
      [
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "20",
        "21",
        "22",
        "23",
      ]
        .map((h) => [{ text: h, callback_data: `hour_${h}` }])
        .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
    )
  );

  ctx.wizard.state.timeSelection = TIME_SELECTION.HOURS;
  return ctx.wizard.next();
});

bot.action("date_tomorrow", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.wizard.state.walkData = {
    date: moment().add(1, "days").format("DD.MM.YYYY"),
  };

  // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
    Markup.inlineKeyboard(
      [
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "20",
        "21",
        "22",
        "23",
      ]
        .map((h) => [{ text: h, callback_data: `hour_${h}` }])
        .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
    )
  );

  ctx.wizard.state.timeSelection = TIME_SELECTION.HOURS;
  return ctx.wizard.next();
});
bot.action("date_custom", (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", Markup.removeKeyboard());
  ctx.wizard.state.walkData = {};
});
bot.action("cancel", (ctx) => {
  ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
    reply_markup: getMainMenuKeyboard(),
  });
  return ctx.scene.leave();
});
bot.action(/hour_(\d+)/, async (ctx) => {
  await ctx.answerCbQuery();
  ctx.wizard.state.walkData.hours = ctx.match[1];

  await ctx.reply(
    `–í—ã–±—Ä–∞–Ω–æ: ${ctx.wizard.state.walkData.hours} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
    Markup.inlineKeyboard(
      ["00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55"]
        .map((m) => [{ text: m, callback_data: `minute_${m}` }])
        .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
    )
  );

  ctx.wizard.state.timeSelection = TIME_SELECTION.MINUTES;
});

bot.action(/minute_(\d+)/, async (ctx) => {
  ctx.wizard.state.walkData.minutes = ctx.match[1];
  ctx.wizard.state.walkData.time = `${ctx.wizard.state.walkData.hours}:${ctx.wizard.state.walkData.minutes}`;
  ctx.reply(
    `–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: ${ctx.wizard.state.walkData.time}\n–ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è? üìç\n\n` +
      "<i>–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</i>",
    Markup.inlineKeyboard([
      [{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç", callback_data: "send_location" }],
      [{ text: "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data: "enter_location_text" }],
      [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
    ])
  );
  return ctx.wizard.next();
});

bot.command("start", async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

  if (userDoc.exists) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    const msg = await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userDoc.data().name || ctx.from.first_name}! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ DogMeet üê∂`,
      {
        reply_markup: getMainMenuKeyboard(),
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
    if (!ctx.session) ctx.session = {};
    ctx.session.lastMessageId = msg.message_id;
  } else {
    // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const name = ctx.from.first_name || "–≥–æ—Å—Ç—å";
    const msg = await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${name}! DogMeet –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å —Å–æ–±–∞–∫–æ–π üê∂.\n` +
        "üîπ –ù–∞—Ö–æ–¥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ —Ä—è–¥–æ–º.\n" +
        "üîπ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.\n" +
        "üîπ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
      {
        reply_markup: {
          inline_keyboard: [
            [Markup.button.callback("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "create_profile")],
          ],
        },
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!ctx.session) ctx.session = {};
    ctx.session.lastMessageId = msg.message_id;
  }
});

bot
  .launch()
  .then(async () => {
    BOT_START_TIME = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    console.log("–ë–æ—Ç DogMeet —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
    await migrateParticipantsHistory();
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
