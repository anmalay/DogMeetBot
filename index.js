// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
const { Telegraf, Scenes, session, Markup } = require("telegraf");
const { initializeApp, cert } = require("firebase-admin/app");
const { getFirestore } = require("firebase-admin/firestore");
const moment = require("moment");
const cron = require("node-cron");
require("dotenv").config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const serviceAccount = require("./serviceAccountKey.json");
initializeApp({
  credential: cert(serviceAccount),
});
const db = getFirestore();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// Middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
bot.use(session());

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫
const DOG_SIZES = {
  SMALL: { text: "–ú–∞–ª–µ–Ω—å–∫–∞—è üêæ (–¥–æ 10 –∫–≥)", value: "small" },
  MEDIUM: { text: "–°—Ä–µ–¥–Ω—è—è üêï (10‚Äì25 –∫–≥)", value: "medium" },
  LARGE: { text: "–ö—Ä—É–ø–Ω–∞—è üêï‚Äçü¶∫ (25+ –∫–≥)", value: "large" },
};

const DOG_AGES = {
  PUPPY: { text: "üçº –©–µ–Ω–æ–∫ (0‚Äì6 –º–µ—Å)", value: "puppy" },
  YOUNG: { text: "üêæ –ú–æ–ª–æ–¥–∞—è (6 –º–µ—Å ‚Äì 2 –≥–æ–¥–∞)", value: "young" },
  ADULT: { text: "üêï –í–∑—Ä–æ—Å–ª–∞—è (2‚Äì7 –ª–µ—Ç)", value: "adult" },
  SENIOR: { text: "ü¶¥ –°—Ç–∞—Ä—à–∞—è (7+ –ª–µ—Ç)", value: "senior" },
};

const TIME_SELECTION = {
  HOURS: "hours",
  MINUTES: "minutes",
};

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫
const POPULAR_BREEDS = [
  "–õ–∞–±—Ä–∞–¥–æ—Ä",
  "–ù–µ–º–µ—Ü–∫–∞—è –æ–≤—á–∞—Ä–∫–∞",
  "–•–∞—Å–∫–∏",
  "–î–∂–µ–∫ –†–∞—Å—Å–µ–ª",
  "–ô–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä",
  "–ß–∏—Ö—É–∞—Ö—É–∞",
  "–¢–∞–∫—Å–∞",
  "–î–≤–æ—Ä–Ω—è–∂–∫–∞",
  "–ö–æ—Ä–≥–∏",
  "–®–ø–∏—Ü",
  "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)",
];

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
const POPULAR_CITIES = [
  "–ú–æ—Å–∫–≤–∞",
  "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
  "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
  "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
  "–ö–∞–∑–∞–Ω—å",
];

// –°—Ü–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerScene = new Scenes.WizardScene(
  "register",
  // –®–∞–≥ 1: –í–≤–æ–¥ –∏–º–µ–Ω–∏
  (ctx) => {
    ctx.reply("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
  (ctx) => {
    ctx.wizard.state.userData = { name: ctx.message.text };
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç",
      Markup.keyboard([
        ...POPULAR_CITIES.map((city) => [city]),
        ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç"],
      ]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 3: –ò–º—è —Å–æ–±–∞–∫–∏
  (ctx) => {
    if (ctx.message.location) {
      // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
      ctx.wizard.state.userData.location = {
        latitude: ctx.message.location.latitude,
        longitude: ctx.message.location.longitude,
      };
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –ø–æ–º–æ—â—å—é –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      ctx.wizard.state.userData.city = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
    } else {
      // –í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
      ctx.wizard.state.userData.city = ctx.message.text;
    }
    ctx.reply("–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à—É —Å–æ–±–∞–∫—É?", Markup.removeKeyboard());
    return ctx.wizard.next();
  },
  // –®–∞–≥ 4: –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏
  (ctx) => {
    ctx.wizard.state.userData.dogName = ctx.message.text;
    const breedButtons = POPULAR_BREEDS.map((breed) => [breed]);
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É", Markup.keyboard(breedButtons).resize());
    return ctx.wizard.next();
  },
  // –®–∞–≥ 5: –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏
  (ctx) => {
    if (ctx.message.text === "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)") {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏:");
      ctx.wizard.state.waitingForCustomBreed = true;
      return;
    }

    if (ctx.wizard.state.waitingForCustomBreed) {
      ctx.wizard.state.waitingForCustomBreed = false;
      ctx.wizard.state.userData.dogBreed = ctx.message.text;
    } else {
      ctx.wizard.state.userData.dogBreed = ctx.message.text;
    }

    ctx.reply(
      "–ö–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—à–∞ —Å–æ–±–∞–∫–∞?",
      Markup.keyboard([
        [DOG_SIZES.SMALL.text],
        [DOG_SIZES.MEDIUM.text],
        [DOG_SIZES.LARGE.text],
      ]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 6: –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏
  (ctx) => {
    const size = Object.values(DOG_SIZES).find(
      (size) => size.text === ctx.message.text
    );
    ctx.wizard.state.userData.dogSize = size
      ? size.value
      : DOG_SIZES.MEDIUM.value;

    ctx.reply(
      "–í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏:",
      Markup.keyboard([
        [DOG_AGES.PUPPY.text],
        [DOG_AGES.YOUNG.text],
        [DOG_AGES.ADULT.text],
        [DOG_AGES.SENIOR.text],
      ]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 7: –§–æ—Ç–æ —Å–æ–±–∞–∫–∏
  async (ctx) => {
    const age = Object.values(DOG_AGES).find(
      (age) => age.text === ctx.message.text
    );
    ctx.wizard.state.userData.dogAge = age ? age.value : DOG_AGES.ADULT.value;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    ctx.reply(
      "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
      Markup.keyboard([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è"]]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 8: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async (ctx) => {
    const userData = ctx.wizard.state.userData;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (ctx.message.photo) {
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      userData.dogPhotoId = photoId;
    }
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –ª—é–±–æ–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    // –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ (userData.dogPhotoId –æ—Å—Ç–∞–Ω–µ—Ç—Å—è undefined)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const user = {
      id: ctx.from.id,
      username: ctx.from.username,
      name: userData.name,
      city: userData.city,
      location: userData.location || null,
      dog: {
        name: userData.dogName,
        breed: userData.dogBreed,
        size: userData.dogSize,
        age: userData.dogAge,
        photoId: userData.dogPhotoId || null,
      },
      createdAt: new Date(),
    };

    await db.collection("users").doc(String(ctx.from.id)).set(user);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ctx.reply(
      "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º.",
      getMainMenuKeyboard()
    );

    return ctx.scene.leave();
  }
);

// –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
const createWalkScene = new Scenes.WizardScene(
  "createWalk",
  // –®–∞–≥ 1: –î–∞—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
  (ctx) => {
    ctx.reply(
      "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É?",
      Markup.keyboard([
        ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"],
        ["–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É"],
        ["‚ùå –û—Ç–º–µ–Ω–∞"],
      ]).resize()
    );

    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
  (ctx) => {
    if (addCancelHandler(ctx)) return;

    ctx.wizard.state.walkData = {};
    ctx.wizard.state.timeSelection = TIME_SELECTION.NONE;

    if (ctx.message.text === "–°–µ–≥–æ–¥–Ω—è") {
      ctx.wizard.state.walkData.date = moment().format("DD.MM.YYYY");

      // –í–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —á–∞—Å—ã
      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
        Markup.keyboard([
          ["6", "7", "8", "9", "10", "11"],
          ["12", "13", "14", "15", "16", "17"],
          ["18", "19", "20", "21", "22", "23"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      ctx.wizard.state.timeSelection = TIME_SELECTION.HOURS;
    } else if (ctx.message.text === "–ó–∞–≤—Ç—Ä–∞") {
      ctx.wizard.state.walkData.date = moment()
        .add(1, "days")
        .format("DD.MM.YYYY");

      // –í–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —á–∞—Å—ã
      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
        Markup.keyboard([
          ["6", "7", "8", "9", "10", "11"],
          ["12", "13", "14", "15", "16", "17"],
          ["18", "19", "20", "21", "22", "23"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      ctx.wizard.state.timeSelection = TIME_SELECTION.HOURS;
    } else if (ctx.message.text === "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É") {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:");
      return ctx.wizard.next();
    }

    return ctx.wizard.next();
  },
  // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞
  (ctx) => {
    if (addCancelHandler(ctx)) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (ctx.wizard.state.timeSelection === TIME_SELECTION.HOURS) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å
      ctx.wizard.state.walkData.hours = ctx.message.text;
      ctx.wizard.state.timeSelection = TIME_SELECTION.MINUTES;

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω—É—Ç—ã
      ctx.reply(
        `–í—ã–±—Ä–∞–Ω–æ: ${ctx.wizard.state.walkData.hours} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
        Markup.keyboard([
          ["00", "05", "10", "15"],
          ["20", "25", "30", "35"],
          ["40", "45", "50", "55"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );
      return;
    } else if (ctx.wizard.state.timeSelection === TIME_SELECTION.MINUTES) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω—É—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
      ctx.wizard.state.walkData.minutes = ctx.message.text;
      ctx.wizard.state.walkData.time = `${ctx.wizard.state.walkData.hours}:${ctx.wizard.state.walkData.minutes}`;

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–∞
      ctx.reply(
        `–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: ${ctx.wizard.state.walkData.time}\n–ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?`,
        Markup.keyboard([
          ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç"],
          ["–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      return ctx.wizard.next();
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É"
    else if (!ctx.wizard.state.walkData.date) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
      ctx.wizard.state.walkData.date = ctx.message.text;
      ctx.wizard.state.timeSelection = TIME_SELECTION.HOURS;

      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
        Markup.keyboard([
          ["6", "7", "8", "9", "10", "11"],
          ["12", "13", "14", "15", "16", "17"],
          ["18", "19", "20", "21", "22", "23"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );
      return;
    }
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –≤—Ä–µ–º—è –≤—Ä—É—á–Ω—É—é)
    else if (
      ctx.wizard.state.walkData.date &&
      !ctx.wizard.state.walkData.time
    ) {
      ctx.wizard.state.walkData.time = ctx.message.text;

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–∞
      ctx.reply(
        "–ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?",
        Markup.keyboard([
          ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç"],
          ["–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      return ctx.wizard.next();
    }

    // –ï—Å–ª–∏ –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    return ctx.wizard.next();
  },
  // –®–∞–≥ 4: –ú–µ—Å—Ç–æ –ø—Ä–æ–≥—É–ª–∫–∏
  (ctx) => {
    if (addCancelHandler(ctx)) return;
    if (ctx.message.text === "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º") {
      ctx.reply("–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:");
      ctx.wizard.state.waitingForLocationText = true;
      return;
    }

    if (ctx.wizard.state.waitingForLocationText) {
      ctx.wizard.state.walkData.locationText = ctx.message.text;
      ctx.wizard.state.waitingForLocationText = false;
    } else if (ctx.message.location) {
      ctx.wizard.state.walkData.location = {
        latitude: ctx.message.location.latitude,
        longitude: ctx.message.location.longitude,
      };
    }

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏
    ctx.reply(
      "–≠—Ç–æ —Ä–∞–∑–æ–≤–∞—è –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞?",
      Markup.keyboard([["–†–∞–∑–æ–≤–∞—è üîπ", "–†–µ–≥—É–ª—è—Ä–Ω–∞—è üîÑ"], ["‚ùå –û—Ç–º–µ–Ω–∞"]]).resize()
    );

    return ctx.wizard.next();
  },
  // –®–∞–≥ 5: –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async (ctx) => {
    if (addCancelHandler(ctx)) return;
    if (ctx.wizard.state.waitingForLocationText) {
      ctx.wizard.state.walkData.locationText = ctx.message.text;
      ctx.wizard.state.waitingForLocationText = false;

      ctx.reply(
        "–≠—Ç–æ —Ä–∞–∑–æ–≤–∞—è –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞?",
        Markup.keyboard([
          ["–†–∞–∑–æ–≤–∞—è üîπ", "–†–µ–≥—É–ª—è—Ä–Ω–∞—è üîÑ"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );
      return;
    }

    ctx.wizard.state.walkData.type = ctx.message.text.includes("–†–∞–∑–æ–≤–∞—è")
      ? "single"
      : "regular";

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–æ–±–∞–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –í–ê–ñ–ù–û: –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ scene.state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∫–Ω–æ–ø–æ–∫
    ctx.scene.state.walkData = { ...ctx.wizard.state.walkData };
    ctx.scene.state.userData = userData; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    let previewText = `
  üóì –ü—Ä–æ–≥—É–ª–∫–∞: ${ctx.wizard.state.walkData.date}, ${ctx.wizard.state.walkData.time}
  üìç –ú–µ—Å—Ç–æ: ${ctx.wizard.state.walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üîÑ –¢–∏–ø: ${ctx.wizard.state.walkData.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${userData.name}
üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
  `;

    await ctx.reply("–ü—Ä–µ–≤—å—é –ø—Ä–æ–≥—É–ª–∫–∏:", Markup.removeKeyboard());

    // –î–ª—è —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if (userData.dog.photoId) {
      await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: previewText,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    } else {
      // –î–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      await ctx.reply(previewText, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    }

    return ctx.wizard.next();
  },
  // –®–∞–≥ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  // –®–∞–≥ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑–¥–µ—Å—å)
  async (ctx) => {
    // –≠—Ç–æ—Ç —à–∞–≥ –∂–¥–µ—Ç —Å–æ–±—ã—Ç–∏—è callback_query
    if (addCancelHandler(ctx)) return;
    if (!ctx.callbackQuery) return;

    const action = ctx.callbackQuery.data;

    if (action === "publish_walk") {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const walkData = ctx.wizard.state.walkData;
        const userData = ctx.wizard.state.userData;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≥—É–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const walkRef = await db.collection("walks").add({
          date: walkData.date,
          time: walkData.time,
          locationText: walkData.locationText || null,
          location: walkData.location || null,
          type: walkData.type,
          organizer: {
            id: ctx.from.id,
            name: userData.name,
            username: ctx.from.username,
          },
          dog: {
            name: userData.dog.name,
            breed: userData.dog.breed,
            size: userData.dog.size,
            age: userData.dog.age,
            photoId: userData.dog.photoId,
          },
          participants: [],
          createdAt: new Date(),
        });

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
        await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!");

        // –£–¥–∞–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await ctx.reply(
          "‚úÖ –ü—Ä–æ–≥—É–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.",
          getMainMenuKeyboard()
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ
        notifyNearbyUsers(walkRef.id, userData, walkData);

        return ctx.scene.leave();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }
    } else if (action === "cancel_walk") {
      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
      await ctx.answerCbQuery("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ");

      // –£–¥–∞–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

      await ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  }
);

// –°—Ü–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const editProfileMenuScene = new Scenes.BaseScene("editProfileMenu");

editProfileMenuScene.enter(async (ctx) => {
  await ctx.reply(
    "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
    Markup.keyboard([
      ["üìù –ò–º—è", "üèô –ì–æ—Ä–æ–¥"],
      ["üêï –ò–º—è —Å–æ–±–∞–∫–∏", "üê∂ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏"],
      ["üìè –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏", "üóì –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏"],
      ["üì∏ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏"],
      ["‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å"],
    ]).resize()
  );
});

editProfileMenuScene.hears("üìù –ò–º—è", (ctx) => {
  ctx.scene.enter("editName");
});

editProfileMenuScene.hears("üèô –ì–æ—Ä–æ–¥", (ctx) => {
  ctx.scene.enter("editCity");
});

editProfileMenuScene.hears("üêï –ò–º—è —Å–æ–±–∞–∫–∏", (ctx) => {
  ctx.scene.enter("editDogName");
});

editProfileMenuScene.hears("üê∂ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏", (ctx) => {
  ctx.scene.enter("editDogBreed");
});

editProfileMenuScene.hears("üìè –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏", (ctx) => {
  ctx.scene.enter("editDogSize");
});

editProfileMenuScene.hears("üóì –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏", (ctx) => {
  ctx.scene.enter("editDogAge");
});

editProfileMenuScene.hears("üì∏ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏", (ctx) => {
  ctx.scene.enter("editDogPhoto");
});

editProfileMenuScene.hears("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", (ctx) => {
  ctx.scene.leave();
  showProfile(ctx);
});

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
const editNameScene = new Scenes.WizardScene(
  "editName",
  // –®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
  (ctx) => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:", Markup.removeKeyboard());
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
  async (ctx) => {
    const newName = ctx.message.text;

    await db.collection("users").doc(String(ctx.from.id)).update({
      name: newName,
    });

    await ctx.reply("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!");
    return ctx.scene.enter("editProfileMenu");
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
const editCityScene = new Scenes.WizardScene(
  "editCity",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
  (ctx) => {
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç",
      Markup.keyboard([
        ...POPULAR_CITIES.map((city) => [city]),
        ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç"],
        ["‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞"],
      ]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
  async (ctx) => {
    if (ctx.message.text === "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞") {
      await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
      return ctx.scene.enter("editProfileMenu");
    }

    if (ctx.message.location) {
      // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
      await db
        .collection("users")
        .doc(String(ctx.from.id))
        .update({
          location: {
            latitude: ctx.message.location.latitude,
            longitude: ctx.message.location.longitude,
          },
          city: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
        });
    } else {
      // –í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
      await db.collection("users").doc(String(ctx.from.id)).update({
        city: ctx.message.text,
      });
    }

    await ctx.reply("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
const editDogNameScene = new Scenes.WizardScene(
  "editDogName",
  // –®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
  (ctx) => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å–æ–±–∞–∫–∏:", Markup.removeKeyboard());
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
  async (ctx) => {
    const newDogName = ctx.message.text;

    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.name": newDogName,
    });

    await ctx.reply("‚úÖ –ò–º—è —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!");
    return ctx.scene.enter("editProfileMenu");
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏
const editDogBreedScene = new Scenes.WizardScene(
  "editDogBreed",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –ø–æ—Ä–æ–¥—ã
  (ctx) => {
    const breedButtons = POPULAR_BREEDS.map((breed) => [breed]);
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—Ä–æ–¥—É:", Markup.keyboard(breedButtons).resize());
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
  async (ctx) => {
    if (ctx.message.text === "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)") {
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏:");
      ctx.wizard.state.waitingForCustomBreed = true;
      return;
    }

    if (ctx.wizard.state.waitingForCustomBreed) {
      await db.collection("users").doc(String(ctx.from.id)).update({
        "dog.breed": ctx.message.text,
      });
    } else {
      await db.collection("users").doc(String(ctx.from.id)).update({
        "dog.breed": ctx.message.text,
      });
    }

    await ctx.reply("‚úÖ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!");
    return ctx.scene.enter("editProfileMenu");
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏
const editDogSizeScene = new Scenes.WizardScene(
  "editDogSize",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
  (ctx) => {
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏:",
      Markup.keyboard([
        [DOG_SIZES.SMALL.text],
        [DOG_SIZES.MEDIUM.text],
        [DOG_SIZES.LARGE.text],
        ["‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞"],
      ]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
  async (ctx) => {
    if (ctx.message.text === "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞") {
      await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
      return ctx.scene.enter("editProfileMenu");
    }

    const size = Object.values(DOG_SIZES).find(
      (size) => size.text === ctx.message.text
    );

    if (size) {
      await db.collection("users").doc(String(ctx.from.id)).update({
        "dog.size": size.value,
      });

      await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    } else {
      await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }

    return ctx.scene.enter("editProfileMenu");
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏
const editDogAgeScene = new Scenes.WizardScene(
  "editDogAge",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞
  (ctx) => {
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏:",
      Markup.keyboard([
        [DOG_AGES.PUPPY.text],
        [DOG_AGES.YOUNG.text],
        [DOG_AGES.ADULT.text],
        [DOG_AGES.SENIOR.text],
        ["‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞"],
      ]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
  async (ctx) => {
    if (ctx.message.text === "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞") {
      await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
      return ctx.scene.enter("editProfileMenu");
    }

    const age = Object.values(DOG_AGES).find(
      (age) => age.text === ctx.message.text
    );

    if (age) {
      await db.collection("users").doc(String(ctx.from.id)).update({
        "dog.age": age.value,
      });

      await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    } else {
      await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }

    return ctx.scene.enter("editProfileMenu");
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏
const editDogPhotoScene = new Scenes.WizardScene(
  "editDogPhoto",
  // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ
  (ctx) => {
    ctx.reply(
      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏",
      Markup.keyboard([["‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞"]]).resize()
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
  async (ctx) => {
    if (ctx.message.text === "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞") {
      await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
      return ctx.scene.enter("editProfileMenu");
    }

    if (ctx.message.photo) {
      const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;

      await db.collection("users").doc(String(ctx.from.id)).update({
        "dog.photoId": photoId,
      });

      await ctx.reply("‚úÖ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
    } else {
      await ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.");
      return;
    }

    return ctx.scene.enter("editProfileMenu");
  }
);

// –°—Ü–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
const editWalkMenuScene = new Scenes.BaseScene("editWalkMenu");

editWalkMenuScene.enter(async (ctx) => {
  try {
    console.log("–í—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏");

    // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
    if (!ctx.session) ctx.session = {};
    const walkId = ctx.session.editWalkId;

    console.log(`–ü–æ–ª—É—á–∏–ª–∏ ID –∏–∑ —Å–µ—Å—Å–∏–∏: ${walkId}`);

    if (!walkId) {
      console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏!");
      ctx.reply(
        "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏",
        getMainMenuKeyboard()
      );
      return ctx.scene.leave();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å—Ü–µ–Ω–µ
    ctx.scene.state.walkId = walkId;

    await ctx.reply(
      "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
      Markup.keyboard([
        ["üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "üìç –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏"],
        ["üîÑ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏"],
        ["‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"],
      ]).resize()
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
    return ctx.scene.leave();
  }
});

editWalkMenuScene.hears("üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", (ctx) => {
  ctx.session.editWalkId = ctx.scene.state.walkId;
  ctx.scene.enter("editWalkDateTime");
});

editWalkMenuScene.hears("üìç –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏", (ctx) => {
  ctx.session.editWalkId = ctx.scene.state.walkId;
  ctx.scene.enter("editWalkLocation");
});

editWalkMenuScene.hears("üîÑ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏", (ctx) => {
  ctx.session.editWalkId = ctx.scene.state.walkId;
  ctx.scene.enter("editWalkType");
});

editWalkMenuScene.hears("‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", (ctx) => {
  ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainMenuKeyboard());
  ctx.scene.leave();
});

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥—É–ª–∫–∏
const editWalkDateTimeScene = new Scenes.WizardScene(
  "editWalkDateTime",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –¥–∞—Ç—ã
  (ctx) => {
    try {
      console.log("–®–∞–≥ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏");

      // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
      const walkId = ctx.session.editWalkId;

      if (!walkId) {
        console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        ctx.reply(
          "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ state
      ctx.wizard.state.walkId = walkId;

      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø—Ä–æ–≥—É–ª–∫–∏:",
        Markup.keyboard([
          ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞"],
          ["–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  (ctx) => {
    try {
      console.log("–®–∞–≥ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏");

      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainMenuKeyboard());
        return ctx.scene.leave();
      }

      if (ctx.message.text === "–°–µ–≥–æ–¥–Ω—è") {
        ctx.wizard.state.newDate = moment().format("DD.MM.YYYY");
      } else if (ctx.message.text === "–ó–∞–≤—Ç—Ä–∞") {
        ctx.wizard.state.newDate = moment().add(1, "days").format("DD.MM.YYYY");
      } else if (ctx.message.text === "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É") {
        ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:");
        ctx.wizard.state.customDate = true;
        return;
      } else if (ctx.wizard.state.customDate) {
        // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é
        ctx.wizard.state.newDate = ctx.message.text;
        ctx.wizard.state.customDate = false;
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
        Markup.keyboard([
          ["6", "7", "8", "9", "10", "11"],
          ["12", "13", "14", "15", "16", "17"],
          ["18", "19", "20", "21", "22", "23"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 3: –í—ã–±–æ—Ä —á–∞—Å–∞
  (ctx) => {
    try {
      console.log("–®–∞–≥ 3 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å)");

      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainMenuKeyboard());
        return ctx.scene.leave();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å
      ctx.wizard.state.newHour = ctx.message.text;

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∏–Ω—É—Ç
      ctx.reply(
        `–í—ã–±—Ä–∞–Ω–æ: ${ctx.wizard.state.newHour} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
        Markup.keyboard([
          ["00", "05", "10", "15"],
          ["20", "25", "30", "35"],
          ["40", "45", "50", "55"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 3 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 4: –í—ã–±–æ—Ä –º–∏–Ω—É—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  async (ctx) => {
    try {
      console.log("–®–∞–≥ 4 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã)");

      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainMenuKeyboard());
        return ctx.scene.leave();
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
      const walkId = ctx.wizard.state.walkId;
      const newDate = ctx.wizard.state.newDate;
      const newTime = `${ctx.wizard.state.newHour}:${ctx.message.text}`;

      console.log(
        `–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è ${walkId}: ${newDate}, ${newTime}`
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await db.collection("walks").doc(walkId).update({
        date: newDate,
        time: newTime,
      });

      ctx.reply(
        `‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: ${newDate}, ${newTime}`,
        getMainMenuKeyboard()
      );

      return ctx.scene.leave();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 4 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏",
        getMainMenuKeyboard()
      );
      return ctx.scene.leave();
    }
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
const editWalkLocationScene = new Scenes.WizardScene(
  "editWalkLocation",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
  (ctx) => {
    try {
      console.log("–®–∞–≥ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞");

      // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
      const walkId = ctx.session.editWalkId;

      if (!walkId) {
        console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        ctx.reply(
          "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ state
      ctx.wizard.state.walkId = walkId;

      ctx.reply(
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:",
        Markup.keyboard([
          ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç"],
          ["–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 2: –í–≤–æ–¥ –º–µ—Å—Ç–∞
  async (ctx) => {
    try {
      console.log("–®–∞–≥ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞");

      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainMenuKeyboard());
        return ctx.scene.leave();
      }

      const walkId = ctx.wizard.state.walkId;

      if (ctx.message.text === "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º") {
        ctx.reply("–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:");
        return;
      } else if (ctx.wizard.state.textEntered) {
        // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –º–µ—Å—Ç–∞
        console.log(
          `–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è ${walkId} –Ω–∞: ${ctx.message.text}`
        );

        await db.collection("walks").doc(walkId).update({
          locationText: ctx.message.text,
          location: null,
        });

        ctx.reply("‚úÖ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", getMainMenuKeyboard());
        return ctx.scene.leave();
      } else if (ctx.message.location) {
        // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        console.log(`–û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è ${walkId}`);

        await db
          .collection("walks")
          .doc(walkId)
          .update({
            location: {
              latitude: ctx.message.location.latitude,
              longitude: ctx.message.location.longitude,
            },
            locationText: null,
          });

        ctx.reply(
          "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      } else if (ctx.message.text === "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç") {
        ctx.reply(
          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏:",
          Markup.keyboard([
            [Markup.button.locationRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç")],
            ["‚ùå –û—Ç–º–µ–Ω–∞"],
          ]).resize()
        );
        return;
      } else {
        // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        ctx.wizard.state.textEntered = true;

        console.log(
          `–û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è ${walkId} –Ω–∞: ${ctx.message.text}`
        );

        await db.collection("walks").doc(walkId).update({
          locationText: ctx.message.text,
          location: null,
        });

        ctx.reply("‚úÖ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", getMainMenuKeyboard());
        return ctx.scene.leave();
      }

      return;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏
const editWalkTypeScene = new Scenes.WizardScene(
  "editWalkType",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞
  (ctx) => {
    try {
      console.log("–®–∞–≥ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞");

      // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
      const walkId = ctx.session.editWalkId;

      if (!walkId) {
        console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        ctx.reply(
          "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏",
          getMainMenuKeyboard()
        );
        return ctx.scene.leave();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ state
      ctx.wizard.state.walkId = walkId;

      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏:",
        Markup.keyboard([
          ["–†–∞–∑–æ–≤–∞—è üîπ", "–†–µ–≥—É–ª—è—Ä–Ω–∞—è üîÑ"],
          ["‚ùå –û—Ç–º–µ–Ω–∞"],
        ]).resize()
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞
  async (ctx) => {
    try {
      console.log("–®–∞–≥ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞");

      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainMenuKeyboard());
        return ctx.scene.leave();
      }

      const walkId = ctx.wizard.state.walkId;
      const newType = ctx.message.text.includes("–†–∞–∑–æ–≤–∞—è")
        ? "single"
        : "regular";

      console.log(`–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –¥–ª—è ${walkId} –Ω–∞: ${newType}`);

      await db.collection("walks").doc(walkId).update({
        type: newType,
      });

      ctx.reply(
        `‚úÖ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${ctx.message.text}"`,
        getMainMenuKeyboard()
      );

      return ctx.scene.leave();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", getMainMenuKeyboard());
      return ctx.scene.leave();
    }
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏
function getDogSizeText(size) {
  const sizeObj = Object.values(DOG_SIZES).find((s) => s.value === size);
  return sizeObj ? sizeObj.text.split(" ")[0] : "–°—Ä–µ–¥–Ω—è—è";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏
function getDogAgeText(age) {
  const ageObj = Object.values(DOG_AGES).find((a) => a.value === age);
  return ageObj ? ageObj.text.split(" ")[0] : "–í–∑—Ä–æ—Å–ª–∞—è";
}

function addCancelHandler(ctx) {
  if (ctx.message && ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
    ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainMenuKeyboard());
    return ctx.scene.leave();
  }
  return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ—Ç–æ–∫
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenuKeyboard() {
  return Markup.keyboard([
    ["üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É", "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É"],
    ["üìã –ú–æ–∏ –ø—Ä–æ–≥—É–ª–∫–∏", "üë• –ì–¥–µ —è —É—á–∞—Å—Ç–≤—É—é"],
    ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"],
  ]).resize();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω
const stage = new Scenes.Stage([
  registerScene,
  createWalkScene,
  editProfileMenuScene,
  editNameScene,
  editCityScene,
  editDogNameScene,
  editDogBreedScene,
  editDogSizeScene,
  editDogAgeScene,
  editDogPhotoScene,
  editWalkMenuScene,
  editWalkDateTimeScene,
  editWalkLocationScene,
  editWalkTypeScene,
]);

bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

  if (userDoc.exists) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ctx.reply("–ü—Ä–∏–≤–µ—Ç! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ DogMeet üê∂", getMainMenuKeyboard());
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç! DogMeet –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å —Å–æ–±–∞–∫–æ–π üê∂.\n" +
        "üîπ –ù–∞—Ö–æ–¥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ —Ä—è–¥–æ–º.\n" +
        "üîπ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.\n" +
        "üîπ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
      Markup.inlineKeyboard([
        [Markup.button.callback("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "create_profile")],
      ])
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action("create_profile", (ctx) => {
  ctx.scene.enter("register");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("publish_walk", async (ctx) => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const walkData = ctx.scene.state.walkData;
  const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
  const userData = userDoc.data();

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≥—É–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const walkRef = await db.collection("walks").add({
    date: walkData.date,
    time: walkData.time,
    locationText: walkData.locationText || null,
    location: walkData.location || null,
    type: walkData.type,
    organizer: {
      id: ctx.from.id,
      name: userData.name,
      username: ctx.from.username,
    },
    dog: {
      name: userData.dog.name,
      breed: userData.dog.breed,
      size: userData.dog.size,
      age: userData.dog.age,
      photoId: userData.dog.photoId,
    },
    participants: [],
    createdAt: new Date(),
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  ctx.reply(
    "‚úÖ –ü—Ä–æ–≥—É–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.",
    getMainMenuKeyboard()
  );

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏)
  notifyNearbyUsers(walkRef.id, userData, walkData);

  ctx.scene.leave();
});

// –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("cancel_walk", (ctx) => {
  ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", getMainMenuKeyboard());
  ctx.scene.leave();
});

// –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—É–ª–∫–∏
bot.hears("üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É", async (ctx) => {
  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
    Markup.keyboard([
      ["üîπ –ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º"],
      ["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÖ –ó–∞–≤—Ç—Ä–∞", "üìÖ –í—Å–µ –¥–∞—Ç—ã"],
      ["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"],
    ]).resize()
  );
});

bot.hears("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", (ctx) => {
  ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", getMainMenuKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫
bot.hears(/üîπ –ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º|üìÖ –°–µ–≥–æ–¥–Ω—è|üìÖ –ó–∞–≤—Ç—Ä–∞|üìÖ –í—Å–µ –¥–∞—Ç—ã/, async (ctx) => {
  const filter = ctx.message.text;
  let query = db.collection("walks");

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
  if (filter === "üìÖ –°–µ–≥–æ–¥–Ω—è") {
    const today = moment().format("DD.MM.YYYY");
    query = query.where("date", "==", today);
  } else if (filter === "üìÖ –ó–∞–≤—Ç—Ä–∞") {
    const tomorrow = moment().add(1, "days").format("DD.MM.YYYY");
    query = query.where("date", "==", tomorrow);
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—É–ª–∫–∏
  const walksSnapshot = await query.get();

  if (walksSnapshot.empty) {
    ctx.reply(
      "–ü—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø—Ä–æ–≥—É–ª–∫—É."
    );
    return;
  }

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º, –Ω—É–∂–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (filter === "üîπ –ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º") {
    ctx.reply(
      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫:",
      Markup.keyboard([
        [Markup.button.locationRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç")],
        ["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"],
      ]).resize()
    );
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–∫
  await showWalksList(ctx, walksSnapshot.docs);
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é showProfile (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 649) –∏ –º–µ–Ω—è–µ–º –µ—ë:
async function showProfile(ctx) {
  const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

  if (!userDoc.exists) {
    ctx.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.");
    return;
  }

  const userData = userDoc.data();

  const profileText = `
    üë§ –ò–º—è: ${userData.name} ${ctx.from.username ? "@" + ctx.from.username : ""}
    üìç –ì–æ—Ä–æ–¥: ${userData.city}
    üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
    `;

  // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
  if (userData.dog.photoId) {
    await ctx.replyWithPhoto(userData.dog.photoId, {
      caption: profileText,
    });
  } else {
    await ctx.reply(profileText);
  }

  // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    Markup.keyboard([
      ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"],
      ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
    ]).resize()
  );
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫
async function showWalksList(ctx, walkDocs) {
  for (const walkDoc of walkDocs) {
    const walk = walkDoc.data();

    const walkPreview = `
    üïí ${walk.date}, ${walk.time}
    üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
    üêï –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants.length + 1}
    üë§ ${walk.dog.name} (${walk.organizer.name}) ${getDogAgeText(walk.dog.age)}
    ${walk.organizer.username ? "@" + walk.organizer.username : ""}
    `;

    await ctx.reply(
      walkPreview,
      Markup.inlineKeyboard([
        [Markup.button.callback("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", `walk_details_${walkDoc.id}`)],
      ])
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—É–ª–∫–∏
bot.action(/walk_details_(.+)/, async (ctx) => {
  const walkId = ctx.match[1];

  const walkDoc = await db.collection("walks").doc(walkId).get();

  if (!walkDoc.exists) {
    ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    return;
  }

  const walk = walkDoc.data();

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ
  let walkDetails = `
    üóì –ü—Ä–æ–≥—É–ª–∫–∞: ${walk.date}, ${walk.time}
    üìç –ú–µ—Å—Ç–æ: ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
    üîÑ –¢–∏–ø: ${walk.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
    üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${walk.organizer.name} ${walk.organizer.username ? "@" + walk.organizer.username : ""}
    üêï –°–æ–±–∞–∫–∞: ${walk.dog.name}, ${walk.dog.breed}, ${getDogSizeText(walk.dog.size)}, ${getDogAgeText(walk.dog.age)}
    `;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  if (walk.participants && walk.participants.length > 0) {
    walkDetails += "\nüë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å:\n";
    for (const participant of walk.participants) {
      walkDetails += `- ${participant.name} —Å ${participant.dogName}\n`;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
  const isOrganizer = walk.organizer.id == ctx.from.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
  const isParticipant =
    walk.participants && walk.participants.some((p) => p.id == ctx.from.id);

  // –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const keyboard = [];

  if (isOrganizer) {
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    keyboard.push([
      {
        text: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚úèÔ∏è",
        callback_data: `edit_walk_${walkId}`,
      },
      { text: "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚ùå", callback_data: `cancel_walk_${walkId}` },
    ]);
  } else {
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!isParticipant) {
      keyboard.push([
        { text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚úÖ", callback_data: `join_walk_${walkId}` },
      ]);
    } else {
      keyboard.push([
        { text: "–ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚ùå", callback_data: `leave_walk_${walkId}` },
      ]);
    }

    keyboard.push([
      {
        text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º üì©",
        callback_data: `contact_organizer_${walkId}`,
      },
    ]);
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
  if (walk.dog.photoId) {
    await ctx.replyWithPhoto(walk.dog.photoId, {
      caption: walkDetails,
      reply_markup: { inline_keyboard: keyboard },
    });
  } else {
    await ctx.reply(walkDetails, {
      reply_markup: { inline_keyboard: keyboard },
    });
  }
});

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–≥—É–ª–∫–µ
bot.action(/join_walk_(.+)/, async (ctx) => {
  const walkId = ctx.match[1];
  const walkRef = db.collection("walks").doc(walkId);
  const walkDoc = await walkRef.get();

  if (!walkDoc.exists) {
    ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    return;
  }

  const walk = walkDoc.data();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
  if (walk.participants.some((p) => p.id === ctx.from.id)) {
    ctx.answerCbQuery("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–µ!");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
  const userData = userDoc.data();

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const newParticipant = {
    id: ctx.from.id,
    name: userData.name,
    username: ctx.from.username,
    dogName: userData.dog.name,
    dogBreed: userData.dog.breed,
    dogSize: userData.dog.size,
    dogAge: userData.dog.age,
    dogPhotoId: userData.dog.photoId,
  };

  await walkRef.update({
    participants: [...walk.participants, newParticipant],
  });

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
  ctx.answerCbQuery("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ!");
  ctx.reply(
    "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
  );

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
  await bot.telegram.sendMessage(
    walk.organizer.id,
    `
üì¢ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≤–∞—à–µ–π –ø—Ä–æ–≥—É–ª–∫–µ!
üë§ ${userData.name}
üêï ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
üì© –ö–æ–Ω—Ç–∞–∫—Ç: ${ctx.from.username ? "@" + ctx.from.username : "–ù–µ—Ç username"}
`
  );

  // –ï—Å–ª–∏ —É —Å–æ–±–∞–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
  if (userData.dog.photoId) {
    await bot.telegram.sendPhoto(walk.organizer.id, userData.dog.photoId);
  }
});

// –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—É–ª–∫—É
bot.action(/leave_walk_(.+)/, async (ctx) => {
  const walkId = ctx.match[1];
  const walkRef = db.collection("walks").doc(walkId);
  const walkDoc = await walkRef.get();

  if (!walkDoc.exists) {
    ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    return;
  }

  const walk = walkDoc.data();

  // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const updatedParticipants = walk.participants.filter(
    (p) => p.id !== ctx.from.id
  );

  await walkRef.update({
    participants: updatedParticipants,
  });

  ctx.answerCbQuery("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É.");
  ctx.reply("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É.");

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
  await bot.telegram.sendMessage(
    walk.organizer.id,
    `–£—á–∞—Å—Ç–Ω–∏–∫ ${ctx.from.username ? "@" + ctx.from.username : ctx.from.id} –ø–æ–∫–∏–Ω—É–ª –≤–∞—à—É –ø—Ä–æ–≥—É–ª–∫—É.`
  );
});

// –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
bot.action(/cancel_walk_(.+)/, async (ctx) => {
  const walkId = ctx.match[1];
  const walkRef = db.collection("walks").doc(walkId);
  const walkDoc = await walkRef.get();

  if (!walkDoc.exists) {
    ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    return;
  }

  const walk = walkDoc.data();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
  if (walk.organizer.id !== ctx.from.id) {
    ctx.answerCbQuery("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫—É.");
    return;
  }

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ
  for (const participant of walk.participants) {
    await bot.telegram.sendMessage(
      participant.id,
      `‚ùå –ü—Ä–æ–≥—É–ª–∫–∞ ${walk.date}, ${walk.time} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º.`
    );
  }

  // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—É–ª–∫—É
  await walkRef.delete();

  ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
});

// –ö–æ–Ω—Ç–∞–∫—Ç —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
bot.action(/contact_organizer_(.+)/, async (ctx) => {
  const walkId = ctx.match[1];
  const walkDoc = await db.collection("walks").doc(walkId).get();

  if (!walkDoc.exists) {
    ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    return;
  }

  const walk = walkDoc.data();

  if (walk.organizer.username) {
    ctx.reply(
      `–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: @${walk.organizer.username}`
    );
  } else {
    ctx.reply(
      "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ—Ç username –≤ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
    );

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    await bot.telegram.sendMessage(
      walk.organizer.id,
      `–£—á–∞—Å—Ç–Ω–∏–∫ ${ctx.from.username ? "@" + ctx.from.username : ctx.from.id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–≥—É–ª–∫–∏ ${walk.date}, ${walk.time}.`
    );
  }

  ctx.answerCbQuery();
});

bot.action(/edit_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    console.log(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Å ID: ${walkId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
    const walkDoc = await db.collection("walks").doc(walkId).get();
    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!ctx.session) ctx.session = {};
    ctx.session.editWalkId = walkId;

    console.log(`–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID ${walkId} –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await ctx.answerCbQuery();

    // –í—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
    return ctx.scene.enter("editWalkMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏");
  }
});
// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏
bot.hears("üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", (ctx) => {
  ctx.scene.enter("createWalk");
});

bot.hears("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", (ctx) => {
  ctx.scene.enter("editProfileMenu");
});

// –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
bot.hears("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
  await showProfile(ctx);
});

bot.hears("üìã –ú–æ–∏ –ø—Ä–æ–≥—É–ª–∫–∏", async (ctx) => {
  const walksSnapshot = await db
    .collection("walks")
    .where("organizer.id", "==", ctx.from.id)
    .get();

  if (walksSnapshot.empty) {
    ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫.");
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
  await ctx.reply(
    "–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏:",
    Markup.keyboard([["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]).resize()
  );

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–∫ —Å –ø–æ–º–µ—Ç–∫–æ–π "–í–∞—à–∞ –ø—Ä–æ–≥—É–ª–∫–∞"
  for (const walkDoc of walksSnapshot.docs) {
    const walk = walkDoc.data();

    const walkPreview = `
      üïí ${walk.date}, ${walk.time}
      üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
      üêï –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants.length + 1}
      üë§ ${walk.dog.name} (${walk.organizer.name}) ${getDogAgeText(walk.dog.age)}
      ${walk.organizer.username ? "@" + walk.organizer.username : ""}
      üëë –í–∞—à–∞ –ø—Ä–æ–≥—É–ª–∫–∞
      `;

    await ctx.reply(
      walkPreview,
      Markup.inlineKeyboard([
        [Markup.button.callback("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", `walk_details_${walkDoc.id}`)],
      ])
    );
  }
});

bot.hears("üë• –ì–¥–µ —è —É—á–∞—Å—Ç–≤—É—é", async (ctx) => {
  const walksSnapshot = await db
    .collection("walks")
    .where("participants", "array-contains", { id: ctx.from.id })
    .get();

  if (walksSnapshot.empty) {
    ctx.reply("–í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–µ.");
    return;
  }

  ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å:");
  await showWalksList(ctx, walksSnapshot.docs);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
bot.action("edit_profile", (ctx) => {
  ctx.answerCbQuery();
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–ò–º—è", "edit_name")],
      [Markup.button.callback("–ì–æ—Ä–æ–¥", "edit_city")],
      [Markup.button.callback("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–∞–∫–µ", "edit_dog")],
      [Markup.button.callback("–ù–∞–∑–∞–¥", "back_to_profile")],
    ])
  );
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å
bot.action("back_to_profile", (ctx) => {
  ctx.answerCbQuery();
  ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", getMainMenuKeyboard());
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
bot.hears("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", (ctx) => {
  ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", getMainMenuKeyboard());
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ
async function notifyNearbyUsers(walkId, organizer, walkData) {
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–º –∂–µ –≥–æ—Ä–æ–¥–µ

  const usersSnapshot = await db
    .collection("users")
    .where("city", "==", organizer.city)
    .get();

  for (const userDoc of usersSnapshot.docs) {
    const user = userDoc.data();

    // –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    if (user.id === organizer.id) continue;

    await bot.telegram.sendMessage(
      user.id,
      `
üîî –ù–æ–≤–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏!
üóì ${walkData.date}, ${walkData.time}
üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizer.name}
üêï –°–æ–±–∞–∫–∞: ${organizer.dog.name}, ${organizer.dog.breed}
`,
      Markup.inlineKeyboard([
        [Markup.button.callback("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", `walk_details_${walkId}`)],
      ])
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–æ–≥—É–ª–∫–∞—Ö
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–æ–≥—É–ª–∫–∞—Ö –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–¥—à–∏—Ö
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–æ–≥—É–ª–∫–∞—Ö –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–¥—à–∏—Ö
async function remindAboutWalks() {
  const now = new Date();
  const today = moment(now).format("DD.MM.YYYY");

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
  const walksSnapshot = await db.collection("walks").get();

  for (const walkDoc of walksSnapshot.docs) {
    const walk = walkDoc.data();
    const walkId = walkDoc.id;

    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏
    const [hours, minutes] = walk.time.split(":").map(Number);
    const walkTime = new Date(now);

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—Ä–æ–≥—É–ª–∫–∏
    const [day, month, year] = walk.date.split(".").map(Number);
    walkTime.setFullYear(year, month - 1, day); // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    walkTime.setHours(hours, minutes, 0, 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—É–ª–∫–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —á–∞—Å–∞
    const timeDiffMinutes = Math.round((now - walkTime) / (1000 * 60));

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≥—É–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥, —É–¥–∞–ª—è–µ–º –µ—ë
    if (walk.type === "single" && timeDiffMinutes > 60) {
      await db.collection("walks").doc(walkId).delete();
      console.log(
        `–ü—Ä–æ–≥—É–ª–∫–∞ ${walkId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ (–ø—Ä–æ—à–ª–∞ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥)`
      );
      continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≥—É–ª–∫–µ
    }

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø—Ä–æ–≥—É–ª–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è)
    if (walk.date === today) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç
      const timeToWalkMinutes = Math.round((walkTime - now) / (1000 * 60));

      if (timeToWalkMinutes > 14 && timeToWalkMinutes < 16) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
        const reminderText = `
  üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –ø—Ä–æ–≥—É–ª–∫–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!
  üóì ${walk.date}, ${walk.time}
  üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  `;

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        await bot.telegram.sendMessage(walk.organizer.id, reminderText);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for (const participant of walk.participants) {
          await bot.telegram.sendMessage(participant.id, reminderText);
        }
      }
    }
  }
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
cron.schedule("* * * * *", remindAboutWalks);

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot
  .launch()
  .then(() => {
    console.log("–ë–æ—Ç DogMeet —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
