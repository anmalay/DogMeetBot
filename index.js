// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
const { Telegraf, Scenes, session, Markup } = require("telegraf");
const { initializeApp, cert } = require("firebase-admin/app");
const { getFirestore } = require("firebase-admin/firestore");
const moment = require("moment");
const fetch = require("node-fetch");

const cron = require("node-cron");
require("dotenv").config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const serviceAccount = require("./serviceAccountKey.json");
initializeApp({
  credential: cert(serviceAccount),
});
const db = getFirestore();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// Middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
bot.use(session());

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç middleware –ø–µ—Ä–µ–¥ bot.use(stage.middleware())
bot.use(async (ctx, next) => {
  try {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É) - –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    if (ctx.session && ctx.session.__scenes && ctx.session.__scenes.current) {
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ ${ctx.session.__scenes.current}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç`
      );
      return next();
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ callback –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if (!ctx.callbackQuery && (!ctx.message || ctx.message.text !== "/start")) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
      if (
        !ctx.session ||
        !ctx.session.lastInteraction ||
        ctx.session.lastInteraction < BOT_START_TIME
      ) {
        console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

        // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        const oldScenes =
          ctx.session && ctx.session.__scenes ? ctx.session.__scenes : null;
        ctx.session = { lastInteraction: Date.now() };

        // –ï—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        if (oldScenes) {
          ctx.session.__scenes = oldScenes;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const userDoc = await db
          .collection("users")
          .doc(String(ctx.from.id))
          .get();

        if (userDoc.exists) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          await ctx.reply("–ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω. –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: getMainMenuKeyboard(),
          });
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –≤ —Å—Ü–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          if (!oldScenes || oldScenes.current !== "register") {
            await ctx.reply(
              "–ü—Ä–∏–≤–µ—Ç! DogMeet –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å —Å–æ–±–∞–∫–æ–π üê∂.\n" +
                "üîπ –ù–∞—Ö–æ–¥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ —Ä—è–¥–æ–º.\n" +
                "üîπ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.\n" +
                "üîπ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
              Markup.inlineKeyboard([
                [Markup.button.callback("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "create_profile")],
              ])
            );
          }
        }

        // –ï—Å–ª–∏ –º—ã –Ω–µ –≤ —Å—Ü–µ–Ω–µ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!oldScenes) {
          return;
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ —Å–µ—Å—Å–∏–∏
    if (!ctx.session) ctx.session = {};
    ctx.session.lastInteraction = Date.now();

    return next();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ middleware –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞:", error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    return next();
  }
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫
const DOG_SIZES = {
  SMALL: { text: "–ú–∞–ª–µ–Ω—å–∫–∞—è üêæ (–¥–æ 10 –∫–≥)", value: "small" },
  MEDIUM: { text: "–°—Ä–µ–¥–Ω—è—è üêï (10‚Äì25 –∫–≥)", value: "medium" },
  LARGE: { text: "–ö—Ä—É–ø–Ω–∞—è üêï‚Äçü¶∫ (25+ –∫–≥)", value: "large" },
};

const DOG_AGES = {
  PUPPY: { text: "üçº –©–µ–Ω–æ–∫ (0‚Äì6 –º–µ—Å)", value: "puppy" },
  YOUNG: { text: "üêæ –ú–æ–ª–æ–¥–∞—è (6 –º–µ—Å ‚Äì 2 –≥–æ–¥–∞)", value: "young" },
  ADULT: { text: "üêï –í–∑—Ä–æ—Å–ª–∞—è (2‚Äì7 –ª–µ—Ç)", value: "adult" },
  SENIOR: { text: "ü¶¥ –°—Ç–∞—Ä—à–∞—è (7+ –ª–µ—Ç)", value: "senior" },
};

const TIME_SELECTION = {
  HOURS: "hours",
  MINUTES: "minutes",
};

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫
const POPULAR_BREEDS = [
  "–õ–∞–±—Ä–∞–¥–æ—Ä",
  "–ù–µ–º–µ—Ü–∫–∞—è –æ–≤—á–∞—Ä–∫–∞",
  "–•–∞—Å–∫–∏",
  "–î–∂–µ–∫ –†–∞—Å—Å–µ–ª",
  "–ô–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä",
  "–ß–∏—Ö—É–∞—Ö—É–∞",
  "–¢–∞–∫—Å–∞",
  "–î–≤–æ—Ä–Ω—è–∂–∫–∞",
  "–ö–æ—Ä–≥–∏",
  "–®–ø–∏—Ü",
  "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)",
];

// –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
const POPULAR_CITIES = [
  "–ú–æ—Å–∫–≤–∞",
  "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
  "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
  "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
  "–ö–∞–∑–∞–Ω—å",
];

// –°—Ü–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerScene = new Scenes.WizardScene(
  "register",
  // –®–∞–≥ 1: –¢–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É –±–µ—Ä–µ–º –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
  (ctx) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.wizard.state.userData = {};

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram
    const firstName = ctx.from.first_name || "";
    const lastName = ctx.from.last_name || "";

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è (–∏–ª–∏ —Ç–æ–ª—å–∫–æ –∏–º—è, –µ—Å–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç)
    ctx.wizard.state.userData.name =
      firstName + (lastName ? " " + lastName : "");

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${ctx.wizard.state.userData.name}! üêæ\n\n–ß—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.`
    );

    // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
    ctx.reply(
      `üí° <b>–°–æ–≤–µ—Ç</b>: –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–∑–≤–æ–ª–∏—Ç:\n‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—É–ª–∫–∞—Ö –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä "–ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º"\n‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±–∞—á—å–∏—Ö –¥—Ä—É–∑–µ–π –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            // –ö–Ω–æ–ø–∫–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏
            ...POPULAR_CITIES.map((city) => [
              { text: city, callback_data: `city_${city}` },
            ]),
            // –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            [
              {
                text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                callback_data: "send_location_reg",
              },
            ],
          ],
        },
      }
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        ctx.answerCbQuery();

        if (data.startsWith("city_")) {
          ctx.wizard.state.userData.city = data.replace("city_", "");
        } else if (data === "send_location_reg") {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
          ctx.reply(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            Markup.keyboard([
              [Markup.button.locationRequest("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")],
            ]).resize()
          );
          ctx.wizard.state.waitingForLocationReg = true;
          return; // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      else if (ctx.message && ctx.message.location) {
        console.log("–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", ctx.message.location);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        ctx.wizard.state.userData.location = {
          latitude: ctx.message.location.latitude,
          longitude: ctx.message.location.longitude,
        };

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        getLocationCity(
          ctx.message.location.latitude,
          ctx.message.location.longitude
        )
          .then((cityName) => {
            // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—Ä–∞–∑—É
            ctx.wizard.state.userData.city =
              cityName || "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
            console.log(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥: ${ctx.wizard.state.userData.city}`);
          })
          .catch((error) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
            ctx.wizard.state.userData.city = "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
          })
          .finally(() => {
            // –£–±–∏—Ä–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            ctx.reply(
              "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—É–ª–∫–∞—Ö —Ä—è–¥–æ–º —Å –≤–∞–º–∏.",
              Markup.removeKeyboard()
            );

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–∏–º—è —Å–æ–±–∞–∫–∏)
            ctx.reply("–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à—É —Å–æ–±–∞–∫—É?");
            ctx.wizard.next();
          });

        return; // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      ctx.reply("–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à—É —Å–æ–±–∞–∫—É?", Markup.removeKeyboard());
      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–∞/–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
      ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.",
        Markup.removeKeyboard()
      );
      // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ, –æ—Å—Ç–∞–≤–∞—è—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
      return;
    }
  },
  // –®–∞–≥ 4: –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏
  (ctx) => {
    if (ctx.message && ctx.message.text) {
      if (!isValidString(ctx.message.text)) {
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—Ä–æ–¥—É:");
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
      }
      ctx.wizard.state.userData.dogName = ctx.message.text;
    }

    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É",
      Markup.inlineKeyboard(
        POPULAR_BREEDS.map((breed) => [
          { text: breed, callback_data: `breed_${breed}` },
        ])
      )
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 5: –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏
  (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith("breed_")) {
      const breed = ctx.callbackQuery.data.replace("breed_", "");
      ctx.answerCbQuery();

      if (breed === "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)") {
        ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏:");
        ctx.wizard.state.waitingForCustomBreed = true;
        return;
      } else {
        ctx.wizard.state.userData.dogBreed = breed;
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –ø–æ—Ä–æ–¥—ã
    else if (
      ctx.wizard.state.waitingForCustomBreed &&
      ctx.message &&
      ctx.message.text
    ) {
      if (!isValidString(ctx.message.text)) {
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—Ä–æ–¥—É:");
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ
      }
      ctx.wizard.state.userData.dogBreed = ctx.message.text;
      ctx.wizard.state.waitingForCustomBreed = false;
    }
    // –ï—Å–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    else if (ctx.message && ctx.message.text) {
      ctx.wizard.state.userData.dogBreed = ctx.message.text;
    }

    ctx.reply(
      "–ö–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—à–∞ —Å–æ–±–∞–∫–∞?",
      Markup.inlineKeyboard([
        [{ text: "–ú–∞–ª–µ–Ω—å–∫–∞—è üêæ (–¥–æ 10 –∫–≥)", callback_data: "size_small" }],
        [{ text: "–°—Ä–µ–¥–Ω—è—è üêï (10‚Äì25 –∫–≥)", callback_data: "size_medium" }],
        [{ text: "–ö—Ä—É–ø–Ω–∞—è üêï‚Äçü¶∫ (25+ –∫–≥)", callback_data: "size_large" }],
      ])
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 6: –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏
  (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
    if (ctx.callbackQuery) {
      const data = ctx.callbackQuery.data;
      ctx.answerCbQuery();

      if (data === "size_small") {
        ctx.wizard.state.userData.dogSize = "small";
      } else if (data === "size_medium") {
        ctx.wizard.state.userData.dogSize = "medium";
      } else if (data === "size_large") {
        ctx.wizard.state.userData.dogSize = "large";
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    else if (ctx.message && ctx.message.text) {
      const size = Object.values(DOG_SIZES).find((size) =>
        size.text.includes(ctx.message.text)
      );

      ctx.wizard.state.userData.dogSize = size
        ? size.value
        : DOG_SIZES.MEDIUM.value;
    }
    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else if (!ctx.wizard.state.userData.dogSize) {
      ctx.wizard.state.userData.dogSize = DOG_SIZES.MEDIUM.value;
    }

    ctx.reply(
      "–í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏:",
      Markup.inlineKeyboard([
        [{ text: DOG_AGES.PUPPY.text, callback_data: "age_puppy" }],
        [{ text: DOG_AGES.YOUNG.text, callback_data: "age_young" }],
        [{ text: DOG_AGES.ADULT.text, callback_data: "age_adult" }],
        [{ text: DOG_AGES.SENIOR.text, callback_data: "age_senior" }],
      ])
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 7: –§–æ—Ç–æ —Å–æ–±–∞–∫–∏
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if (ctx.callbackQuery) {
      const data = ctx.callbackQuery.data;
      ctx.answerCbQuery();

      if (data === "age_puppy") {
        ctx.wizard.state.userData.dogAge = "puppy";
      } else if (data === "age_young") {
        ctx.wizard.state.userData.dogAge = "young";
      } else if (data === "age_adult") {
        ctx.wizard.state.userData.dogAge = "adult";
      } else if (data === "age_senior") {
        ctx.wizard.state.userData.dogAge = "senior";
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    else if (ctx.message && ctx.message.text) {
      const age = Object.values(DOG_AGES).find((age) =>
        age.text.includes(ctx.message.text)
      );

      ctx.wizard.state.userData.dogAge = age ? age.value : DOG_AGES.ADULT.value;
    }
    // –ï—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∑—Ä–æ—Å–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else if (!ctx.wizard.state.userData.dogAge) {
      ctx.wizard.state.userData.dogAge = DOG_AGES.ADULT.value;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    ctx.reply(
      "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
      Markup.inlineKeyboard([
        [{ text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚è≠Ô∏è", callback_data: "skip_photo" }],
      ])
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 8: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  // –®–∞–≥ 8: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async (ctx) => {
    try {
      const userData = ctx.wizard.state.userData || {};

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
      if (ctx.callbackQuery && ctx.callbackQuery.data === "skip_photo") {
        await ctx.answerCbQuery();
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
      else if (ctx.message && ctx.message.photo) {
        const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        userData.dogPhotoId = photoId;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
      userData.name = userData.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
      userData.city = userData.city || "–ù–µ —É–∫–∞–∑–∞–Ω";
      userData.dogName = userData.dogName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
      userData.dogBreed = userData.dogBreed || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      userData.dogSize = userData.dogSize || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";
      userData.dogAge = userData.dogAge || "–ù–µ —É–∫–∞–∑–∞–Ω–∞";

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const user = {
        id: ctx.from.id,
        username: ctx.from.username || null,
        name: userData.name,
        city: userData.city,
        location: userData.location || null,
        dog: {
          name: userData.dogName,
          breed: userData.dogBreed,
          size: userData.dogSize,
          age: userData.dogAge,
          photoId: userData.dogPhotoId || null,
        },
        createdAt: new Date(),
      };

      await db.collection("users").doc(String(ctx.from.id)).set(user);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await ctx.reply(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º.",
        { reply_markup: getMainMenuKeyboard() }
      );

      return ctx.scene.leave();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        Markup.removeKeyboard()
      );
      return ctx.scene.leave();
    }
  }
);
// –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
const createWalkScene = new Scenes.WizardScene(
  "createWalk",
  // –®–∞–≥ 1: –î–∞—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
  (ctx) => {
    ctx.reply(
      "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É?",
      Markup.inlineKeyboard([
        [
          { text: "–°–µ–≥–æ–¥–Ω—è", callback_data: "date_today" },
          { text: "–ó–∞–≤—Ç—Ä–∞", callback_data: "date_tomorrow" },
        ],
        [{ text: "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data: "date_custom" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
      ])
    );
    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  (ctx) => {
    if (!ctx.wizard.state.walkData) {
      ctx.wizard.state.walkData = {};
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      ctx.answerCbQuery();
      ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
        reply_markup: getMainMenuKeyboard(),
      });
      return ctx.scene.leave();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    if (ctx.callbackQuery) {
      const data = ctx.callbackQuery.data;
      ctx.answerCbQuery();

      if (data === "date_today") {
        ctx.wizard.state.walkData.date = moment().format("DD.MM.YYYY");
      } else if (data === "date_tomorrow") {
        ctx.wizard.state.walkData.date = moment()
          .add(1, "days")
          .format("DD.MM.YYYY");
      } else if (data === "date_custom") {
        ctx.reply(
          "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
          Markup.removeKeyboard()
        );
        return;
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–∞—Ç—ã
    else if (ctx.message && ctx.message.text) {
      if (!isValidDate(ctx.message.text)) {
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:");
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
      }
      ctx.wizard.state.walkData.date = ctx.message.text;
    }

    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
    if (ctx.wizard.state.walkData.date) {
      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
        Markup.inlineKeyboard(
          [
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
          ]
            .map((h) => [{ text: h, callback_data: `hour_${h}` }])
            .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
        )
      );
    }

    return ctx.wizard.next();
  },

  // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
  (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      ctx.answerCbQuery();
      ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
        reply_markup: getMainMenuKeyboard(),
      });
      return ctx.scene.leave();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
    if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith("hour_")) {
      const hour = ctx.callbackQuery.data.replace("hour_", "");
      ctx.answerCbQuery();

      ctx.wizard.state.walkData.hours = hour;

      ctx.reply(
        `–í—ã–±—Ä–∞–Ω–æ: ${hour} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
        Markup.inlineKeyboard(
          [
            "00",
            "05",
            "10",
            "15",
            "20",
            "25",
            "30",
            "35",
            "40",
            "45",
            "50",
            "55",
          ]
            .map((m) => [{ text: m, callback_data: `minute_${m}` }])
            .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
        )
      );
    } else if (ctx.message && ctx.message.text) {
      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
          reply_markup: getMainMenuKeyboard(),
        });
        return ctx.scene.leave();
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23
      const hours = parseInt(ctx.message.text, 10);
      if (isNaN(hours) || hours < 0 || hours > 23) {
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ (0-23):");
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      ctx.wizard.state.walkData.hours = String(hours);

      ctx.reply(
        `–í—ã–±—Ä–∞–Ω–æ: ${hours} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
        Markup.inlineKeyboard(
          [
            "00",
            "05",
            "10",
            "15",
            "20",
            "25",
            "30",
            "35",
            "40",
            "45",
            "50",
            "55",
          ]
            .map((m) => [{ text: m, callback_data: `minute_${m}` }])
            .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
        )
      );
    }

    return ctx.wizard.next();
  },

  // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç –∏ –≤—ã–±–æ—Ä –º–µ—Å—Ç–∞
  (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      ctx.answerCbQuery();
      ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
        reply_markup: getMainMenuKeyboard(),
      });
      return ctx.scene.leave();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç
    if (ctx.callbackQuery && ctx.callbackQuery.data.startsWith("minute_")) {
      const minute = ctx.callbackQuery.data.replace("minute_", "");
      ctx.answerCbQuery();

      ctx.wizard.state.walkData.minutes = minute;
      ctx.wizard.state.walkData.time = `${ctx.wizard.state.walkData.hours}:${minute}`;

      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞
      ctx.reply(
        `–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: ${ctx.wizard.state.walkData.time}\n–ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?`,
        Markup.inlineKeyboard([
          [
            {
              text: "üü¢ –ì—É–ª—è—é –∑–¥–µ—Å—å (—Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ)",
              callback_data: "walk_here",
            },
          ],
          [{ text: "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å", callback_data: "enter_location_text" }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ])
      );
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç
    else if (
      ctx.message &&
      ctx.message.text &&
      !ctx.wizard.state.waitingForLocationText &&
      !ctx.message.location
    ) {
      if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
        ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
          reply_markup: getMainMenuKeyboard(),
        });
        return ctx.scene.leave();
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 59
      const minutes = parseInt(ctx.message.text, 10);
      if (isNaN(minutes) || minutes < 0 || minutes > 59) {
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç (0-59):");
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω—É—Ç—ã —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º
      const formattedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;
      ctx.wizard.state.walkData.minutes = formattedMinutes;
      ctx.wizard.state.walkData.time = `${ctx.wizard.state.walkData.hours}:${formattedMinutes}`;

      ctx.reply(
        `–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: ${ctx.wizard.state.walkData.time}\n–ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?`,
        Markup.inlineKeyboard([
          [
            {
              text: "üü¢ –ì—É–ª—è—é –∑–¥–µ—Å—å (—Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ)",
              callback_data: "walk_here",
            },
          ],
          [{ text: "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å", callback_data: "enter_location_text" }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ])
      );
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞
    else if (ctx.callbackQuery) {
      ctx.answerCbQuery();

      if (ctx.callbackQuery.data === "walk_here") {
        // –î–ª—è –æ–ø—Ü–∏–∏ "–ì—É–ª—è—é –∑–¥–µ—Å—å" - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        ctx.reply(
          "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
          Markup.keyboard([
            [Markup.button.locationRequest("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")],
          ]).resize()
        );
        ctx.wizard.state.waitingForWalkHere = true;
        return;
      } else if (ctx.callbackQuery.data === "enter_location_text") {
        ctx.reply("–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:", Markup.removeKeyboard());
        ctx.wizard.state.waitingForLocationText = true;
        return;
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –º–µ—Å—Ç–∞ –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    else if (ctx.message) {
      if (ctx.wizard.state.waitingForLocationText) {
        if (!isValidString(ctx.message.text)) {
          ctx.reply(
            "–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ 'null'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
          );
          return;
        }
        ctx.wizard.state.walkData.locationText = ctx.message.text;
        ctx.wizard.state.waitingForLocationText = false;
      } else if (ctx.message.location) {
        ctx.wizard.state.walkData.location = {
          latitude: ctx.message.location.latitude,
          longitude: ctx.message.location.longitude,
        };

        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ–ø—Ü–∏—è "–ì—É–ª—è—é –∑–¥–µ—Å—å", –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–µ—Ç–∫—É
        if (ctx.wizard.state.waitingForWalkHere) {
          ctx.wizard.state.walkData.locationDescription =
            "–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";
          ctx.wizard.state.waitingForWalkHere = false;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –æ–ø—Ü–∏—è "–í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –º–µ—Ç–∫—É
        if (ctx.wizard.state.waitingForMapLocation) {
          ctx.wizard.state.walkData.locationDescription = "–í—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ";
          ctx.wizard.state.waitingForMapLocation = false;
        }
      }

      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      ctx.reply(
        "–≠—Ç–æ —Ä–∞–∑–æ–≤–∞—è –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞?",
        Markup.inlineKeyboard([
          [
            { text: "–†–∞–∑–æ–≤–∞—è üîπ", callback_data: "type_single" },
            { text: "–†–µ–≥—É–ª—è—Ä–Ω–∞—è üîÑ", callback_data: "type_regular" },
          ],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ])
      );

      return ctx.wizard.next();
    }

    return;
  },

  // –®–∞–≥ 5: –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  async (ctx) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    if (ctx.callbackQuery && ctx.callbackQuery.data === "cancel") {
      ctx.answerCbQuery();
      ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
        reply_markup: getMainMenuKeyboard(),
      });
      return ctx.scene.leave();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏
    if (ctx.callbackQuery) {
      ctx.answerCbQuery();

      if (ctx.callbackQuery.data === "type_single") {
        ctx.wizard.state.walkData.type = "single";
      } else if (ctx.callbackQuery.data === "type_regular") {
        ctx.wizard.state.walkData.type = "regular";
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ scene.state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    ctx.scene.state.walkData = { ...ctx.wizard.state.walkData };
    ctx.scene.state.userData = userData;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
    let previewText = `
  üóì –ü—Ä–æ–≥—É–ª–∫–∞: ${ctx.wizard.state.walkData.date}, ${ctx.wizard.state.walkData.time}
  üìç –ú–µ—Å—Ç–æ: ${ctx.wizard.state.walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üîÑ –¢–∏–ø: ${ctx.wizard.state.walkData.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${userData.name}
  üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
  `;

    await ctx.reply("–ü—Ä–µ–≤—å—é –ø—Ä–æ–≥—É–ª–∫–∏:", Markup.removeKeyboard());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏ –∏–ª–∏ –±–µ–∑
    if (userData.dog.photoId) {
      await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: previewText,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    } else {
      await ctx.reply(previewText, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    }

    return ctx.wizard.next();
  },

  // –®–∞–≥ 6: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
  async (ctx) => {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ callback
    if (!ctx.callbackQuery) return;

    const action = ctx.callbackQuery.data;
    await ctx.answerCbQuery();

    if (action === "publish_walk") {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ scene.state
        const walkData = ctx.scene.state.walkData;
        const userData = ctx.scene.state.userData;

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—É–ª–∫—É –≤ –ë–î
        const walkRef = await db.collection("walks").add({
          date: walkData.date,
          time: walkData.time,
          locationText: walkData.locationText || null,
          location: walkData.location || null,
          type: walkData.type,
          organizer: {
            id: ctx.from.id,
            name: userData.name,
            username: ctx.from.username || null, // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ undefined
          },
          dog: {
            name: userData.dog.name,
            breed: userData.dog.breed,
            size: userData.dog.size,
            age: userData.dog.age,
            photoId: userData.dog.photoId,
          },
          participants: [],
          createdAt: new Date(),
        });

        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        try {
          await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
        }

        // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        await ctx.reply(
          "‚úÖ –ü—Ä–æ–≥—É–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.",
          { reply_markup: getMainMenuKeyboard() }
        );

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        notifyNearbyUsers(walkRef.id, userData, walkData);

        return ctx.scene.leave();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
          { reply_markup: getMainMenuKeyboard() }
        );
        return ctx.scene.leave();
      }
    } else if (action === "cancel_walk") {
      // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
      try {
        await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      await ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {
        reply_markup: getMainMenuKeyboard(),
      });

      return ctx.scene.leave();
    }
  }
);

// –°—Ü–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const editProfileMenuScene = new Scenes.BaseScene("editProfileMenu");

editProfileMenuScene.enter(async (ctx) => {
  await ctx.reply(
    "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
    Markup.inlineKeyboard([
      [
        { text: "üìù –ò–º—è", callback_data: "edit_name" },
        { text: "üèô –ì–æ—Ä–æ–¥", callback_data: "edit_city" },
      ],
      [
        { text: "üêï –ò–º—è —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_name" },
        { text: "üê∂ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_breed" },
      ],
      [
        { text: "üìè –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_size" },
        { text: "üóì –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_age" },
      ],
      [{ text: "üì∏ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_photo" }],
      [{ text: "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
    ])
  );
});

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
const editNameScene = new Scenes.WizardScene(
  "editName",
  // –®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
  (ctx) => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:", Markup.removeKeyboard());
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
  async (ctx) => {
    try {
      if (!ctx.message || !ctx.message.text) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:");
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      const newName = ctx.message.text;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
      if (!isValidString(newName)) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:");
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      }

      await db.collection("users").doc(String(ctx.from.id)).update({
        name: newName,
      });

      await ctx.reply("‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!");
      return ctx.scene.enter("editProfileMenu");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      return ctx.scene.enter("editProfileMenu");
    }
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
const editCityScene = new Scenes.WizardScene(
  "editCity",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
  (ctx) => {
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç",
      Markup.inlineKeyboard([
        ...POPULAR_CITIES.map((city) => [
          { text: city, callback_data: `city_${city}` },
        ]),
        [
          {
            text: "üìç –ú–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            callback_data: "current_location",
          },
        ],
        [
          {
            text: "üìå –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ",
            callback_data: "choose_map_location",
          },
        ],
        [{ text: "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
      ])
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "current_location") {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
          await ctx.reply(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
            Markup.keyboard([
              [
                Markup.button.locationRequest(
                  "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                ),
              ],
            ]).resize()
          );
          ctx.wizard.state.waitingForCurrentLocation = true;
          return;
        } else if (data === "choose_map_location") {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
          await ctx.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
            Markup.keyboard([
              [Markup.button.locationRequest("üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ")],
            ]).resize()
          );
          ctx.wizard.state.waitingForMapLocation = true;
          return;
        } else if (data.startsWith("city_")) {
          const city = data.replace("city_", "");
          await db.collection("users").doc(String(ctx.from.id)).update({
            city: city,
            // –û—á–∏—â–∞–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥
            location: null,
          });

          await ctx.reply("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", {
            reply_markup: { remove_keyboard: true },
          });
          return ctx.scene.enter("editProfileMenu");
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      else if (ctx.message && ctx.message.location) {
        let locationDescription = "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è";

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        if (ctx.wizard.state.waitingForCurrentLocation) {
          locationDescription = "–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";
          ctx.wizard.state.waitingForCurrentLocation = false;
        } else if (ctx.wizard.state.waitingForMapLocation) {
          locationDescription = "–í—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ";
          ctx.wizard.state.waitingForMapLocation = false;
        }

        await db
          .collection("users")
          .doc(String(ctx.from.id))
          .update({
            location: {
              latitude: ctx.message.location.latitude,
              longitude: ctx.message.location.longitude,
              description: locationDescription,
            },
            city: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
          });

        await ctx.reply("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", {
          reply_markup: { remove_keyboard: true },
        });
        return ctx.scene.enter("editProfileMenu");
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: { remove_keyboard: true },
          });
          return ctx.scene.enter("editProfileMenu");
        }

        await db.collection("users").doc(String(ctx.from.id)).update({
          city: ctx.message.text,
          // –û—á–∏—â–∞–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥
          location: null,
        });

        await ctx.reply("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", {
          reply_markup: { remove_keyboard: true },
        });
        return ctx.scene.enter("editProfileMenu");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
        reply_markup: { remove_keyboard: true },
      });
      return ctx.scene.enter("editProfileMenu");
    }
  }
);
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
const editDogNameScene = new Scenes.WizardScene(
  "editDogName",
  // –®–∞–≥ 1: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
  (ctx) => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å–æ–±–∞–∫–∏:", Markup.removeKeyboard());
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
  async (ctx) => {
    try {
      if (!ctx.message || !ctx.message.text) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±–∞–∫–∏ —Ç–µ–∫—Å—Ç–æ–º.");
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ
      }

      const newDogName = ctx.message.text;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏
      if (!isValidString(newDogName)) {
        await ctx.reply(
          "–ò–º—è —Å–æ–±–∞–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ 'null'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:"
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
      }

      await db.collection("users").doc(String(ctx.from.id)).update({
        "dog.name": newDogName,
      });

      await ctx.reply("‚úÖ –ò–º—è —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!");
      return ctx.scene.enter("editProfileMenu");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å–æ–±–∞–∫–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return ctx.scene.enter("editProfileMenu");
    }
  }
);
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏
const editDogBreedScene = new Scenes.WizardScene(
  "editDogBreed",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –ø–æ—Ä–æ–¥—ã
  (ctx) => {
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—Ä–æ–¥—É:",
      Markup.inlineKeyboard(
        POPULAR_BREEDS.map((breed) => [
          { text: breed, callback_data: `breed_${breed}` },
        ]).concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }]])
      )
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        } else if (data.startsWith("breed_")) {
          const breed = data.replace("breed_", "");

          if (breed === "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)") {
            await ctx.reply(
              "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏:",
              Markup.removeKeyboard()
            );
            ctx.wizard.state.waitingForCustomBreed = true;
            return;
          } else {
            await db.collection("users").doc(String(ctx.from.id)).update({
              "dog.breed": breed,
            });

            await ctx.reply("‚úÖ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!");
            return ctx.scene.enter("editProfileMenu");
          }
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–¥—ã
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        }

        if (ctx.wizard.state.waitingForCustomBreed) {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.breed": ctx.message.text,
          });

          await ctx.reply("‚úÖ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!");
        } else {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.breed": ctx.message.text,
          });

          await ctx.reply("‚úÖ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!");
        }

        return ctx.scene.enter("editProfileMenu");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return ctx.scene.enter("editProfileMenu");
    }
  }
);

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏
const editDogSizeScene = new Scenes.WizardScene(
  "editDogSize",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
  (ctx) => {
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏:",
      Markup.inlineKeyboard([
        [{ text: "–ú–∞–ª–µ–Ω—å–∫–∞—è", callback_data: "size_small" }],
        [{ text: "–°—Ä–µ–¥–Ω—è—è", callback_data: "size_medium" }],
        [{ text: "–ë–æ–ª—å—à–∞—è", callback_data: "size_large" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
      ])
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "size_small") {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.size": "small",
          });

          await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "size_medium") {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.size": "medium",
          });

          await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "size_large") {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.size": "large",
          });

          await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          return ctx.scene.enter("editProfileMenu");
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        }

        const size = Object.values(DOG_SIZES).find((size) =>
          size.text.includes(ctx.message.text)
        );

        if (size) {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.size": size.value,
          });

          await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
        } else {
          await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }

        return ctx.scene.enter("editProfileMenu");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return ctx.scene.enter("editProfileMenu");
    }
  }
);
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏
const editDogAgeScene = new Scenes.WizardScene(
  "editDogAge",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞
  (ctx) => {
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏:",
      Markup.inlineKeyboard([
        [{ text: DOG_AGES.PUPPY.text, callback_data: "age_puppy" }],
        [{ text: DOG_AGES.YOUNG.text, callback_data: "age_young" }],
        [{ text: DOG_AGES.ADULT.text, callback_data: "age_adult" }],
        [{ text: DOG_AGES.SENIOR.text, callback_data: "age_senior" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
      ])
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "age_puppy") {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.age": "puppy",
          });

          await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "age_young") {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.age": "young",
          });

          await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "age_adult") {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.age": "adult",
          });

          await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          return ctx.scene.enter("editProfileMenu");
        } else if (data === "age_senior") {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.age": "senior",
          });

          await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
          return ctx.scene.enter("editProfileMenu");
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        }

        const age = Object.values(DOG_AGES).find((age) =>
          age.text.includes(ctx.message.text)
        );

        if (age) {
          await db.collection("users").doc(String(ctx.from.id)).update({
            "dog.age": age.value,
          });

          await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
        } else {
          await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }

        return ctx.scene.enter("editProfileMenu");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return ctx.scene.enter("editProfileMenu");
    }
  }
);
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏
const editDogPhotoScene = new Scenes.WizardScene(
  "editDogPhoto",
  // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ
  (ctx) => {
    ctx.reply(
      "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ üì∏",
      Markup.inlineKeyboard([
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_edit" }],
      ])
    );
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
  async (ctx) => {
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel_edit") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
      else if (ctx.message && ctx.message.photo) {
        const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;

        await db.collection("users").doc(String(ctx.from.id)).update({
          "dog.photoId": photoId,
        });

        await ctx.reply("‚úÖ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!");
        return ctx.scene.enter("editProfileMenu");
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
          return ctx.scene.enter("editProfileMenu");
        } else {
          await ctx.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
          );
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      return ctx.scene.enter("editProfileMenu");
    }
  }
);
// –°—Ü–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
const editWalkMenuScene = new Scenes.BaseScene("editWalkMenu");

editWalkMenuScene.enter(async (ctx) => {
  try {
    console.log("–í—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏");

    // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
    if (!ctx.session) ctx.session = {};
    const walkId = ctx.session.editWalkId;

    console.log(`–ü–æ–ª—É—á–∏–ª–∏ ID –∏–∑ —Å–µ—Å—Å–∏–∏: ${walkId}`);

    if (!walkId) {
      console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏!");
      ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏", {
        reply_markup: getMainMenuKeyboard(),
      });
      return ctx.scene.leave();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Å—Ü–µ–Ω–µ
    ctx.scene.state.walkId = walkId;

    await ctx.reply(
      "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
      Markup.inlineKeyboard([
        [
          { text: "üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data: "edit_date_time" },
          { text: "üìç –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏", callback_data: "edit_location" },
        ],
        [{ text: "üîÑ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏", callback_data: "edit_type" }],
        [{ text: "‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data: "cancel_edit" }],
      ])
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", { reply_markup: getMainMenuKeyboard() });
    return ctx.scene.leave();
  }
});

// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥—É–ª–∫–∏
const editWalkDateTimeScene = new Scenes.WizardScene(
  "editWalkDateTime",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –¥–∞—Ç—ã
  (ctx) => {
    try {
      console.log("–®–∞–≥ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏");

      // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
      if (!ctx.session) ctx.session = {};
      const walkId = ctx.session.editWalkId;

      if (!walkId) {
        console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏", {
          reply_markup: getMainMenuKeyboard(),
        });
        return ctx.scene.leave();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ state
      ctx.wizard.state.walkId = walkId;
      ctx.wizard.state.walkData = {};

      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø—Ä–æ–≥—É–ª–∫–∏:",
        Markup.inlineKeyboard([
          [
            { text: "–°–µ–≥–æ–¥–Ω—è", callback_data: "date_today" },
            { text: "–ó–∞–≤—Ç—Ä–∞", callback_data: "date_tomorrow" },
          ],
          [{ text: "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data: "date_custom" }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ])
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", { reply_markup: getMainMenuKeyboard() });
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  (ctx) => {
    try {
      console.log("–®–∞–≥ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏");

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        ctx.answerCbQuery();

        if (data === "cancel") {
          ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        } else if (data === "date_today") {
          ctx.wizard.state.walkData.date = moment().format("DD.MM.YYYY");
        } else if (data === "date_tomorrow") {
          ctx.wizard.state.walkData.date = moment()
            .add(1, "days")
            .format("DD.MM.YYYY");
        } else if (data === "date_custom") {
          ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:");
          ctx.wizard.state.customDate = true;
          return;
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
      else if (ctx.message && ctx.message.text) {
        if (ctx.wizard.state.customDate) {
          if (!isValidDate(ctx.message.text)) {
            ctx.reply(
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            );
            return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
          }
          ctx.wizard.state.walkData.date = ctx.message.text;
          ctx.wizard.state.customDate = false;
        }
      }

      // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
      if (ctx.wizard.state.walkData.date) {
        ctx.reply(
          "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
          Markup.inlineKeyboard(
            [
              "6",
              "7",
              "8",
              "9",
              "10",
              "11",
              "12",
              "13",
              "14",
              "15",
              "16",
              "17",
              "18",
              "19",
              "20",
              "21",
              "22",
              "23",
            ]
              .map((h) => [{ text: h, callback_data: `hour_${h}` }])
              .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
          )
        );
      }

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", { reply_markup: getMainMenuKeyboard() });
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 3: –í—ã–±–æ—Ä —á–∞—Å–∞
  (ctx) => {
    try {
      console.log("–®–∞–≥ 3 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å)");

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        ctx.answerCbQuery();

        if (data === "cancel") {
          ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        } else if (data.startsWith("hour_")) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å
          ctx.wizard.state.walkData.hour = data.replace("hour_", "");

          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∏–Ω—É—Ç
          ctx.reply(
            `–í—ã–±—Ä–∞–Ω–æ: ${ctx.wizard.state.walkData.hour} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
            Markup.inlineKeyboard(
              [
                "00",
                "05",
                "10",
                "15",
                "20",
                "25",
                "30",
                "35",
                "40",
                "45",
                "50",
                "55",
              ]
                .map((m) => [{ text: m, callback_data: `minute_${m}` }])
                .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
            )
          );
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —á–∞—Å–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å
        ctx.wizard.state.walkData.hour = ctx.message.text;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–∏–Ω—É—Ç
        ctx.reply(
          `–í—ã–±—Ä–∞–Ω–æ: ${ctx.wizard.state.walkData.hour} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
          Markup.inlineKeyboard(
            [
              "00",
              "05",
              "10",
              "15",
              "20",
              "25",
              "30",
              "35",
              "40",
              "45",
              "50",
              "55",
            ]
              .map((m) => [{ text: m, callback_data: `minute_${m}` }])
              .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
          )
        );
      }

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 3 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", { reply_markup: getMainMenuKeyboard() });
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 4: –í—ã–±–æ—Ä –º–∏–Ω—É—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  async (ctx) => {
    try {
      console.log("–®–∞–≥ 4 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω—É—Ç—ã)");

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        ctx.answerCbQuery();

        if (data === "cancel") {
          ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        } else if (data.startsWith("minute_")) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω—É—Ç—ã
          const minute = data.replace("minute_", "");

          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
          const walkId = ctx.wizard.state.walkId;
          const newDate = ctx.wizard.state.walkData.date;
          const newTime = `${ctx.wizard.state.walkData.hour}:${minute}`;

          console.log(
            `–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è ${walkId}: ${newDate}, ${newTime}`
          );

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ
          const walkDoc = await db.collection("walks").doc(walkId).get();
          if (!walkDoc.exists) {
            ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", {
              reply_markup: getMainMenuKeyboard(),
            });
            return ctx.scene.leave();
          }

          const walkData = walkDoc.data();

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          await db.collection("walks").doc(walkId).update({
            date: newDate,
            time: newTime,
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
          if (walkData.participants && walkData.participants.length > 0) {
            const message = `
  üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏:
  üóì –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${newDate}, ${newTime}
  üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  `;
            await notifyWalkParticipants(walkData.participants, message);
          }

          ctx.reply(
            `‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: ${newDate}, ${newTime}`,
            { reply_markup: getMainMenuKeyboard() }
          );

          return ctx.scene.leave();
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–∏–Ω—É—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è
        const walkId = ctx.wizard.state.walkId;
        const newDate = ctx.wizard.state.walkData.date;
        const newTime = `${ctx.wizard.state.walkData.hour}:${ctx.message.text}`;

        console.log(
          `–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è ${walkId}: ${newDate}, ${newTime}`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await db.collection("walks").doc(walkId).update({
          date: newDate,
          time: newTime,
        });

        ctx.reply(
          `‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: ${newDate}, ${newTime}`,
          { reply_markup: getMainMenuKeyboard() }
        );

        return ctx.scene.leave();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 4 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏", {
        reply_markup: getMainMenuKeyboard(),
      });
      return ctx.scene.leave();
    }
  }
);
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
const editWalkLocationScene = new Scenes.WizardScene(
  "editWalkLocation",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
  (ctx) => {
    try {
      console.log("–®–∞–≥ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞");

      // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
      if (!ctx.session) ctx.session = {};
      const walkId = ctx.session.editWalkId;

      if (!walkId) {
        console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏", {
          reply_markup: getMainMenuKeyboard(),
        });
        return ctx.scene.leave();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ state
      ctx.wizard.state.walkId = walkId;

      ctx.reply(
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:",
        Markup.inlineKeyboard([
          [
            {
              text: "üü¢ –ú–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
              callback_data: "current_location_walk",
            },
          ],
          [{ text: "üìç –í—ã–±—Ä–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data: "choose_map_walk" }],
          [{ text: "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data: "enter_location_text" }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ])
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", { reply_markup: getMainMenuKeyboard() });
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 2: –í–≤–æ–¥ –º–µ—Å—Ç–∞
  async (ctx) => {
    try {
      console.log("–®–∞–≥ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞");

      const walkId = ctx.wizard.state.walkId;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        await ctx.answerCbQuery();

        if (data === "cancel") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        } else if (data === "current_location_walk") {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
          await ctx.reply(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
            Markup.keyboard([
              [
                Markup.button.locationRequest(
                  "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                ),
              ],
            ]).resize()
          );
          ctx.wizard.state.waitingForCurrentLocation = true;
          return;
        } else if (data === "choose_map_walk") {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
          await ctx.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
            Markup.keyboard([
              [Markup.button.locationRequest("üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ")],
            ]).resize()
          );
          ctx.wizard.state.waitingForMapLocation = true;
          return;
        } else if (data === "enter_location_text") {
          await ctx.reply("–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:", Markup.removeKeyboard());
          ctx.wizard.state.waitingForLocationText = true;
          return;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      else if (ctx.message && ctx.message.location) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const walkDoc = await db.collection("walks").doc(walkId).get();
        if (!walkDoc.exists) {
          await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        }

        const walkData = walkDoc.data();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
        let locationDescription = "–û–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";

        if (ctx.wizard.state.waitingForCurrentLocation) {
          locationDescription = "–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞";
          ctx.wizard.state.waitingForCurrentLocation = false;
        } else if (ctx.wizard.state.waitingForMapLocation) {
          locationDescription = "–ú–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ";
          ctx.wizard.state.waitingForMapLocation = false;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db
          .collection("walks")
          .doc(walkId)
          .update({
            location: {
              latitude: ctx.message.location.latitude,
              longitude: ctx.message.location.longitude,
              description: locationDescription,
            },
            locationText: null,
          });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        if (walkData.participants && walkData.participants.length > 0) {
          const message = `
  üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:
  üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
  üìç –ú–µ—Å—Ç–æ: ${locationDescription} (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∏)
  `;
          await notifyWalkParticipants(walkData.participants, message);
        }

        await ctx.reply("‚úÖ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", {
          reply_markup: getMainMenuKeyboard(),
        });
        return ctx.scene.leave();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞
      else if (
        ctx.message &&
        ctx.message.text &&
        ctx.wizard.state.waitingForLocationText
      ) {
        if (!isValidString(ctx.message.text)) {
          await ctx.reply(
            "–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ 'null'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
          );
          return;
        }
        const newLocation = ctx.message.text;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const walkDoc = await db.collection("walks").doc(walkId).get();
        if (!walkDoc.exists) {
          await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        }

        const walkData = walkDoc.data();

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.collection("walks").doc(walkId).update({
          locationText: newLocation,
          location: null,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        if (walkData.participants && walkData.participants.length > 0) {
          const message = `
  üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏:
  üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
  üìç –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ: ${newLocation}
  `;
          await notifyWalkParticipants(walkData.participants, message);
        }

        await ctx.reply("‚úÖ –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", {
          reply_markup: getMainMenuKeyboard(),
        });
        return ctx.scene.leave();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        } else {
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–ª–∏ –µ–≥–æ, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ü–∏—é
          await ctx.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
          );
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", {
        reply_markup: getMainMenuKeyboard(),
      });
      return ctx.scene.leave();
    }
  }
);
// –°—Ü–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏
const editWalkTypeScene = new Scenes.WizardScene(
  "editWalkType",
  // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞
  (ctx) => {
    try {
      console.log("–®–∞–≥ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞");

      // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏
      if (!ctx.session) ctx.session = {};
      const walkId = ctx.session.editWalkId;

      if (!walkId) {
        console.error("ID –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—É–ª–∫–∏", {
          reply_markup: getMainMenuKeyboard(),
        });
        return ctx.scene.leave();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ state
      ctx.wizard.state.walkId = walkId;

      ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏:",
        Markup.inlineKeyboard([
          [
            { text: "–†–∞–∑–æ–≤–∞—è üîπ", callback_data: "type_single" },
            { text: "–†–µ–≥—É–ª—è—Ä–Ω–∞—è üîÑ", callback_data: "type_regular" },
          ],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
        ])
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 1 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", { reply_markup: getMainMenuKeyboard() });
      return ctx.scene.leave();
    }
  },

  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞
  async (ctx) => {
    try {
      console.log("–®–∞–≥ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞");

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
      if (ctx.callbackQuery) {
        const data = ctx.callbackQuery.data;
        ctx.answerCbQuery();

        if (data === "cancel") {
          ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        } else if (data === "type_single" || data === "type_regular") {
          const walkId = ctx.wizard.state.walkId;
          const newType = data === "type_single" ? "single" : "regular";
          const typeText = data === "type_single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è";

          console.log(`–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –¥–ª—è ${walkId} –Ω–∞: ${newType}`);

          await db.collection("walks").doc(walkId).update({
            type: newType,
          });

          ctx.reply(`‚úÖ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${typeText}"`, {
            reply_markup: getMainMenuKeyboard(),
          });

          return ctx.scene.leave();
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      else if (ctx.message && ctx.message.text) {
        if (ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") {
          ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
            reply_markup: getMainMenuKeyboard(),
          });
          return ctx.scene.leave();
        }

        const walkId = ctx.wizard.state.walkId;
        const newType = ctx.message.text.includes("–†–∞–∑–æ–≤–∞—è")
          ? "single"
          : "regular";

        console.log(`–û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –¥–ª—è ${walkId} –Ω–∞: ${newType}`);

        await db.collection("walks").doc(walkId).update({
          type: newType,
        });

        ctx.reply(`‚úÖ –¢–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${ctx.message.text}"`, {
          reply_markup: getMainMenuKeyboard(),
        });

        return ctx.scene.leave();
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ 2 —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞:", error);
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", { reply_markup: getMainMenuKeyboard() });
      return ctx.scene.leave();
    }
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏
function getDogSizeText(size) {
  const sizeObj = Object.values(DOG_SIZES).find((s) => s.value === size);
  return sizeObj ? sizeObj.text.split(" ")[0] : "–°—Ä–µ–¥–Ω—è—è";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–º (—Ñ–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö

  const dLat = ((lat2 - lat1) * Math.PI) / 180;
  const dLon = ((lon2 - lon1) * Math.PI) / 180;

  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos((lat1 * Math.PI) / 180) *
      Math.cos((lat2 * Math.PI) / 180) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö

  return distance;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function findWalksNearby(ctx, latitude, longitude, maxDistance = 3) {
  try {
    console.log(
      `–ü–æ–∏—Å–∫ –ø—Ä–æ–≥—É–ª–æ–∫ —Ä—è–¥–æ–º —Å (${latitude}, ${longitude}) –≤ —Ä–∞–¥–∏—É—Å–µ ${maxDistance} –∫–º`
    );

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserId = ctx.from.id;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
    const walksSnapshot = await db.collection("walks").get();

    if (walksSnapshot.empty) {
      await ctx.reply("–ü—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
          ],
        },
      });
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    const nearbyWalks = [];

    for (const walkDoc of walksSnapshot.docs) {
      const walk = walkDoc.data();

      // –ï—Å–ª–∏ —É –ø—Ä–æ–≥—É–ª–∫–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (walk.location && walk.location.latitude && walk.location.longitude) {
        const distance = calculateDistance(
          latitude,
          longitude,
          walk.location.latitude,
          walk.location.longitude
        );

        // –ï—Å–ª–∏ –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ
        if (distance <= maxDistance) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–∏
          const isOwn = walk.organizer.id == currentUserId;

          nearbyWalks.push({
            id: walkDoc.id,
            ...walk,
            distance: distance, // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            isOwn: isOwn, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
          });
        }
      }
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if (nearbyWalks.length === 0) {
      await ctx.reply(`–ü—Ä–æ–≥—É–ª–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ ${maxDistance} –∫–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
          ],
        },
      });
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é (–æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –¥–∞–ª—å–Ω–∏–º)
    nearbyWalks.sort((a, b) => a.distance - b.distance);

    // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–∫–∞—Ö
    await ctx.reply(`–ù–∞–π–¥–µ–Ω–æ ${nearbyWalks.length} –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–∫
    for (const walk of nearbyWalks) {
      const distanceText =
        walk.distance < 1
          ? `${Math.round(walk.distance * 1000)} –º`
          : `${walk.distance.toFixed(1)} –∫–º`;

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫
      const ownLabel = walk.isOwn ? "üåü –ú–û–Ø –ü–†–û–ì–£–õ–ö–ê\n" : "";

      const walkPreview = `${ownLabel}üïí ${walk.date}, ${walk.time}
  üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"} (${distanceText} –æ—Ç –≤–∞—Å)
  üêï –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants ? walk.participants.length + 1 : 1}
  üë§ ${walk.dog.name} (${walk.organizer.name}) ${getDogAgeText(walk.dog.age)}
  ${walk.organizer.username ? "@" + walk.organizer.username : ""}`;

      await ctx.reply(walkPreview, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data: `walk_details_${walk.id}` }],
          ],
        },
      });
    }

    await ctx.reply({
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
async function findWalksInCity(ctx, city) {
  try {
    console.log(`–ü–æ–∏—Å–∫ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ: ${city}`);

    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserId = ctx.from.id;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
    const walksSnapshot = await db.collection("walks").get();

    if (walksSnapshot.empty) {
      await ctx.reply("–ü—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
          ],
        },
      });
      return;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
    const normalizedCity = city.toLowerCase();

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É
    const cityWalks = [];

    for (const walkDoc of walksSnapshot.docs) {
      const walk = walkDoc.data();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞
      const organizerDoc = await db
        .collection("users")
        .doc(String(walk.organizer.id))
        .get();

      if (organizerDoc.exists) {
        const organizerData = organizerDoc.data();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        if (
          organizerData.city &&
          organizerData.city.toLowerCase() === normalizedCity
        ) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–∏
          const isOwn = walk.organizer.id == currentUserId;

          cityWalks.push({
            id: walkDoc.id,
            ...walk,
            isOwn: isOwn, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
          });
        }
      }
    }

    // –ï—Å–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –ø—Ä–æ–≥—É–ª–æ–∫
    if (cityWalks.length === 0) {
      await ctx.reply(
        `–í –≥–æ—Ä–æ–¥–µ ${city} –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫. üòî\n\n` +
          `üí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ —Å–æ—Å–µ–¥–µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ DogMeet, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ –≥—É–ª—è—Ç—å —Å —Å–æ–±–∞–∫–∞–º–∏!\n\n` +
          `üêï –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø—Ä–æ–≥—É–ª–∫—É, –∏ –¥—Ä—É–≥–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã —Å–æ–±–∞–∫ —Å–º–æ–≥—É—Ç –∫ –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
              [
                {
                  text: "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π",
                  callback_data: "invite_friends",
                },
              ],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
            ],
          },
        }
      );
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
    cityWalks.sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
      const dateA = a.date.split(".").reverse().join("-");
      const dateB = b.date.split(".").reverse().join("-");

      if (dateA !== dateB) {
        return dateA.localeCompare(dateB);
      }

      // –ï—Å–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è
      return a.time.localeCompare(b.time);
    });

    // –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏
    await ctx.reply(`–ù–∞–π–¥–µ–Ω–æ ${cityWalks.length} –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ ${city}:`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–∫
    for (const walk of cityWalks) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫
      const ownLabel = walk.isOwn ? "üåü –ú–û–Ø –ü–†–û–ì–£–õ–ö–ê\n" : "";

      const walkPreview = `${ownLabel}üïí ${walk.date}, ${walk.time}
  üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üêï –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants ? walk.participants.length + 1 : 1}
  üë§ ${walk.dog.name} (${walk.organizer.name}) ${getDogAgeText(walk.dog.age)}
  ${walk.organizer.username ? "@" + walk.organizer.username : ""}`;

      await ctx.reply(walkPreview, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data: `walk_details_${walk.id}` }],
          ],
        },
      });
    }

    await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è:", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
}
async function getLocationCity(latitude, longitude) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenStreetMap Nominatim API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    const response = await fetch(
      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=10&addressdetails=1`,
      {
        headers: {
          "User-Agent": "DogMeetBot/1.0", // –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å User-Agent –¥–ª—è Nominatim API
        },
      }
    );

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status}`);
    }

    const data = await response.json();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    // Nominatim –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: city, town, village –∏ —Ç.–¥.
    const city =
      data.address.city ||
      data.address.town ||
      data.address.village ||
      data.address.suburb ||
      data.address.county ||
      data.address.state;

    return city || null;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:", error);
    return null; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω–µ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–∞–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
async function notifyPreviousParticipants(organizerId, walkId, walkData) {
  try {
    console.log(`–ü–æ–∏—Å–∫ –ø—Ä–æ—à–ª—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞: ${organizerId}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º organizerId –≤ —á–∏—Å–ª–æ (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞)
    const orgId =
      typeof organizerId === "string" ? parseInt(organizerId) : organizerId;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏, –≥–¥–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
    // –í–∞–∂–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ –∫–∞–∫ —á–∏—Å–ª–æ
    const walksSnapshot = await db.collection("walks").get();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–µ
    const organizer = (
      await db.collection("users").doc(String(organizerId)).get()
    ).data();

    if (!organizer) {
      console.error(`–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —Å ID: ${organizerId}`);
      return;
    }

    // –ù–∞–±–æ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const previousParticipantsIds = new Set();

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –∏—â–µ–º —Ç–µ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
    for (const walkDoc of walksSnapshot.docs) {
      const walk = walkDoc.data();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–∏
      // ‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–∞ –∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
      const isOrganizer =
        walk.organizer &&
        (walk.organizer.id == organizerId || // –ù–µ—Å—Ç—Ä–æ–≥–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
          String(walk.organizer.id) === String(organizerId));

      if (!isOrganizer || walkDoc.id === walkId) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ –µ–≥–æ –ø—Ä–æ–≥—É–ª–∫–∏ –∏ —Ç–µ–∫—É—â—É—é

      console.log(`–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ—à–ª–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞: ${walkDoc.id}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      if (walk.participants && walk.participants.length > 0) {
        console.log(
          `–í –ø—Ä–æ–≥—É–ª–∫–µ ${walkDoc.id} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants.length}`
        );

        for (const participant of walk.participants) {
          if (!participant || !participant.id) continue;

          // ‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–∞ –∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—Ç—Ä–æ–≥–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
          if (participant.id != organizerId) {
            console.log(`–î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participant.id}`);
            previousParticipantsIds.add(participant.id);
          }
        }
      }
    }

    console.log(
      `–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${previousParticipantsIds.size}`
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    if (previousParticipantsIds.size > 0) {
      const notificationText = `
  üîî –ù–û–í–ê–Ø –ü–†–û–ì–£–õ–ö–ê –û–¢ –ó–ù–ê–ö–û–ú–û–ì–û –•–û–ó–Ø–ò–ù–ê!
  
  üëã –†–∞–Ω–µ–µ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ —Å ${organizer.name} –∏ ${organizer.dog.name}! 
  –•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞?
  
  üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
  üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üîÑ –¢–∏–ø: ${walkData.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
  `;

      let sentCount = 0;

      for (const participantId of previousParticipantsIds) {
        try {
          await bot.telegram.sendMessage(participantId, notificationText, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                    callback_data: `join_walk_${walkId}`,
                  },
                ],
                [
                  {
                    text: "üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                    callback_data: `walk_details_${walkId}`,
                  },
                ],
                [
                  {
                    text: "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data: "dismiss_notification",
                  },
                ],
              ],
            },
          });
          sentCount++;
          console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${participantId}`);
        } catch (error) {
          console.error(
            `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É ${participantId}:`,
            error
          );
        }
      }

      // –°–æ–æ–±—â–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
      if (sentCount > 0) {
        await bot.telegram.sendMessage(
          organizerId,
          `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω–µ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–ª–∏—Å—å –∫ –≤–∞—à–∏–º –ø—Ä–æ–≥—É–ª–∫–∞–º.`
        );
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", error);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏
function getDogAgeText(age) {
  const ageObj = Object.values(DOG_AGES).find((a) => a.value === age);
  return ageObj ? ageObj.text.split(" ")[0] : "–í–∑—Ä–æ—Å–ª–∞—è";
}

function addCancelHandler(ctx) {
  if (
    (ctx.message && ctx.message.text === "‚ùå –û—Ç–º–µ–Ω–∞") ||
    (ctx.callbackQuery && ctx.callbackQuery.data === "cancel")
  ) {
    ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", getMainMenuKeyboard());
    if (ctx.callbackQuery) {
      ctx.answerCbQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
    }
    return ctx.scene.leave();
  }
  return false;
}

function getWalkFiltersKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üîπ –ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º", callback_data: "walks_nearby" }],
      [
        { text: "üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data: "walks_today" },
        { text: "üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data: "walks_tomorrow" },
        { text: "üìÖ –í—Å–µ –¥–∞—Ç—ã", callback_data: "walks_all_dates" },
      ],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
    ],
  };
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω
const stage = new Scenes.Stage([
  registerScene,
  createWalkScene,
  editProfileMenuScene,
  editNameScene,
  editCityScene,
  editDogNameScene,
  editDogBreedScene,
  editDogSizeScene,
  editDogAgeScene,
  editDogPhotoScene,
  editWalkMenuScene,
  editWalkDateTimeScene,
  editWalkLocationScene,
  editWalkTypeScene,
]);

bot.use(stage.middleware());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

  if (userDoc.exists) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${userDoc.data().name || ctx.from.first_name}! –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ DogMeet üê∂`,
      {
        reply_markup: getMainMenuKeyboard(),
      }
    );
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    const name = ctx.from.first_name || "–≥–æ—Å—Ç—å";
    ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${name}! DogMeet –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å —Å–æ–±–∞–∫–æ–π üê∂.\n` +
        "üîπ –ù–∞—Ö–æ–¥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ —Ä—è–¥–æ–º.\n" +
        "üîπ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.\n" +
        "üîπ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.",
      Markup.inlineKeyboard([
        [Markup.button.callback("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "create_profile")],
      ])
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.action("create_profile", (ctx) => {
  ctx.scene.enter("register");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
bot.action("back_to_city_selection", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:",
    Markup.inlineKeyboard([
      ...POPULAR_CITIES.map((city) => [
        { text: city, callback_data: `city_${city}` },
      ]),
      [
        {
          text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
          callback_data: "send_location_reg",
        },
      ],
    ])
  );
});

// –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ –∫–æ–Ω—Ü–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("cancel_walk", async (ctx) => {
  try {
    await ctx.answerCbQuery("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ");

    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    try {
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
    }

    await ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", {
      reply_markup: getMainMenuKeyboard(),
    });

    return ctx.scene.leave();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
    return ctx.scene.leave();
  }
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenuKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "find_walk" },
        { text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" },
      ],
      [
        { text: "üìã –ú–æ–∏ –ø—Ä–æ–≥—É–ª–∫–∏", callback_data: "my_walks" },
        { text: "üë• –ì–¥–µ —è —É—á–∞—Å—Ç–≤—É—é", callback_data: "my_participations" },
      ],
      [{ text: "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
    ],
  };
}

// –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫
function getWalkFiltersKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üîπ –ü—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º", callback_data: "walks_nearby" }],
      [
        { text: "üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data: "walks_today" },
        { text: "üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data: "walks_tomorrow" },
        { text: "üìÖ –í—Å–µ –¥–∞—Ç—ã", callback_data: "walks_all_dates" },
      ],
      [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
    ],
  };
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action("find_walk", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", {
    reply_markup: getWalkFiltersKeyboard(),
  });
});

bot.action("create_walk", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("createWalk");
});

bot.action("my_walks", async (ctx) => {
  await ctx.answerCbQuery();
  const walksSnapshot = await db
    .collection("walks")
    .where("organizer.id", "==", ctx.from.id)
    .get();

  if (walksSnapshot.empty) {
    ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫.", {
      reply_markup: getMainMenuKeyboard(),
    });
    return;
  }

  await ctx.reply("–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏:");

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–∫
  await showWalksList(ctx, walksSnapshot.docs);

  await ctx.reply({ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main_menu" });
});

bot.action("my_profile", async (ctx) => {
  // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–ª–∞—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback –∑–∞–ø—Ä–æ—Å:", error.message);
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –¥–∞–∂–µ –µ—Å–ª–∏ answerCbQuery –Ω–µ —É–¥–∞–ª—Å—è
  }

  // –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  try {
    await showProfile(ctx);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      {
        reply_markup: getMainMenuKeyboard(),
      }
    );
  }
});

bot.action("back_to_main_menu", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", { reply_markup: getMainMenuKeyboard() });
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
bot.action("edit_profile_menu", async (ctx) => {
  await ctx.answerCbQuery();

  await ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üìù –ò–º—è", callback_data: "edit_name" },
          { text: "üèô –ì–æ—Ä–æ–¥", callback_data: "edit_city" },
        ],
        [
          { text: "üêï –ò–º—è —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_name" },
          { text: "üê∂ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_breed" },
        ],
        [
          { text: "üìè –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_size" },
          { text: "üóì –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_age" },
        ],
        [{ text: "üì∏ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_photo" }],
        [{ text: "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ
bot.action("search_in_my_city", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

    if (!userDoc.exists || !userDoc.data().city) {
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        {
          reply_markup: {
            inline_keyboard: [
              ...POPULAR_CITIES.map((city) => [
                { text: city, callback_data: `search_city_${city}` },
              ]),
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
            ],
          },
        }
      );
      return;
    }

    const city = userDoc.data().city;
    await findWalksInCity(ctx, city);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
bot.action("update_user_location", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    await ctx.reply(
      "–ß—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:\n\n" +
        "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.",
      {
        reply_markup: {
          keyboard: [
            [
              {
                text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                request_location: true,
              },
            ],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    if (!ctx.session) ctx.session = {};
    ctx.session.waitingLocationForNearbyWalks = true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
bot.action("select_city_for_search", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫:", {
      reply_markup: {
        inline_keyboard: [
          ...POPULAR_CITIES.map((city) => [
            { text: city, callback_data: `search_city_${city}` },
          ]),
          [{ text: "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data: "other_city_for_search" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
        ],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
bot.action("other_city_for_search", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫:");

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    if (!ctx.session) ctx.session = {};
    ctx.session.waitingForCityInput = true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–æ—Ä–æ–¥–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
bot.action(/search_city_(.+)/, async (ctx) => {
  try {
    const city = ctx.match[1];
    await ctx.answerCbQuery();

    // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    await findWalksInCity(ctx, city);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –≤ –≥–æ—Ä–æ–¥–µ:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π
bot.action("invite_friends", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const inviteText =
      `üê∂ –ü—Ä–∏–≤–µ—Ç! –Ø –∏—Å–ø–æ–ª—å–∑—É—é DogMeet –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫–∏ —Å —Å–æ–±–∞–∫–æ–π.\n\n` +
      `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è, —á—Ç–æ–±—ã:\n` +
      `‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ —Ä—è–¥–æ–º\n` +
      `‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º\n` +
      `‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º —Å–æ–±–∞—á–Ω–∏–∫–∞–º\n\n` +
      `–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ @DogMeetBot –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!`;

    await ctx.reply(
      "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏—Ö –≤ DogMeet:",
      {
        reply_markup: getMainMenuKeyboard(),
      }
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    await ctx.reply(inviteText);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞)
bot.on("text", async (ctx) => {
  try {
    // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if (ctx.session && ctx.session.waitingForCityInput) {
      const city = ctx.message.text.trim();

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞
      if (!isValidString(city)) {
        await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:");
        return;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
      ctx.session.waitingForCityInput = false;

      // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
      await findWalksInCity(ctx, city);
    }
    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–≥—É—Ç –±—ã—Ç—å –∑–¥–µ—Å—å
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫
bot.action("walks_nearby", async (ctx) => {
  await ctx.answerCbQuery();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

    if (!userDoc.exists) {
      await ctx.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "create_profile" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
          ],
        },
      });
      return;
    }

    const userData = userDoc.data();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    if (
      userData.location &&
      userData.location.latitude &&
      userData.location.longitude
    ) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
      await ctx.reply("–ò—â–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞—à–µ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–µ–π...");
      await findWalksNearby(
        ctx,
        userData.location.latitude,
        userData.location.longitude
      );
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥
    else if (userData.city) {
      await ctx.reply(
        `–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –Ω–æ –µ—Å—Ç—å –≥–æ—Ä–æ–¥ (${userData.city}).\n\n` +
          `üí° <b>–°–æ–≤–µ—Ç</b>: –î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –∏–º–µ–Ω–Ω–æ —Ä—è–¥–æ–º —Å –≤–∞–º–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç:\n` +
          `‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–µ—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n` +
          `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—É–ª–∫–∞—Ö –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n` +
          `‚Ä¢ –í–∏–¥–µ—Ç—å —Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏\n\n` +
          `–ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                  callback_data: "update_user_location",
                },
              ],
              [
                {
                  text: "üèô –ò—Å–∫–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –º–æ—ë–º –≥–æ—Ä–æ–¥–µ",
                  callback_data: "search_in_my_city",
                },
              ],
            ],
          },
        }
      );
    }
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –Ω–∏ –≥–æ—Ä–æ–¥–∞
    else {
      await ctx.reply(
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n–ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
                  callback_data: "send_location_for_search",
                },
              ],
              [
                {
                  text: "üèô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥",
                  callback_data: "select_city_for_search",
                },
              ],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
            ],
          },
        }
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≥—É–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    });
  }
});
bot.action("walks_today", async (ctx) => {
  await ctx.answerCbQuery();

  const today = moment().format("DD.MM.YYYY");
  const walksSnapshot = await db
    .collection("walks")
    .where("date", "==", today)
    .get();

  if (walksSnapshot.empty) {
    await ctx.reply("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
        ],
      },
    });
    return;
  }

  await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:");

  await showWalksList(ctx, walksSnapshot.docs);

  await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è:", {
    reply_markup: {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    },
  });
});

bot.action("walks_tomorrow", async (ctx) => {
  await ctx.answerCbQuery();

  const tomorrow = moment().add(1, "days").format("DD.MM.YYYY");
  const walksSnapshot = await db
    .collection("walks")
    .where("date", "==", tomorrow)
    .get();

  if (walksSnapshot.empty) {
    await ctx.reply("–ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
        ],
      },
    });
    return;
  }

  await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:");

  await showWalksList(ctx, walksSnapshot.docs);

  await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è:", {
    reply_markup: {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    },
  });
});

bot.action("walks_all_dates", async (ctx) => {
  await ctx.answerCbQuery();

  const walksSnapshot = await db.collection("walks").get();

  if (walksSnapshot.empty) {
    await ctx.reply("–ü—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
        ],
      },
    });
    return;
  }

  await ctx.reply("–í—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏:");

  await showWalksList(ctx, walksSnapshot.docs);

  await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è:", {
    reply_markup: {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    },
  });
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è showProfile
async function showProfile(ctx) {
  try {
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();

    if (!userDoc.exists) {
      return await ctx.reply(
        "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "create_profile" }],
            ],
          },
        }
      );
    }

    const userData = userDoc.data();

    const profileText = `
        üë§ –ò–º—è: ${userData.name} ${userData.username ? "@" + userData.username : ""}
        üìç –ì–æ—Ä–æ–¥: ${userData.city}
        üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
        `;

    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    if (userData.dog && userData.dog.photoId) {
      await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: profileText,
      });
    } else {
      await ctx.reply(profileText);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
              callback_data: "edit_profile_menu",
            },
          ],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
        ],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    throw error; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫
async function showWalksList(ctx, walkDocs) {
  for (const walkDoc of walkDocs) {
    const walk = walkDoc.data();

    const walkPreview = `
    üïí ${walk.date}, ${walk.time}
    üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
    üêï –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants.length + 1}
    üë§ ${walk.dog.name} (${walk.organizer.name}) ${getDogAgeText(walk.dog.age)}
    ${walk.organizer.username ? "@" + walk.organizer.username : ""}
    `;

    await ctx.reply(
      walkPreview,
      Markup.inlineKeyboard([
        [Markup.button.callback("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", `walk_details_${walkDoc.id}`)],
      ])
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function isValidString(str) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è, –Ω–µ "null", "undefined", –∏ —Ç.–¥.
  return (
    str &&
    typeof str === "string" &&
    str.trim() !== "" &&
    str.toLowerCase() !== "null" &&
    str.toLowerCase() !== "undefined"
  );
}

function isValidDate(dateStr) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì
  const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;
  if (!dateRegex.test(dateStr)) {
    return false;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
  const [day, month, year] = dateStr.split(".").map(Number);
  const date = new Date(year, month - 1, day);

  return (
    date.getFullYear() === year &&
    date.getMonth() === month - 1 &&
    date.getDate() === day
  );
}

async function notifyWalkParticipants(participants, message) {
  if (!participants || participants.length === 0) return;

  for (const participant of participants) {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫ –∫–∞–∂–¥–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
      await bot.telegram.sendMessage(participant.id, message, {
        reply_markup: getMainMenuKeyboard(),
      });
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É ${participant.id}:`,
        error
      );
    }
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—É–ª–∫–∏
bot.action(/walk_details_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    await ctx.answerCbQuery();

    const walkDoc = await db.collection("walks").doc(walkId).get();

    if (!walkDoc.exists) {
      await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        reply_markup: getMainMenuKeyboard(),
      });
      return;
    }

    const walk = walkDoc.data();

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    let locationInfo = "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    if (walk.locationText) {
      locationInfo = walk.locationText;
    } else if (walk.location) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      locationInfo = walk.location.description || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
      if (walk.location.latitude && walk.location.longitude) {
        locationInfo += " (–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ)";
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ
    let walkDetails = `
  üóì –ü—Ä–æ–≥—É–ª–∫–∞: ${walk.date}, ${walk.time}
  üìç –ú–µ—Å—Ç–æ: ${locationInfo}
  üîÑ –¢–∏–ø: ${walk.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${walk.organizer.name} ${walk.organizer.username ? "@" + walk.organizer.username : ""}
  üêï –°–æ–±–∞–∫–∞: ${walk.dog.name}, ${walk.dog.breed}, ${getDogSizeText(walk.dog.size)}, ${getDogAgeText(walk.dog.age)}
  `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (walk.participants && walk.participants.length > 0) {
      walkDetails += "\nüë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å:\n";
      for (const participant of walk.participants) {
        walkDetails += `- ${participant.name} —Å ${participant.dogName}\n`;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
    const isOrganizer = walk.organizer.id == ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    const isParticipant =
      walk.participants && walk.participants.some((p) => p.id == ctx.from.id);

    // –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const keyboard = [];

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
    if (walk.location && walk.location.latitude && walk.location.longitude) {
      keyboard.push([
        {
          text: "üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ",
          url: `https://maps.google.com/maps?q=${walk.location.latitude},${walk.location.longitude}`,
        },
      ]);
    }

    if (isOrganizer) {
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      keyboard.push([
        {
          text: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚úèÔ∏è",
          callback_data: `edit_walk_${walkId}`,
        },
        {
          text: "–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚ùå",
          callback_data: `cancel_walk_${walkId}`,
        },
      ]);
    } else {
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (!isParticipant) {
        keyboard.push([
          { text: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚úÖ", callback_data: `join_walk_${walkId}` },
        ]);
      } else {
        keyboard.push([
          {
            text: "–ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—É–ª–∫—É ‚ùå",
            callback_data: `leave_walk_${walkId}`,
          },
        ]);
      }

      keyboard.push([
        {
          text: "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º üì©",
          callback_data: `contact_organizer_${walkId}`,
        },
      ]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.push([
      { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" },
    ]);

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
    if (walk.dog.photoId) {
      await ctx.replyWithPhoto(walk.dog.photoId, {
        caption: walkDetails,
        reply_markup: { inline_keyboard: keyboard },
      });
    } else {
      await ctx.reply(walkDetails, {
        reply_markup: { inline_keyboard: keyboard },
      });
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–≥—É–ª–∫–µ
bot.action(/join_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    const walkRef = db.collection("walks").doc(walkId);
    const walkDoc = await walkRef.get();

    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        reply_markup: getMainMenuKeyboard(),
      });
      return;
    }

    const walk = walkDoc.data();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if (
      walk.participants &&
      walk.participants.some((p) => p.id === ctx.from.id)
    ) {
      await ctx.answerCbQuery("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–µ!");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const newParticipant = {
      id: ctx.from.id,
      name: userData.name,
      username: ctx.from.username || null,
      dogName: userData.dog.name,
      dogBreed: userData.dog.breed,
      dogSize: userData.dog.size,
      dogAge: userData.dog.age,
      dogPhotoId: userData.dog.photoId,
    };

    const participants = walk.participants || [];
    await walkRef.update({
      participants: [...participants, newParticipant],
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    await ctx.answerCbQuery("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ!");

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply(
      "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
      { reply_markup: getMainMenuKeyboard() }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    try {
      await bot.telegram.sendMessage(
        walk.organizer.id,
        `
  üì¢ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≤–∞—à–µ–π –ø—Ä–æ–≥—É–ª–∫–µ!
  üë§ ${userData.name}
  üêï ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
  üì© –ö–æ–Ω—Ç–∞–∫—Ç: ${ctx.from.username ? "@" + ctx.from.username : "–ù–µ—Ç username"}
  `,
        { reply_markup: getMainMenuKeyboard() }
      );

      // –ï—Å–ª–∏ —É —Å–æ–±–∞–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
      if (userData.dog.photoId) {
        await bot.telegram.sendPhoto(walk.organizer.id, userData.dog.photoId);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É:", error);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ø—Ä–æ–≥—É–ª–∫–µ:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—É–ª–∫—É
// –ü–æ–∫–∏–Ω—É—Ç—å –ø—Ä–æ–≥—É–ª–∫—É
bot.action(/leave_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    const walkRef = db.collection("walks").doc(walkId);
    const walkDoc = await walkRef.get();

    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        reply_markup: getMainMenuKeyboard(),
      });
      return;
    }

    const walk = walkDoc.data();

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const updatedParticipants = walk.participants.filter(
      (p) => p.id !== ctx.from.id
    );

    await walkRef.update({
      participants: updatedParticipants,
    });

    await ctx.answerCbQuery("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É.");

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ø—Ä–æ–≥—É–ª–∫—É.", {
      reply_markup: getMainMenuKeyboard(),
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    try {
      await bot.telegram.sendMessage(
        walk.organizer.id,
        `–£—á–∞—Å—Ç–Ω–∏–∫ ${ctx.from.username ? "@" + ctx.from.username : ctx.from.id} –ø–æ–∫–∏–Ω—É–ª –≤–∞—à—É –ø—Ä–æ–≥—É–ª–∫—É.`,
        { reply_markup: getMainMenuKeyboard() }
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É:", error);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
bot.action(/cancel_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    const walkRef = db.collection("walks").doc(walkId);
    const walkDoc = await walkRef.get();

    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        reply_markup: getMainMenuKeyboard(),
      });
      return;
    }

    const walk = walkDoc.data();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
    if (walk.organizer.id !== ctx.from.id) {
      await ctx.answerCbQuery("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫—É.");
      return;
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
    if (walk.participants && walk.participants.length > 0) {
      const message = `
  ‚ùå –ü–†–û–ì–£–õ–ö–ê –û–¢–ú–ï–ù–ï–ù–ê!
  –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ–≥—É–ª–∫—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏:
  üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walk.date}, ${walk.time}
  üìç –ú–µ—Å—Ç–æ: ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${walk.organizer.name}
  üêï –°–æ–±–∞–∫–∞: ${walk.dog.name}, ${walk.dog.breed}
  `;
      await notifyWalkParticipants(walk.participants, message);
    }

    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—É–ª–∫—É
    await walkRef.delete();

    await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply(
      "–ü—Ä–æ–≥—É–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
      { reply_markup: getMainMenuKeyboard() }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–≥—É–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});

// –ö–æ–Ω—Ç–∞–∫—Ç —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
bot.action(/contact_organizer_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    const walkDoc = await db.collection("walks").doc(walkId).get();

    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
      await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", {
        reply_markup: getMainMenuKeyboard(),
      });
      return;
    }

    const walk = walkDoc.data();
    await ctx.answerCbQuery();

    if (walk.organizer.username) {
      await ctx.reply(
        `–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º: @${walk.organizer.username}`,
        { reply_markup: getMainMenuKeyboard() }
      );
    } else {
      await ctx.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–µ—Ç username –≤ Telegram", {
        reply_markup: getMainMenuKeyboard(),
      });

      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      try {
        await bot.telegram.sendMessage(
          walk.organizer.id,
          `–£—á–∞—Å—Ç–Ω–∏–∫ ${ctx.from.username ? "@" + ctx.from.username : ctx.from.id} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–æ–≥—É–ª–∫–∏ ${walk.date}, ${walk.time}.`,
          { reply_markup: getMainMenuKeyboard() }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É:", error);
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});
bot.action(/edit_walk_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    console.log(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ —Å ID: ${walkId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
    const walkDoc = await db.collection("walks").doc(walkId).get();
    if (!walkDoc.exists) {
      await ctx.answerCbQuery("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!ctx.session) ctx.session = {};
    ctx.session.editWalkId = walkId;

    console.log(`–°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID ${walkId} –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await ctx.answerCbQuery();

    // –í—Ö–æ–¥ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏
    return ctx.scene.enter("editWalkMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
bot.action("edit_profile", (ctx) => {
  ctx.answerCbQuery();
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–ò–º—è", "edit_name")],
      [Markup.button.callback("–ì–æ—Ä–æ–¥", "edit_city")],
      [Markup.button.callback("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–∞–∫–µ", "edit_dog")],
      [Markup.button.callback("–ù–∞–∑–∞–¥", "back_to_profile")],
    ])
  );
});

// –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å
bot.action("back_to_profile", (ctx) => {
  ctx.answerCbQuery();
  ctx.editMessageReplyMarkup({ inline_keyboard: [] });
  ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", { reply_markup: getMainMenuKeyboard() });
});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ
async function notifyNearbyUsers(walkId, organizer, walkData) {
  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ ${walkId}`);

    // –ï—Å–ª–∏ —É –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if (
      !walkData.location ||
      !walkData.location.latitude ||
      !walkData.location.longitude
    ) {
      console.log(
        "–£ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
      );
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
    const walkLatitude = walkData.location.latitude;
    const walkLongitude = walkData.location.longitude;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const usersSnapshot = await db.collection("users").get();

    let notificationCount = 0;

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const userDoc of usersSnapshot.docs) {
      const user = userDoc.data();

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ)
      if (user.id === organizer.id) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
      if (user.location && user.location.latitude && user.location.longitude) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –º–µ—Å—Ç–æ–º –ø—Ä–æ–≥—É–ª–∫–∏
        const distance = calculateDistance(
          user.location.latitude,
          user.location.longitude,
          walkLatitude,
          walkLongitude
        );

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ 3 –∫–º –æ—Ç –º–µ—Å—Ç–∞ –ø—Ä–æ–≥—É–ª–∫–∏
        if (distance <= 3) {
          console.log(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ${distance.toFixed(2)} –∫–º –æ—Ç –ø—Ä–æ–≥—É–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`
          );

          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const distanceText =
            distance < 1
              ? `${Math.round(distance * 1000)} –º–µ—Ç—Ä–∞—Ö`
              : `${distance.toFixed(1)} –∫–º`;

          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—É–ª–∫–µ
          const walkDetailsText = `
  üîî –ù–û–í–ê–Ø –ü–†–û–ì–£–õ–ö–ê –†–Ø–î–û–ú –° –í–ê–ú–ò!
  
  üóì –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${walkData.date}, ${walkData.time}
  üìç –ú–µ—Å—Ç–æ: ${walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"} (–≤ ${distanceText} –æ—Ç –≤–∞—Å)
  üîÑ –¢–∏–ø: ${walkData.type === "single" ? "–†–∞–∑–æ–≤–∞—è" : "–†–µ–≥—É–ª—è—Ä–Ω–∞—è"}
            
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${organizer.name}
  üêï –°–æ–±–∞–∫–∞: ${organizer.dog.name}, ${organizer.dog.breed}, ${getDogSizeText(organizer.dog.size)}, ${getDogAgeText(organizer.dog.age)}
            
  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—É–ª–∫–µ!
  `;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await bot.telegram.sendMessage(user.id, walkDetailsText, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                    callback_data: `join_walk_${walkId}`,
                  },
                ],
                [
                  {
                    text: "üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                    callback_data: `walk_details_${walkId}`,
                  },
                ],
                [
                  {
                    text: "‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data: "dismiss_notification",
                  },
                ],
              ],
            },
          });

          // –ï—Å–ª–∏ —É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –µ–≥–æ
          if (organizer.dog.photoId) {
            await bot.telegram.sendPhoto(user.id, organizer.dog.photoId, {
              caption: "–§–æ—Ç–æ —Å–æ–±–∞–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞",
            });
          }

          notificationCount++;
        }
      }
    }

    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${notificationCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ`);

    // –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (notificationCount > 0) {
      await bot.telegram.sendMessage(
        organizer.id,
        `‚úÖ –í–∞—à–∞ –ø—Ä–æ–≥—É–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${notificationCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü–∞–º —Å–æ–±–∞–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.`
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–µ:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø—Ä–æ–≥—É–ª–∫–∞—Ö –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–¥—à–∏—Ö
async function remindAboutWalks() {
  const now = new Date();
  const today = moment(now).format("DD.MM.YYYY");

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
  const walksSnapshot = await db.collection("walks").get();

  for (const walkDoc of walksSnapshot.docs) {
    const walk = walkDoc.data();
    const walkId = walkDoc.id;

    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏
    const [hours, minutes] = walk.time.split(":").map(Number);
    const walkTime = new Date(now);

    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—Ä–æ–≥—É–ª–∫–∏
    const [day, month, year] = walk.date.split(".").map(Number);
    walkTime.setFullYear(year, month - 1, day); // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    walkTime.setHours(hours, minutes, 0, 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—É–ª–∫–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —á–∞—Å–∞
    const timeDiffMinutes = Math.round((now - walkTime) / (1000 * 60));

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≥—É–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥, —É–¥–∞–ª—è–µ–º –µ—ë
    if (walk.type === "single" && timeDiffMinutes > 60) {
      await db.collection("walks").doc(walkId).delete();
      console.log(
        `–ü—Ä–æ–≥—É–ª–∫–∞ ${walkId} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ (–ø—Ä–æ—à–ª–∞ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥)`
      );
      continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≥—É–ª–∫–µ
    }

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø—Ä–æ–≥—É–ª–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è)
    if (walk.date === today) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ 15 –º–∏–Ω—É—Ç
      const timeToWalkMinutes = Math.round((walkTime - now) / (1000 * 60));

      if (timeToWalkMinutes > 14 && timeToWalkMinutes < 16) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É
        const reminderText = `
  üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –ø—Ä–æ–≥—É–ª–∫–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!
  üóì ${walk.date}, ${walk.time}
  üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  `;

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        await bot.telegram.sendMessage(walk.organizer.id, reminderText, {
          reply_markup: getMainMenuKeyboard(),
        });
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for (const participant of walk.participants) {
          await bot.telegram.sendMessage(participant.id, reminderText, {
            reply_markup: getMainMenuKeyboard(),
          });
        }
      }
    }
  }
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
cron.schedule("* * * * *", remindAboutWalks);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action("find_walk", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", {
    reply_markup: getWalkFiltersKeyboard(),
  });
});

bot.action("create_walk", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.scene.enter("createWalk");
});

bot.action("edit_name", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.enter("editName");
});

bot.action("edit_city", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.enter("editCity");
});

bot.action("edit_dog_name", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.enter("editDogName");
});

bot.action("edit_dog_breed", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.enter("editDogBreed");
});

bot.action("edit_dog_size", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.enter("editDogSize");
});

bot.action("edit_dog_age", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.enter("editDogAge");
});

bot.action("edit_dog_photo", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.scene.enter("editDogPhoto");
});

bot.action("my_walks", async (ctx) => {
  await ctx.answerCbQuery();
  const walksSnapshot = await db
    .collection("walks")
    .where("organizer.id", "==", ctx.from.id)
    .get();

  if (walksSnapshot.empty) {
    ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫.", {
      reply_markup: getMainMenuKeyboard(),
    });
    return;
  }

  await ctx.reply("–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏:");

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–∫
  await showWalksList(ctx, walksSnapshot.docs);

  await ctx.reply({ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main_menu" });
});

bot.action("my_participations", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–≥—É–ª–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
    const walksSnapshot = await db.collection("walks").get();

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≥—É–ª–æ–∫ (–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö, –∏ –≥–¥–µ —É—á–∞—Å—Ç–≤—É–µ—Ç)
    const allInvolvedWalks = [];

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏
    for (const walkDoc of walksSnapshot.docs) {
      const walk = walkDoc.data();
      const walkId = walkDoc.id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
      if (walk.organizer.id == ctx.from.id) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É, —á—Ç–æ —ç—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞
        allInvolvedWalks.push({
          id: walkId,
          ...walk,
          isOwn: true, // –ü–æ–º–µ—Ç–∫–∞ "–ú–æ—è –ø—Ä–æ–≥—É–ª–∫–∞"
        });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      else if (
        walk.participants &&
        walk.participants.some((p) => p.id == ctx.from.id)
      ) {
        allInvolvedWalks.push({
          id: walkId,
          ...walk,
          isOwn: false,
        });
      }
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–µ—Ç –≤–æ–æ–±—â–µ
    if (allInvolvedWalks.length === 0) {
      ctx.reply("–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–µ.", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
            [{ text: "üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "find_walk" }],
            [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "back_to_main_menu" }],
          ],
        },
      });
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –¥–∞–ª—å–Ω–∏–º)
    allInvolvedWalks.sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã
      const dateA = a.date.split(".").reverse().join("-");
      const dateB = b.date.split(".").reverse().join("-");

      if (dateA !== dateB) {
        return dateA.localeCompare(dateB);
      }

      // –ï—Å–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è
      return a.time.localeCompare(b.time);
    });

    await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ:");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—É–ª–æ–∫ —Å –ø–æ–º–µ—Ç–∫–æ–π –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö
    for (const walk of allInvolvedWalks) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—É–ª–æ–∫ - –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É
      const ownLabel = walk.isOwn ? "üåü –ú–û–Ø –ü–†–û–ì–£–õ–ö–ê" : "";

      // –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —Ç–µ–∫—Å—Ç–æ–º, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const dogAge =
        typeof walk.dog.age === "string" ? getDogAgeText(walk.dog.age) : "";

      // –í–∞–∂–Ω–æ! –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
      const walkPreview =
        `${ownLabel ? ownLabel + "\n" : ""}üïí ${walk.date}, ${walk.time}
  üìç ${walk.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üêï –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${walk.participants ? walk.participants.length + 1 : 1}
  üë§ ${walk.dog.name} (${walk.organizer.name}) ${dogAge}
  ${walk.organizer.username ? "@" + walk.organizer.username : ""}`.trim();

      await ctx.reply(walkPreview, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data: `walk_details_${walk.id}` }],
          ],
        },
      });
    }

    await ctx.reply({ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "back_to_main_menu" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—É–ª–∫–∞—Ö:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
bot.action("dismiss_notification", async (ctx) => {
  try {
    await ctx.answerCbQuery("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ");

    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø—Ü–∏—è–º–∏
    await ctx.reply("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –º–µ–Ω—é:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìç –ù–∞–π—Ç–∏ –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "find_walk" }],
          [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
        ],
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏
bot.action("size_small", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.size": "small",
    });
    await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});

bot.action("size_medium", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.size": "medium",
    });
    await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});

bot.action("size_large", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.size": "large",
    });
    await ctx.reply("‚úÖ –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏
bot.action("age_puppy", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.age": "puppy",
    });
    await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});

bot.action("age_young", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.age": "young",
    });
    await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});

bot.action("age_adult", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.age": "adult",
    });
    await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});

bot.action("age_senior", async (ctx) => {
  await ctx.answerCbQuery();
  try {
    await db.collection("users").doc(String(ctx.from.id)).update({
      "dog.age": "senior",
    });
    await ctx.reply("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    return ctx.scene.enter("editProfileMenu");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–∞–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return ctx.scene.enter("editProfileMenu");
  }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("type_single", async (ctx) => {
  await ctx.answerCbQuery();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏
    if (!ctx.wizard.state.walkData) {
      ctx.wizard.state.walkData = {};
    }
    ctx.wizard.state.walkData.type = "single";

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    let previewText = `
  üóì –ü—Ä–æ–≥—É–ª–∫–∞: ${ctx.wizard.state.walkData.date}, ${ctx.wizard.state.walkData.time}
  üìç –ú–µ—Å—Ç–æ: ${ctx.wizard.state.walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üîÑ –¢–∏–ø: –†–∞–∑–æ–≤–∞—è
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${userData.name}
  üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
  `;

    // –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await ctx.reply("–ü—Ä–µ–≤—å—é –ø—Ä–æ–≥—É–ª–∫–∏:", Markup.removeKeyboard());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    if (userData.dog.photoId) {
      await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: previewText,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    } else {
      await ctx.reply(previewText, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    }

    return ctx.wizard.next();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
    return ctx.scene.leave();
  }
});

bot.action("type_regular", async (ctx) => {
  await ctx.answerCbQuery();

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userDoc = await db.collection("users").doc(String(ctx.from.id)).get();
    const userData = userDoc.data();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—Ä–æ–≥—É–ª–∫–∏
    if (!ctx.wizard.state.walkData) {
      ctx.wizard.state.walkData = {};
    }
    ctx.wizard.state.walkData.type = "regular";

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≥—É–ª–∫–∏
    let previewText = `
  üóì –ü—Ä–æ–≥—É–ª–∫–∞: ${ctx.wizard.state.walkData.date}, ${ctx.wizard.state.walkData.time}
  üìç –ú–µ—Å—Ç–æ: ${ctx.wizard.state.walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
  üîÑ –¢–∏–ø: –†–µ–≥—É–ª—è—Ä–Ω–∞—è
  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${userData.name}
  üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
  `;

    // –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await ctx.reply("–ü—Ä–µ–≤—å—é –ø—Ä–æ–≥—É–ª–∫–∏:", Markup.removeKeyboard());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
    if (userData.dog.photoId) {
      await ctx.replyWithPhoto(userData.dog.photoId, {
        caption: previewText,
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    } else {
      await ctx.reply(previewText, {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
              { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
            ],
          ],
        },
      });
    }

    return ctx.wizard.next();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", {
      reply_markup: getMainMenuKeyboard(),
    });
    return ctx.scene.leave();
  }
});
bot.action("type_regular", async (ctx) => {
  ctx.wizard.state.walkData.type = "regular";

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—å—é
  const userData = ctx.wizard.state.userData;
  let previewText = `
    üóì –ü—Ä–æ–≥—É–ª–∫–∞: ${ctx.wizard.state.walkData.date}, ${ctx.wizard.state.walkData.time}
    üìç –ú–µ—Å—Ç–æ: ${ctx.wizard.state.walkData.locationText || "–ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"}
    üîÑ –¢–∏–ø: –†–µ–≥—É–ª—è—Ä–Ω–∞—è
    üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${userData.name}
    üêï –°–æ–±–∞–∫–∞: ${userData.dog.name}, ${userData.dog.breed}, ${getDogSizeText(userData.dog.size)}, ${getDogAgeText(userData.dog.age)}
    `;

  // –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  await ctx.reply("–ü—Ä–µ–≤—å—é –ø—Ä–æ–≥—É–ª–∫–∏:", Markup.removeKeyboard());

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ
  if (userData.dog.photoId) {
    await ctx.replyWithPhoto(userData.dog.photoId, {
      caption: previewText,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
            { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
          ],
        ],
      },
    });
  } else {
    await ctx.reply(previewText, {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [
            { text: "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å ‚úÖ", callback_data: "publish_walk" },
            { text: "–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data: "cancel_walk" },
          ],
        ],
      },
    });
  }

  return ctx.wizard.next();
});

bot.action("edit_date_time", (ctx) => ctx.scene.enter("editWalkDateTime"));
bot.action("edit_location", (ctx) => ctx.scene.enter("editWalkLocation"));
bot.action("edit_type", (ctx) => ctx.scene.enter("editWalkType"));
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ skip_photo
bot.action("skip_photo", async (ctx) => {
  await ctx.answerCbQuery();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ctx.wizard –∏ ctx.wizard.state
  if (!ctx.wizard || !ctx.wizard.state || !ctx.wizard.state.userData) {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "create_profile" }],
        ],
      },
    });
    return;
  }

  const userData = ctx.wizard.state.userData;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Ñ–æ—Ç–æ
  const user = {
    id: ctx.from.id,
    username: ctx.from.username || null, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null, –µ—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    name: userData.name,
    city: userData.city,
    location: userData.location || null,
    dog: {
      name: userData.dogName,
      breed: userData.dogBreed,
      size: userData.dogSize,
      age: userData.dogAge,
      photoId: null,
    },
    createdAt: new Date(),
  };

  try {
    await db.collection("users").doc(String(ctx.from.id)).set(user);
    ctx.reply(
      "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º.",
      { reply_markup: getMainMenuKeyboard() }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", {
      reply_markup: getMainMenuKeyboard(),
    });
  }

  return ctx.scene.leave();
});
bot.action(/breed_(.+)/, (ctx) => {
  const breed = ctx.match[1];
  if (breed === "–î—Ä—É–≥–∞—è (–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º)") {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏:", Markup.removeKeyboard());
    ctx.wizard.state.waitingForCustomBreed = true;
  } else {
    ctx.wizard.state.userData.dogBreed = breed;
    ctx.reply(
      "–ö–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∞—à–∞ —Å–æ–±–∞–∫–∞?",
      Markup.inlineKeyboard([
        [{ text: "–ú–∞–ª–µ–Ω—å–∫–∞—è", callback_data: "size_small" }],
        [{ text: "–°—Ä–µ–¥–Ω—è—è", callback_data: "size_medium" }],
        [{ text: "–ë–æ–ª—å—à–∞—è", callback_data: "size_large" }],
      ])
    );
    return ctx.wizard.next();
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
bot.action("edit_profile_menu", async (ctx) => {
  await ctx.answerCbQuery();

  await ctx.reply("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üìù –ò–º—è", callback_data: "edit_name" },
          { text: "üèô –ì–æ—Ä–æ–¥", callback_data: "edit_city" },
        ],
        [
          { text: "üêï –ò–º—è —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_name" },
          { text: "üê∂ –ü–æ—Ä–æ–¥–∞ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_breed" },
        ],
        [
          { text: "üìè –†–∞–∑–º–µ—Ä —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_size" },
          { text: "üóì –í–æ–∑—Ä–∞—Å—Ç —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_age" },
        ],
        [{ text: "üì∏ –§–æ—Ç–æ —Å–æ–±–∞–∫–∏", callback_data: "edit_dog_photo" }],
        [{ text: "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "my_profile" }],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–≥—É–ª–æ–∫
bot.action("walks_nearby", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫",
    {
      reply_markup: {
        inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
      },
    }
  );
});

bot.action(/city_(.+)/, async (ctx) => {
  await db
    .collection("users")
    .doc(String(ctx.from.id))
    .update({ city: ctx.match[1] });
  await ctx.reply("‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", {
    reply_markup: getMainMenuKeyboard(),
  });
  return ctx.scene.enter("editProfileMenu");
});
bot.action("send_location_reg", async (ctx) => {
  try {
    await ctx.answerCbQuery();

    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await ctx.reply(
      `üê∂ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±–∞—á—å–∏ –ø—Ä–æ–≥—É–ª–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.
  
  <i>–ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º:</i>
  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É Telegram –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  - –í–∫–ª—é—á–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  - –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ Telegram
  
  –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã:`,
      {
        parse_mode: "HTML",
        reply_markup: Markup.keyboard([
          [Markup.button.locationRequest("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")],
        ]).resize(),
      }
    );

    // –í —Å—Ü–µ–Ω–µ —ç—Ç–æ—Ç —Ñ–ª–∞–≥ —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –∏ –∑–¥–µ—Å—å
    if (ctx.wizard && ctx.wizard.state) {
      ctx.wizard.state.waitingForLocationReg = true;
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–∑–∂–µ.",
      Markup.inlineKeyboard([
        ...POPULAR_CITIES.map((city) => [
          { text: city, callback_data: `city_${city}` },
        ]),
        [{ text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_to_city_selection" }],
      ])
    );
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("publish_walk", async (ctx) => {
  try {
    console.log("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ–≥—É–ª–∫–∏");

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ scene.state
    const walkData = ctx.scene.state.walkData;
    const userData = ctx.scene.state.userData;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!walkData || !userData) {
      throw new Error("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—É–ª–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
    }

    console.log("–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏:", walkData);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—É–ª–∫—É –≤ –ë–î
    const walkRef = await db.collection("walks").add({
      date: walkData.date,
      time: walkData.time,
      locationText: walkData.locationText || null,
      location: walkData.location || null,
      type: walkData.type,
      organizer: {
        id: ctx.from.id,
        name: userData.name,
        username: ctx.from.username || null,
      },
      dog: {
        name: userData.dog.name,
        breed: userData.dog.breed,
        size: userData.dog.size,
        age: userData.dog.age,
        photoId: userData.dog.photoId,
      },
      participants: [],
      createdAt: new Date(),
    });

    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    try {
      await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
    }

    // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
    await ctx.reply(
      "‚úÖ –ü—Ä–æ–≥—É–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–æ–±–∞–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.",
      { reply_markup: getMainMenuKeyboard() }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    await notifyNearbyUsers(walkRef.id, userData, walkData);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–µ–¥—ã–¥—É—â–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º");
    await notifyPreviousParticipants(ctx.from.id, walkRef.id, walkData);

    return ctx.scene.leave();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      { reply_markup: getMainMenuKeyboard() }
    );
    return ctx.scene.leave();
  }
});

bot.action("walk_here", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
    Markup.keyboard([
      [Markup.button.locationRequest("üìç –ú–æ—ë —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")],
    ]).resize()
  );
  ctx.wizard.state.waitingForWalkHere = true;
});

// –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
bot.action("current_location", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
    Markup.keyboard([
      [Markup.button.locationRequest("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")],
    ]).resize()
  );
  ctx.wizard.state.waitingForCurrentLocation = true;
});

bot.action("choose_map_location", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
    Markup.keyboard([
      [Markup.button.locationRequest("üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ")],
    ]).resize()
  );
  ctx.wizard.state.waitingForMapLocation = true;
});

// –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—É–ª–∫–∏
bot.action("current_location_walk", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
    Markup.keyboard([
      [Markup.button.locationRequest("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")],
    ]).resize()
  );
  ctx.wizard.state.waitingForCurrentLocation = true;
});

bot.action("choose_map_walk", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:",
    Markup.keyboard([
      [Markup.button.locationRequest("üìç –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ")],
    ]).resize()
  );
  ctx.wizard.state.waitingForMapLocation = true;
});

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
bot.action(/view_location_(.+)/, async (ctx) => {
  try {
    const walkId = ctx.match[1];
    await ctx.answerCbQuery("–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É...");

    const walkDoc = await db.collection("walks").doc(walkId).get();
    if (!walkDoc.exists) {
      return;
    }

    const walk = walkDoc.data();
    if (!walk.location || !walk.location.latitude || !walk.location.longitude) {
      await ctx.reply(
        "–î–ª—è —ç—Ç–æ–π –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è."
      );
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ
    await ctx.replyWithLocation(
      walk.location.latitude,
      walk.location.longitude
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:", error);
  }
});

bot.on("location", async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    const location = ctx.message.location;
    console.log("–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:", location);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≥—É–ª–æ–∫
    if (ctx.session && ctx.session.waitingLocationForNearbyWalks) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
      ctx.session.waitingLocationForNearbyWalks = false;

      // –ü–æ–∏—Å–∫ –ø—Ä–æ–≥—É–ª–æ–∫ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
      await ctx.reply("–ò—â–µ–º –ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...");
      await findWalksNearby(ctx, location.latitude, location.longitude);

      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await ctx.reply("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω", {
        reply_markup: { remove_keyboard: true },
      });
    }

    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–¥–µ—Å—å, –Ω–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å
    // —Å–≤–æ–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–ª–∞–≥–∏ –≤ ctx.session –∏–ª–∏ ctx.wizard.state
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      {
        reply_markup: { remove_keyboard: true },
      }
    );
  }
});

bot.action("cancel_edit", (ctx) => {
  ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", { reply_markup: getMainMenuKeyboard() });
  return ctx.scene.enter("editProfileMenu");
});

bot.action("walks_today", async (ctx) => {
  await ctx.answerCbQuery();

  const today = moment().format("DD.MM.YYYY");
  const walksSnapshot = await db
    .collection("walks")
    .where("date", "==", today)
    .get();

  if (walksSnapshot.empty) {
    await ctx.reply("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
        ],
      },
    });
    return;
  }

  await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:");

  await showWalksList(ctx, walksSnapshot.docs);

  await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è:", {
    reply_markup: {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    },
  });
});

bot.action("walks_tomorrow", async (ctx) => {
  await ctx.answerCbQuery();

  const tomorrow = moment().add(1, "days").format("DD.MM.YYYY");
  const walksSnapshot = await db
    .collection("walks")
    .where("date", "==", tomorrow)
    .get();

  if (walksSnapshot.empty) {
    await ctx.reply("–ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
        ],
      },
    });
    return;
  }

  await ctx.reply("–ü—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:");

  await showWalksList(ctx, walksSnapshot.docs);

  await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è:", {
    reply_markup: {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    },
  });
});

bot.action(/city_(.+)/, (ctx) => {
  ctx.wizard.state.userData.city = ctx.match[1];
  ctx.reply("–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à—É —Å–æ–±–∞–∫—É?", Markup.removeKeyboard());
  return ctx.wizard.next();
});

bot.action("send_location", (ctx) => {
  ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", Markup.removeKeyboard());
});

editWalkMenuScene.action("edit_date_time", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editWalkDateTime");
});

editWalkMenuScene.action("edit_location", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editWalkLocation");
});

editWalkMenuScene.action("edit_type", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.scene.enter("editWalkType");
});

editWalkMenuScene.action("cancel_edit", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
    reply_markup: getMainMenuKeyboard(),
  });
  return ctx.scene.leave();
});

bot.action("walks_all_dates", async (ctx) => {
  await ctx.answerCbQuery();

  const walksSnapshot = await db.collection("walks").get();

  if (walksSnapshot.empty) {
    await ctx.reply("–ü—Ä–æ–≥—É–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üêï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É", callback_data: "create_walk" }],
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }],
        ],
      },
    });
    return;
  }

  await ctx.reply("–í—Å–µ –ø—Ä–æ–≥—É–ª–∫–∏:");

  await showWalksList(ctx, walksSnapshot.docs);

  await ctx.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è:", {
    reply_markup: {
      inline_keyboard: [[{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "find_walk" }]],
    },
  });
});

bot.action("send_location", (ctx) => {
  ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", Markup.removeKeyboard());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞—Ç—ã —Å –ø—Ä—è–º—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
bot.action("date_today", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.wizard.state.walkData = { date: moment().format("DD.MM.YYYY") };

  // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
    Markup.inlineKeyboard(
      [
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "20",
        "21",
        "22",
        "23",
      ]
        .map((h) => [{ text: h, callback_data: `hour_${h}` }])
        .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
    )
  );

  ctx.wizard.state.timeSelection = TIME_SELECTION.HOURS;
  return ctx.wizard.next();
});

bot.action("date_tomorrow", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.wizard.state.walkData = {
    date: moment().add(1, "days").format("DD.MM.YYYY"),
  };

  // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
    Markup.inlineKeyboard(
      [
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12",
        "13",
        "14",
        "15",
        "16",
        "17",
        "18",
        "19",
        "20",
        "21",
        "22",
        "23",
      ]
        .map((h) => [{ text: h, callback_data: `hour_${h}` }])
        .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
    )
  );

  ctx.wizard.state.timeSelection = TIME_SELECTION.HOURS;
  return ctx.wizard.next();
});
bot.action("date_custom", (ctx) => {
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", Markup.removeKeyboard());
  ctx.wizard.state.walkData = {};
});
bot.action("cancel", (ctx) => {
  ctx.reply("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", {
    reply_markup: getMainMenuKeyboard(),
  });
  return ctx.scene.leave();
});
bot.action(/hour_(\d+)/, async (ctx) => {
  await ctx.answerCbQuery();
  ctx.wizard.state.walkData.hours = ctx.match[1];

  await ctx.reply(
    `–í—ã–±—Ä–∞–Ω–æ: ${ctx.wizard.state.walkData.hours} —á.\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:`,
    Markup.inlineKeyboard(
      ["00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55"]
        .map((m) => [{ text: m, callback_data: `minute_${m}` }])
        .concat([[{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }]])
    )
  );

  ctx.wizard.state.timeSelection = TIME_SELECTION.MINUTES;
});

bot.action(/minute_(\d+)/, async (ctx) => {
  ctx.wizard.state.walkData.minutes = ctx.match[1];
  ctx.wizard.state.walkData.time = `${ctx.wizard.state.walkData.hours}:${ctx.wizard.state.walkData.minutes}`;
  ctx.reply(
    `–í—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏: ${ctx.wizard.state.walkData.time}\n–ì–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?`,
    Markup.inlineKeyboard([
      [{ text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç", callback_data: "send_location" }],
      [{ text: "–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", callback_data: "enter_location_text" }],
      [{ text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel" }],
    ])
  );
  return ctx.wizard.next();
});

bot
  .launch()
  .then(() => {
    BOT_START_TIME = Date.now(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    console.log("–ë–æ—Ç DogMeet —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
  })
  .catch((err) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
